{"componentChunkName":"component---src-layouts-post-layout-tsx","path":"/algorithm/python-dijkstra","result":{"data":{"markdownRemark":{"html":"<p><strong>최단 경로 알고리즘</strong>은 지하철 노선도, 네비게이션 등 다방면에 사용되는 알고리즘입니다. 이번 시간에는 <strong>Python</strong>을 이용해 <strong>하나의 시작 정점</strong>으로 부터 <strong>모든 다른 정점까지의 최단 경로</strong>를 찾는 최단 경로 알고리즘인 <strong>다익스트라(dijkstra) 알고리즘</strong>에 대해서 알아 보려고 합니다.</p>\n<h2>목차</h2>\n<blockquote>\n<ol>\n<li>최단 경로 알고리즘의 아이디어</li>\n<li>사전 배경 지식</li>\n<li>코드 구현</li>\n</ol>\n</blockquote>\n<br>\n<h2>최단 경로 알고리즘의 아이디어</h2>\n<p>최단 경로 알고리즘의 아이디어는 다음과 같습니다. 자료 구조로는 <code class=\"language-text\">graph</code> 를 사용하며, <strong>노드</strong>와 <strong>가중치를 가진 간선</strong> 을 이용하여 실제 거리를 표현합니다. 알고리즘을 간단하게 설명 하자면, 다음과 같습니다.</p>\n<blockquote>\n<ol>\n<li>출발 노드와, 도착 노드를 설정</li>\n<li>알고 있는 모든 거리 값을 부여</li>\n<li>출발 노드부터 시작하여, 방문하지 않은 인접 노드를 방문, 거리를 계산한 다음, 현재 알고있는 거리보다 짧으면 해당 값으로 갱신한다.</li>\n<li>현재 노드에 인접한 모든 미방문 노드까지의 거리를 계산했다면, 현재 노드는 방문한 것이므로, 미방문 집합에서 제거한다.</li>\n<li>도착 노드가 미방문 노드 집합에서 벗어나면, 알고리즘을 종료한다.</li>\n</ol>\n</blockquote>\n<h2>사전 배경 지식</h2>\n<p>다익스트라 알고리즘을 실행 하는 중에는 <strong>방문하지 않은 인접 노드</strong>를 방문하는 부분이 있습니다. 이 부분에서 <strong>우선순위 큐</strong>를 사용 하면, <strong>지금까지 발견된 가장 짧은 거리의 노드에 대해서 먼저 계산</strong>할 수 있으며, <strong>더 긴 거리로 계산 되었을 시 스킵</strong> 또한 가능합니다.</p>\n<p>우선순위 큐는 <code class=\"language-text\">heapq</code> 모듈을 이용해 구현 할 수 있습니다.</p>\n<p><a href=\"https://justkode.kr/python/pygorithm-2\">https://justkode.kr/python/pygorithm-2</a> (heapq 부분 참조)</p>\n<h2>코드 구현</h2>\n<ul>\n<li>출발 노드와, 도착 노드를 설정 (전체 거리를 알고 싶을 때는, 출발 노드만 설정 하여도 무방)</li>\n<li>알고 있는 모든 거리 값을 부여 (<code class=\"language-text\">Python</code>에서는 <code class=\"language-text\">dictionary</code> 객체를 이용하여 <code class=\"language-text\">graph</code>를 표현 할 수 있다.)</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">graph <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'A'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'B'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'C'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'D'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'B'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'C'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'B'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'D'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'D'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'E'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'F'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'E'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'F'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'F'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'A'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<br>\n<ul>\n<li>출발 노드부터 시작하여, 방문하지 않은 인접 노드를 방문, 거리를 계산한 다음, 현재 알고있는 거리보다 짧으면 해당 값으로 갱신한다.</li>\n<li>현재 노드에 인접한 모든 미방문 노드까지의 거리를 계산했다면, 현재 노드는 방문한 것이므로, 미방문 집합에서 제거한다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> heapq  <span class=\"token comment\"># 우선순위 큐 구현을 위함</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">dijkstra</span><span class=\"token punctuation\">(</span>graph<span class=\"token punctuation\">,</span> start<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  distances <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>node<span class=\"token punctuation\">:</span> <span class=\"token builtin\">float</span><span class=\"token punctuation\">(</span><span class=\"token string\">'inf'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> node <span class=\"token keyword\">in</span> graph<span class=\"token punctuation\">}</span>  <span class=\"token comment\"># start로 부터의 거리 값을 저장하기 위함</span>\n  distances<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>  <span class=\"token comment\"># 시작 값은 0이어야 함</span>\n  queue <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  heapq<span class=\"token punctuation\">.</span>heappush<span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>distances<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> start<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 시작 노드부터 탐색 시작 하기 위함.</span>\n\n  <span class=\"token keyword\">while</span> queue<span class=\"token punctuation\">:</span>  <span class=\"token comment\"># queue에 남아 있는 노드가 없으면 끝</span>\n    current_distance<span class=\"token punctuation\">,</span> current_destination <span class=\"token operator\">=</span> heapq<span class=\"token punctuation\">.</span>heappop<span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 탐색 할 노드, 거리를 가져옴.</span>\n\n    <span class=\"token keyword\">if</span> distances<span class=\"token punctuation\">[</span>current_destination<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> current_distance<span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 기존에 있는 거리보다 길다면, 볼 필요도 없음</span>\n      <span class=\"token keyword\">continue</span>\n    \n    <span class=\"token keyword\">for</span> new_destination<span class=\"token punctuation\">,</span> new_distance <span class=\"token keyword\">in</span> graph<span class=\"token punctuation\">[</span>current_destination<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n      distance <span class=\"token operator\">=</span> current_distance <span class=\"token operator\">+</span> new_distance  <span class=\"token comment\"># 해당 노드를 거쳐 갈 때 거리</span>\n      <span class=\"token keyword\">if</span> distance <span class=\"token operator\">&lt;</span> distances<span class=\"token punctuation\">[</span>new_destination<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 알고 있는 거리 보다 작으면 갱신</span>\n        distances<span class=\"token punctuation\">[</span>new_destination<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> distance\n        heapq<span class=\"token punctuation\">.</span>heappush<span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>distance<span class=\"token punctuation\">,</span> new_destination<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 다음 인접 거리를 계산 하기 위해 큐에 삽입</span>\n    \n  <span class=\"token keyword\">return</span> distances</code></pre></div>\n<br>\n<ul>\n<li>실행 결과</li>\n</ul>\n<p><strong>in</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>dijkstra<span class=\"token punctuation\">(</span>graph<span class=\"token punctuation\">,</span> <span class=\"token string\">'A'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><strong>out</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"terminal\"><pre class=\"language-terminal\"><code class=\"language-terminal\">{&#39;A&#39;: 0, &#39;B&#39;: 6, &#39;C&#39;: 1, &#39;D&#39;: 2, &#39;E&#39;: 5, &#39;F&#39;: 6}</code></pre></div>","id":"3f42e43d-c1df-5929-bf44-7dbab0bfa1f2","frontmatter":{"date":"2020-05-31","path":"/algorithm/python-dijkstra","title":"Python으로 다익스트라(dijkstra) 알고리즘 구현하기","tags":["Python","Algorithm"],"keyword":"Python, python, 파이썬, Algorithm, algorithm, 알고리즘, Python Algorithm, 파이썬 알고리즘","summary":"최단 경로를 찾아보자","img":"https://ever-line.co.kr/images/use-1-2_img.png","series":"Python Algorithm"}}},"pageContext":{"series":{"data":{"allMarkdownRemark":{"edges":[{"node":{"id":"3f42e43d-c1df-5929-bf44-7dbab0bfa1f2","excerpt":"최단 경로 알고리즘은 지하철 노선도, 네비게이션 등 다방면에 사용되는 알고리즘입니다. 이번 시간에는 Python을 이용해 하나의 시작 정점으로 부터 모든 다른 정점까지의 최단 경로를 찾는 최단 경로 알고리즘인 다익스트라(dijkstra…","frontmatter":{"date":"2020-05-31","tags":["Python","Algorithm"],"path":"/algorithm/python-dijkstra","title":"Python으로 다익스트라(dijkstra) 알고리즘 구현하기","img":"https://ever-line.co.kr/images/use-1-2_img.png","summary":"최단 경로를 찾아보자"}}},{"node":{"id":"90dc1d5c-c9c4-5f32-8680-58ad66638ded","excerpt":"Python, Algorithm, Tips…","frontmatter":{"date":"2020-03-27","tags":["Python","Algorithm"],"path":"/python/pygorithm-3","title":"파이썬으로 알고리즘을 풀어보자! - 3. 팁","img":"https://miro.medium.com/max/1027/1*Ud_bNdeWPf4iN1EcydaDFA.png","summary":"Python, Algorithm, Tips"}}},{"node":{"id":"2785be5e-423f-5687-9250-7910221425fa","excerpt":"Python…","frontmatter":{"date":"2020-03-22","tags":["Python","Algorithm"],"path":"/python/pygorithm-2","title":"파이썬으로 알고리즘을 풀어보자! - 2. 모듈","img":"https://miro.medium.com/max/1027/1*Ud_bNdeWPf4iN1EcydaDFA.png","summary":"Python의 내장 함수와 모듈"}}},{"node":{"id":"e19fe602-2f72-5872-b3c1-453adbbe61bf","excerpt":"Python…","frontmatter":{"date":"2020-03-21","tags":["Python","Algorithm"],"path":"/python/pygorithm-1","title":"파이썬으로 알고리즘을 풀어보자! - 1. 입문","img":"https://miro.medium.com/max/1027/1*Ud_bNdeWPf4iN1EcydaDFA.png","summary":"Python의 입출력에 대하여"}}}]}}},"categoryPosts":{"data":{"allMarkdownRemark":{"edges":[{"node":{"id":"003792ad-8b6f-54a2-b695-a83c358d53dd","excerpt":"…","frontmatter":{"date":"2020-06-13","tags":["Machine-Learning","Python"],"path":"/machine-learning/linear_model","title":"Python으로 알아보는 선형 회귀","img":"https://miro.medium.com/max/683/1*h6PuI6-PdPE8d4dTnhcg3w.png","summary":"scikit-learn으로 알아보는 Linear Regression"}}},{"node":{"id":"3f42e43d-c1df-5929-bf44-7dbab0bfa1f2","excerpt":"최단 경로 알고리즘은 지하철 노선도, 네비게이션 등 다방면에 사용되는 알고리즘입니다. 이번 시간에는 Python을 이용해 하나의 시작 정점으로 부터 모든 다른 정점까지의 최단 경로를 찾는 최단 경로 알고리즘인 다익스트라(dijkstra…","frontmatter":{"date":"2020-05-31","tags":["Python","Algorithm"],"path":"/algorithm/python-dijkstra","title":"Python으로 다익스트라(dijkstra) 알고리즘 구현하기","img":"https://ever-line.co.kr/images/use-1-2_img.png","summary":"최단 경로를 찾아보자"}}},{"node":{"id":"29546be3-1a03-54d6-9b13-9d89593d3d63","excerpt":"우리가 가공한 데이터들을  객체에 녹여 내는 것을 성공 했다고 치겠습니다! 이를 바로  등으로 변환하여 학습을 시도 하면 어떻게 될까요? 만약 feature마다 범위가 1-100, 0-1000…","frontmatter":{"date":"2020-05-03","tags":["Data-Science","Python"],"path":"/data-science/pandas-normalization","title":"Pandas에서 데이터 정규화 하기","img":"https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcTQU34oEynvWRbC1FvDCWj8Rn16cCqypKf8q9LKbI0i1SLWtU9e&usqp=CAU","summary":"데이터 전처리 방법 중 하나인 정규화"}}},{"node":{"id":"3e5a78d9-ea4d-5a77-a082-281403358a61","excerpt":"에서 모델의 가중치를 저장하기 위해선 3가지 함수만 알면 충분 합니다. : 객체를 디스크에 저장합니다.  모듈을 이용하여 객체를 직렬화 하며, 이 함수를 사용하여 모든 종류의 모델, Tensor 등을 저장할 수 있습니다. :  모듈을 이용하여 객체를 역직렬화하여 메모리에 할당합니다. : 역직렬화된 state_dict를 사용, 모델의 매개변수들을 불러옵니다. state_dict는 간단히 말해 각 체층을 매개변수 Tensor로 매핑한 Python…","frontmatter":{"date":"2020-04-26","tags":["Deep-Learning","Python"],"path":"/deep-learning/pytorch-save","title":"Pytorch에서 학습한 모델 저장 및 불러오기","img":"/post_image/pytorch-save.png","summary":"Pytorch 모델을 저장하고, 불러와 보기"}}}]}}}}}}