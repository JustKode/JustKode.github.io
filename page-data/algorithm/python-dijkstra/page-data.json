{"componentChunkName":"component---src-layouts-post-layout-tsx","path":"/algorithm/python-dijkstra","result":{"data":{"markdownRemark":{"html":"<p><strong>최단 경로 알고리즘</strong>은 지하철 노선도, 네비게이션 등 다방면에 사용되는 알고리즘입니다. 이번 시간에는 <strong>Python</strong>을 이용해 <strong>하나의 시작 정점</strong>으로 부터 <strong>모든 다른 정점까지의 최단 경로</strong>를 찾는 최단 경로 알고리즘인 <strong>다익스트라(dijkstra) 알고리즘</strong>에 대해서 알아 보려고 합니다.</p>\n<h2>목차</h2>\n<blockquote>\n<ol>\n<li>최단 경로 알고리즘의 아이디어</li>\n<li>사전 배경 지식</li>\n<li>코드 구현</li>\n</ol>\n</blockquote>\n<br>\n<h2>최단 경로 알고리즘의 아이디어</h2>\n<p>최단 경로 알고리즘의 아이디어는 다음과 같습니다. 자료 구조로는 <code class=\"language-text\">graph</code> 를 사용하며, <strong>노드</strong>와 <strong>가중치를 가진 간선</strong> 을 이용하여 실제 거리를 표현합니다. 알고리즘을 간단하게 설명 하자면, 다음과 같습니다.</p>\n<blockquote>\n<ol>\n<li>출발 노드와, 도착 노드를 설정</li>\n<li>알고 있는 모든 거리 값을 부여</li>\n<li>출발 노드부터 시작하여, 방문하지 않은 인접 노드를 방문, 거리를 계산한 다음, 현재 알고있는 거리보다 짧으면 해당 값으로 갱신한다.</li>\n<li>현재 노드에 인접한 모든 미방문 노드까지의 거리를 계산했다면, 현재 노드는 방문한 것이므로, 미방문 집합에서 제거한다.</li>\n<li>도착 노드가 미방문 노드 집합에서 벗어나면, 알고리즘을 종료한다.</li>\n</ol>\n</blockquote>\n<h2>사전 배경 지식</h2>\n<p>다익스트라 알고리즘을 실행 하는 중에는 <strong>방문하지 않은 인접 노드</strong>를 방문하는 부분이 있습니다. 이 부분에서 <strong>우선순위 큐</strong>를 사용 하면, <strong>지금까지 발견된 가장 짧은 거리의 노드에 대해서 먼저 계산</strong>할 수 있으며, <strong>더 긴 거리로 계산 되었을 시 스킵</strong> 또한 가능합니다.</p>\n<p>우선순위 큐는 <code class=\"language-text\">heapq</code> 모듈을 이용해 구현 할 수 있습니다.</p>\n<p><a href=\"https://justkode.kr/python/pygorithm-2\">https://justkode.kr/python/pygorithm-2</a> (heapq 부분 참조)</p>\n<h2>코드 구현</h2>\n<ul>\n<li>출발 노드와, 도착 노드를 설정 (전체 거리를 알고 싶을 때는, 출발 노드만 설정 하여도 무방)</li>\n<li>알고 있는 모든 거리 값을 부여 (<code class=\"language-text\">Python</code>에서는 <code class=\"language-text\">dictionary</code> 객체를 이용하여 <code class=\"language-text\">graph</code>를 표현 할 수 있다.)</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">graph <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'A'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'B'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'C'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'D'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'B'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'C'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'B'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'D'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'D'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'E'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'F'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'E'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'F'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'F'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'A'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<br>\n<ul>\n<li>출발 노드부터 시작하여, 방문하지 않은 인접 노드를 방문, 거리를 계산한 다음, 현재 알고있는 거리보다 짧으면 해당 값으로 갱신한다.</li>\n<li>현재 노드에 인접한 모든 미방문 노드까지의 거리를 계산했다면, 현재 노드는 방문한 것이므로, 미방문 집합에서 제거한다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> heapq  <span class=\"token comment\"># 우선순위 큐 구현을 위함</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">dijkstra</span><span class=\"token punctuation\">(</span>graph<span class=\"token punctuation\">,</span> start<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  distances <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>node<span class=\"token punctuation\">:</span> <span class=\"token builtin\">float</span><span class=\"token punctuation\">(</span><span class=\"token string\">'inf'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> node <span class=\"token keyword\">in</span> graph<span class=\"token punctuation\">}</span>  <span class=\"token comment\"># start로 부터의 거리 값을 저장하기 위함</span>\n  distances<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>  <span class=\"token comment\"># 시작 값은 0이어야 함</span>\n  queue <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  heapq<span class=\"token punctuation\">.</span>heappush<span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>distances<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> start<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 시작 노드부터 탐색 시작 하기 위함.</span>\n\n  <span class=\"token keyword\">while</span> queue<span class=\"token punctuation\">:</span>  <span class=\"token comment\"># queue에 남아 있는 노드가 없으면 끝</span>\n    current_distance<span class=\"token punctuation\">,</span> current_destination <span class=\"token operator\">=</span> heapq<span class=\"token punctuation\">.</span>heappop<span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 탐색 할 노드, 거리를 가져옴.</span>\n\n    <span class=\"token keyword\">if</span> distances<span class=\"token punctuation\">[</span>current_destination<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> current_distance<span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 기존에 있는 거리보다 길다면, 볼 필요도 없음</span>\n      <span class=\"token keyword\">continue</span>\n    \n    <span class=\"token keyword\">for</span> new_destination<span class=\"token punctuation\">,</span> new_distance <span class=\"token keyword\">in</span> graph<span class=\"token punctuation\">[</span>current_destination<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n      distance <span class=\"token operator\">=</span> current_distance <span class=\"token operator\">+</span> new_distance  <span class=\"token comment\"># 해당 노드를 거쳐 갈 때 거리</span>\n      <span class=\"token keyword\">if</span> distance <span class=\"token operator\">&lt;</span> distances<span class=\"token punctuation\">[</span>new_destination<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 알고 있는 거리 보다 작으면 갱신</span>\n        distances<span class=\"token punctuation\">[</span>new_destination<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> distance\n        heapq<span class=\"token punctuation\">.</span>heappush<span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>distance<span class=\"token punctuation\">,</span> new_destination<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 다음 인접 거리를 계산 하기 위해 큐에 삽입</span>\n    \n  <span class=\"token keyword\">return</span> distances</code></pre></div>\n<br>\n<ul>\n<li>실행 결과</li>\n</ul>\n<p><strong>in</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>dijkstra<span class=\"token punctuation\">(</span>graph<span class=\"token punctuation\">,</span> <span class=\"token string\">'A'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><strong>out</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"terminal\"><pre class=\"language-terminal\"><code class=\"language-terminal\">{&#39;A&#39;: 0, &#39;B&#39;: 6, &#39;C&#39;: 1, &#39;D&#39;: 2, &#39;E&#39;: 5, &#39;F&#39;: 6}</code></pre></div>","id":"c4d2de36-6239-54af-bb13-b0df38d34030","frontmatter":{"date":"2020-05-31","path":"/algorithm/python-dijkstra","title":"Python으로 다익스트라(dijkstra) 알고리즘 구현하기","tags":["Python","Algorithm"],"keyword":"Python, python, 파이썬, Algorithm, algorithm, 알고리즘, Python Algorithm, 파이썬 알고리즘","summary":"최단 경로를 찾아보자","img":"https://ever-line.co.kr/images/use-1-2_img.png","series":"Python Algorithm"}}},"pageContext":{"series":{"data":{"allMarkdownRemark":{"edges":[{"node":{"id":"c4d2de36-6239-54af-bb13-b0df38d34030","excerpt":"최단 경로 알고리즘은 지하철 노선도, 네비게이션 등 다방면에 사용되는 알고리즘입니다. 이번 시간에는 Python을 이용해 하나의 시작 정점으로 부터 모든 다른 정점까지의 최단 경로를 찾는 최단 경로 알고리즘인 다익스트라(dijkstra…","frontmatter":{"date":"2020-05-31","tags":["Python","Algorithm"],"path":"/algorithm/python-dijkstra","title":"Python으로 다익스트라(dijkstra) 알고리즘 구현하기","img":"https://ever-line.co.kr/images/use-1-2_img.png","summary":"최단 경로를 찾아보자"}}},{"node":{"id":"4820c71c-0dc5-5c52-801d-6e075ada0f05","excerpt":"Python, Algorithm, Tips…","frontmatter":{"date":"2020-03-27","tags":["Python","Algorithm"],"path":"/python/pygorithm-3","title":"파이썬으로 알고리즘을 풀어보자! - 3. 팁","img":"https://miro.medium.com/max/1027/1*Ud_bNdeWPf4iN1EcydaDFA.png","summary":"Python, Algorithm, Tips"}}},{"node":{"id":"85776373-15fc-5d53-8886-55aa1a1868d5","excerpt":"Python…","frontmatter":{"date":"2020-03-22","tags":["Python","Algorithm"],"path":"/python/pygorithm-2","title":"파이썬으로 알고리즘을 풀어보자! - 2. 모듈","img":"https://miro.medium.com/max/1027/1*Ud_bNdeWPf4iN1EcydaDFA.png","summary":"Python의 내장 함수와 모듈"}}},{"node":{"id":"f114d3ad-7b22-592c-ad22-2fa716ea76ce","excerpt":"Python…","frontmatter":{"date":"2020-03-21","tags":["Python","Algorithm"],"path":"/python/pygorithm-1","title":"파이썬으로 알고리즘을 풀어보자! - 1. 입문","img":"https://miro.medium.com/max/1027/1*Ud_bNdeWPf4iN1EcydaDFA.png","summary":"Python의 입출력에 대하여"}}}]}}},"categoryPosts":{"data":{"allMarkdownRemark":{"edges":[{"node":{"id":"4479fe5d-3159-5901-8db0-8b02869a279e","excerpt":"Data Science And Math 안녕하세요? Justkode 입니다. 많은 Machine Learning과 Deep Learning…","frontmatter":{"date":"2021-06-30","tags":["Data-Science","Python"],"path":"/data-science/just-data-science-1","title":"[찍먹 Data Science] 1. Math, Numpy","img":"/post_image/thumbnail/just-data-science-1.jpg","summary":"간단한 수학 식을 Numpy로 구현해 보자"}}},{"node":{"id":"7d3d5ec9-4e8c-5145-9af6-9ac978b1a773","excerpt":"REST API를 사용 하게 된다면, 사용자 인증 방법으로 제일 많이 사용하는 것이 JWT (JSON Web Token) 입니다. JWT에 대해 더 알고 싶다면. Velopert 님의 게시글을 참고 해 주세요! 우선 설치해야 할 것 일단 와 를 설치 하여야 합니다. bcrypt 사용법 의 사용법은 두 가지로 나뉩니다. 암호화와 암호 일치 확인입니다. 우선 암호화 방법에 대해서 알아 보겠습니다. 암호화 방법 다음 코드를 보시겠습니다. In Out…","frontmatter":{"date":"2020-07-18","tags":["Python"],"path":"/python/flask-restapi-3","title":"Flask로 REST API 구현하기 - 3. JWT로 사용자 인증하기","img":"https://media.vlpt.us/images/dnjscksdn98/post/46839202-0ee0-4585-ac24-ec4e3152c012/jwt_logo.png?w=768","summary":"PyJWT와 bcrypt를 이용한 사용자 인증"}}},{"node":{"id":"eaa964f5-f6cc-585a-9c35-9befb6dad97a","excerpt":"저번 시간에는 선형 회귀에 대해서 배워 보았습니다. 선형 회귀는 차원의 벡터 독립 변수 가 존재한다고 가정 하면, 그에 따른 종속 변수  가 있다고 가정하여, 선형 상관 관계를 모델링 하는 것이라고 배웠습니다. 예시 코드를 보겠습니다. 하지만, 범주형 변수에 대해서 생각을 해 보겠습니다. 예를 들어, 50점 이상이면 합격, 이하면 불합격이고, 이를 합격일 시 1로, 불합격일 시…","frontmatter":{"date":"2020-07-16","tags":["Machine-Learning","Python"],"path":"/machine-learning/logistic-regression","title":"수식과 코드로 알아보는 로지스틱 회귀","img":"https://memegenerator.net/img/instances/73789366.jpg","summary":"수식과 코드로 통해 보는 Logistic Regression"}}},{"node":{"id":"2ae2e14a-e7fa-5188-870f-a23b9b921219","excerpt":"이번 시간에는 Python 시각화 라이브러리인 matplotlib을 이용해, 간단하게 데이터를 시각화 하는 예제 코드를 알아보는 시간을 가져 보겠습니다. 해당 포스트는 ratsgo님의 게시글를 참고하여, 데이터 및 주석 등을 재구성한 포스트임을 알립니다. 가장 먼저 와 을 import 합니다. 꺾은 선 그래프 막대 그래프 히스토그램 선 그래프 산점도 히트맵 마치며 지금까지 matplotlib…","frontmatter":{"date":"2020-07-11","tags":["Data-Science","Python"],"path":"/data-science/matplotlib-summary","title":"matplotlib으로 하는 데이터 시각화 예제 정리","img":"/post_image/thumbnail/matplotlib-summary.PNG","summary":"데이터 분석에 필수적인 데이터 시각화"}}}]}}}}},"staticQueryHashes":["234633779","63159454"]}