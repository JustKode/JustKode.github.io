{"componentChunkName":"component---src-layouts-post-layout-tsx","path":"/etc/2023-retrospect/","result":{"data":{"markdownRemark":{"html":"<h3>머릿말</h3>\n<p>안녕하세요? <strong>JustKode, 박민재</strong> 입니다. 이 글을 쓰는 지금, <strong>Data Engineer</strong>로 <strong>LINE Plus</strong>에 입사한지 벌써 만으로 1년이 다 되어 가네요. 올해 1월에 입사 했으니까요.</p>\n<p><strong>첫 사회 생활</strong>, <strong>첫 회사</strong>에서 (첫 인턴, 첫 회사가 <strong>LINE Plus</strong> 입니다.) 많은 것들을 경험 했어요. 학생 때 한 개발은 한편으로는 기술적인 자아 실현을 위한 개발이었다면, 개발자로서 하는 개발은 고려해야 할 것들이 많이 다르니까요. 학생 때와는 확실하게 다른 시야에서 개발이라는 것을 바라 볼 수 있었습니다. 그런 의미에서 개발자로 첫 해를 보낸 2023년이 끝나가는 지금, 내가 <strong>S/W Engineer</strong>로 어떠한 삶을 살아 왔는지 정리할 필요가 있다고 생각 했습니다. 그래서 이번 글에서는 내가 <strong>무엇을</strong> 했는지, 어떤 것들이 <strong>좋았는지</strong>, 어떤 것들이 <strong>아쉬웠는지</strong>, 어떤 것들을 <strong>고칠 수 있는지</strong>를 <strong>KPT 회고</strong> 방식에 맞추어 써보려고 합니다.</p>\n<blockquote>\n<p>FYI) Keep (잘한 것), Problem (아쉬운 것), Try (시도할 것)를 바탕으로 회고 하는 방법을 <strong>KPT 회고</strong> 라고 합니다.</p>\n<p>이번에 쓴 글은 저의 감정을 그대로 녹여 냈기 때문에, 상당히 러프한 글이 될 것 같아요. 독자 분들의 양해 부탁드립니다.</p>\n</blockquote>\n<h3>무슨 일을 하셨나요?</h3>\n<p>저는 <strong>LINE</strong>이라는 프로덕트 내에 송출 되는 <strong>수 많은 광고 시스템의 데이터</strong>를 모아서 관리 해 주는 팀에서 업무를 수행 하게 되었습니다. 저희 팀 소개 <a href=\"https://www.youtube.com/watch?v=rCbzilpjsdY\">Youtube 링크</a>는 다음과 같아요. 저는 이 팀에서 <strong>Batch Data Pipeline</strong> 파트에서 개발을 수행 하게 되었습니다. 하루에 800억 건 정도의 데이터가 쏟아지는 <strong>Hadoop</strong> 기반의 환경에서 다음과 같은 업무들을 수행 했어요.</p>\n<ul>\n<li><strong>Hadoop의 I/O Performance</strong>을 높이기 위한, HDFS Block 관리, File Retention 적용 등의 <strong>Data Management</strong> 업무\n<ul>\n<li>HDFS Block Merge, Spark Streaming, File Retention Job</li>\n</ul>\n</li>\n<li><strong>Ad Performance Report Aggregation</strong> 개발 업무\n<ul>\n<li>Spark 기반으로 DSP, SSP Report 개발 및 최적화</li>\n</ul>\n</li>\n<li><strong>Kubernetes</strong> 기반의 <strong>Multitenancy를</strong> 지원 하는 <strong>Airflow</strong> 클러스터 개발 지원\n<ul>\n<li>KubernetesPodOperator의 내부 로직을 수정 한 CustomOperator 개발 등</li>\n</ul>\n</li>\n<li><strong>Batch Data Pipeline</strong>의 <strong>Monitroing System</strong> 개발 업무\n<ul>\n<li>Spark Job Monitoring in Prometheus, Airflow Monitoring</li>\n</ul>\n</li>\n<li>데이터의 품질을 보장 하기 위한, <strong>Data Quality Verification</strong> 관련 PoC 진행\n<ul>\n<li>Amazon Deequ, Great Expectations</li>\n</ul>\n</li>\n</ul>\n<p>이 외에도 자잘한 업무들이 있었지만, 크게 저 5가지를 꼽을 수 있을 것 같아요. 해당 업무들을 수행 하면서 <strong>업무적</strong>으로, <strong>기술적</strong>으로, 그리고 내가 느낀 <strong>감정적</strong>으로 가감 없이 글을 써 내려 감으로써, 그 다음 스텝을 밟을 수 있도록 준비 하려고 합니다. 저희 파트는 저 제외 하고 저랑 <strong>10살 이상</strong>씩 차이나는 시니어 개발자 분들이었습니다. 그러다 보니, 다른 분들에게 폐를 끼치지 않기 위해, 입사 초반에는 엄청 열심히 공부했고, 옆에서 다른 분들이 회의 때 어떤 식으로 <strong>의견을 전달 하고 나누는</strong>지, 어떤 식으로 <strong>요구 사항들을 수행</strong> 하고, 어떤 기준으로 <strong>판단하고 Action</strong>하는 지를 어깨 너머로 많이 배울 수 있었어요. 그 덕분에 옆에서 많은 것을 배워 나갈 수 있었던 것 같아요.</p>\n<p align=\"center\">\n    <img src=\"/post_image/retrospect/2023-1.jpeg\" style=\"width:50%;max-width:320px;\"/>\n    <div align=\"center\" color=\"#aaaaaa\">우리 파트 요악.jpg</div>\n</p>\n<h3>Need to Keep (잘한 것)</h3>\n<h4>Code Review</h4>\n<p>회사에서 진행하는 팀 내 동료 평가에서도 저에 대한 칭찬으로 나왔던 부분이었습니다. 저는 다른 사람의 코드를 리뷰 할 때, 다른 사람이 짠 코드의 프로젝트 내 <strong>히스토리</strong>와 <strong>컨텍스트</strong>를 파악하고 코드 리뷰를 진행 하려고 노력 했어요. 그래서, 사람들이 <strong>놓치는 부분</strong>이나, 기술적으로 <strong>더 좋은 방안의 리뷰</strong>를 드릴 수 있었습니다. 또한, <strong>코드 디자인 패턴</strong> 관련 부분에서도 파트원들과 서로 <strong>건설적인 논의</strong>를 하며 업무를 수행 했어요.</p>\n<p>이에 도움이 되었던 것이 우리 파트 사람들 끼리 <strong>주기적인 회의</strong>를 통해서 각자 어떤 개발을 수행 하고 있는지 <strong>인식</strong>을 맞춰 간 부분이 매우 크게 작용 했다고 생각해요. 이는 우리 파트원 분들 모두가 힘을 합쳐 가능했던 부분이라고 생각합니다. 당연히 저희 팀원 분들도 <strong>컨텍스트</strong>가 잘 공유 되어 있는 덕에, 제 코드도 꼼꼼하게 리뷰 해 주셨습니다. 추후, 다른 팀 혹은 다른 곳에서 일을 하더라도 이런 문화가 정착 될 수 있도록 하는게 중요 하다고 생각이 들어요. <strong>Scrum</strong> 같은 문화가 대표적인 예시이겠죠?</p>\n<p>앞으로도 <strong>좋은 코드 리뷰</strong>를 위해, 서로가 무엇을 하고 있는지 <strong>인지</strong>하고, 서로의 상황을 <strong>이해</strong>하고, <strong>기술적인 혹은 관리의 측면</strong>에서 처한 상황에 맞게 <strong>더 좋은 미래</strong>를 생각 할 수 있도록 계속 정진해 나가는 것이 좋을 것 같아요. 이를 위해 <strong>좋은 코드 품질</strong>에 대한 공부, <strong>클린 코드</strong>, <strong>디자인 패턴</strong> 등의 공부 또한 끊임 없이 해 나갈 예정입니다.</p>\n<p align=\"center\">\n    <img src=\"/post_image/retrospect/2023-2.jpeg\" style=\"width:30%;max-width:280px;\"/>\n    <div align=\"center\" color=\"#aaaaaa\">스파게티 코드는 더 이상 Never.</div>\n</p>\n<h4>Engineering</h4>\n<p>기술적인 탐구를 바탕으로 이를 프로덕트에 적용 하는 것, 제목 그대로 <strong>엔지니어링</strong>에 대해서도 좋은 평가를 받았습니다. 하루에 <strong>PB 단위의 데이터</strong>를 <strong>다양한 환경</strong>에서 처리 하다 보니, <strong>개발 비용, 컴퓨팅 비용</strong>에 대한 문제가 만만치 않았는데요, 이를 위해서 많은 기술적인 탐구를 수행 했습니다.</p>\n<p>특히 <strong>Apache Spark</strong> 기반의 <strong>Distributed-Computing System</strong>에 대한 탐구를 주로 수행 했습니다. <strong>Spark SQL API</strong>를 통해, <strong>DataFrame</strong> 연산을 수행 할 때, 내부적으로는 어떤 로직으로 연산이 수행 되며, 이 로직에서 발생하는 <strong>Shuffle</strong>, <strong>Spill</strong>과 같은 큰 연산을 최소화 하기 위해서, 어떻게 <strong>쿼리를 튜닝</strong> 해야 하는지 등을 연구 했습니다. <strong>OLAP 플랫폼</strong>의 <strong>신규 Cluster</strong>로의 Migration을 위해 3년 치의 데이터를 재처리 해야 하는 요구사항이 있었는데요, 이 요구사항 덕분에 어쩌다 보니 많이 공부 하게 될 수 있었어요. 사실 전 아직은 모자랍니다. <strong>분산 컴퓨팅</strong> 환경에서 <strong>Batch Data</strong>등은 처리 해 보았지만, 아직 <strong>Spark Structured Streaming</strong> 과 같은 <strong>Mini-Batch Data</strong>들을 처리 해 본 경험이 전무 하거든요. 그렇기 때문에 내년에는 <strong>Spark Structured Streaming</strong>에 도전 해 보고 싶습니다. 또한, 기존 <strong>Spark 2.x</strong> 버전 환경에서 수행 하던 Report Job들을 <strong>Spark 3.x</strong> 버전으로 Migration을 수행하여, <strong>AQE (Adaptive Query Execution)</strong> 와 같은 <strong>Runtime 최적화</strong> 기능을 적용 해 보고 싶어요.</p>\n<h4>Continuous Learning</h4>\n<p>제 스스로 잘했다고 생각 했던 것은 <strong>끊임 없는 학습</strong>이었습니다. <strong>Spark, Airflow, Kubernetes Python Client, Amazon Deequ, Great Expectation</strong> 등의 다양한 기술들을 사용 해 보았어요. 사용 중 <strong>동작 원리</strong>에 대해 궁금 하다면 GitHub에 올라와 있는 Repository 내의 <strong>Source Code</strong>를 뒤져서 동작 원리를 파악하는 등, <strong>Data Engineering</strong>에서 주로 사용 하는 <strong>Open Source</strong>에 대한 <strong>Deep Dive</strong> 또한 놓치지 않으려고 노력 했습니다. 그 덕에 <strong>Kubernetes</strong> 기반의 <strong>Multitenancy</strong>를 지원 하는 <strong>Airflow</strong> 클러스터 개발 지원 업무를 수행 함에 있어서도 큰 도움이 되었고, <strong>Amazon Deequ, Great Expectation</strong> 등의 <strong>Data Quality</strong> 툴의 적용을 통해, <strong>다른 컴포넌트</strong>에서 데이터를 신뢰 할 수 있도록 <strong>PoC</strong>를 수행 하는 데도 도움이 되었습니다.</p>\n<p>방금 위에서 이야기 한 <strong>Data Quality Tool</strong> 적용 후, 추후 <strong>DataHub</strong> 같은 <strong>Data Discovery Tool</strong>과의 연동을 통해, <strong>데이터 오염</strong> 발생 시 <strong>다른 컴포넌트와의 빠른 초동 대응</strong> 까지 이어 질 수 있을 것 같아요. 다음 년도에는 <strong>Helm, Iceberg</strong> 안해본 것들에 대해서도 끊임 없이 학습하고, 회사 합병에 따른 요구 사항의 끊임 없는 변화를 대비 하기 위해서, <strong>클린 코드</strong>, <strong>디자인 패턴</strong> 등의 공부 또한 해나가야 겠어요.</p>\n<h3>Problems (아쉬웠던 것)</h3>\n<h4>Communication</h4>\n<p>분명, 입사 면접 시에는 <strong>커뮤니케이션이 강점</strong>이라고 어필을 했던 것 같은데. 놀랍게도 제가 이번 년도에 직장을 다니면서 느꼈던 저의 단점은 <strong>커뮤니케이션</strong>이었습니다. 물론 <strong>빠른 대응, 빠른 조치</strong>에 대해서는 칭찬을 받았습니다. 하지만, 업무가 처음이어서 그랬는지, <strong>정확한 의사 전달</strong>에 있어 어려움을 겪었습니다. 이는 여러 가지 요인이 있을 것으로 판단 되는데요, <strong>업무 미숙</strong>이 원인 일 수도 있고, <strong>자신감이 없어서</strong> 일 수도 있고 (같이 일하시는 분들이 저와 기본 10살 차이 이상의 시니어 개발자 분들이라서...), 혹은 <strong>상황 판단</strong>의 부족 또한 이유가 될 수 있겠군요. 글쎄요, 학생 때는 저 스스로, 왜 <strong>커뮤니케이션을 강점</strong>으로 뽑았는지 생각 해 보면, <strong>남들 보다 더 많은 경험, 자신감</strong>을 꼽았던 것 같아요. 팀원들의 <strong>상황에 대한</strong> 판단을 기반으로 항상 의사 결정을 수행 해 왔고요. 결론적으로 다른 사람들보다 <strong>부족한 경험</strong>이 문제였던 것으로 귀결 될 수 있겠네요.</p>\n<p>또, 말을 <strong>너무 장황</strong>하게 한다는 것이 단점이에요. 사실 다른 사람들이 필요로 하는 말은 그 중의 일부 였을 텐데 말이에요. 남들에게 <strong>상황 설명</strong>과 동시에 <strong>결정 한 사항</strong>에 대해 구분 없이 섞어서 전달 하는 것이 문제였습니다. 전달하는 말이 <strong>구조화</strong>가 되어 있지 않은 채로 <strong>남이 편한 의사소통</strong>이 아닌, 그냥 생각 난 대로 말하는 <strong>내가 편한 의사소통</strong>을 하고 있더라고요. (이는 뭔가 제 글에서도 나타나는 특성인 것 같아요.) 많은 것을 빠르게 전달 하려는 욕심 때문에 <strong>트랜잭션</strong> 없이 말을 전송(?) 하는 문제가 있었네요. 직업병이야 이것도.</p>\n<p align=\"center\">\n    <img src=\"/post_image/retrospect/2023-3.jpeg\" style=\"width:30%;max-width:280px;\"/>\n    <div align=\"center\" color=\"#aaaaaa\">그냥 개발자 ver 박찬호였습니다.</div>\n</p>\n<h4>Decision</h4>\n<p>또 다른 문제는 저의 <strong>의사 결정 과정</strong> 이었습니다. 이 또한, <strong>경험 부족이 원인</strong>으로 추정 되긴 하지만, 위 문단에서 이야기 했던 것과 비슷하게, 생각의 <strong>구조화</strong>가 이뤄지지 않았기 때문에, 나중에는 <strong>\"내가 왜 이것을 선택 했더라?\", \"이것을 무슨 목적으로 하고 있었지?\"</strong> 와 같은 질문부터 다시 하고 있는 경우가 많았습니다. 제 머리 속에서도, <strong>새로운 의견을 전개</strong> 하는 것에만 집중하고, 생각을 <strong>정리</strong> 하는 것을 소홀히 하는 경우가 꽤나 많았습니다. 만약 이런 질문에 답을 못한 채로 회의에 들어 갔다면, 당연하게도 남을 설득하지 못하거나, <strong>의도와 다르게 내용을 전달</strong>하여 혼돈을 주겠죠. 어찌어찌 의견이 전달은 되긴 하는 경우가 많았지만, 중간에서 제 의견을 정리해서 다시 한 번 이야기 해 주는 분들이 있었기 때문에 가능 했어요. 이런 점에서 회의의 맥을 끊어 버린 것이 몇 번씩 있던 것 같아, 파트원 분들에게도 좀 미안한 적도 많았습니다.</p>\n<h4>Lack of Critical Thinking</h4>\n<p>제 개인적으로 판단한 저는 <strong>비판적 사고</strong>가 부족 했던 것도 문제 였습니다. 아니, <strong>비판적 사고</strong>가 부족 하기 보단, <strong>누군가에게 싫은 소리</strong>를 하는 것을 무서워 했을 지 모르겠습니다. (남의 코드에도 공감을 해버리는 ENFJ 개발자 입니다.) 사실 적절한 비판은, <strong>팀을 건설적인 길</strong>로 가기 위한 길인데 말이에요. 의견을 물어보면 내가 한켠으로는 시원 찮은 경우에도, \"네! 좋아요\"를 쉽게 해버리는 사람이 되어 있었습니다.</p>\n<p>또한, 잘 보이겠다는 욕심 때문에, <strong>나의 무지를 드러 내는 것에 대한 두려움</strong>도 한 켠에 있었을 수도 있습니다. 특정 코드나 아키텍처가 잘못 됐다고 생각 했는데, 알고 보니 내가 낸 의견이 완벽하게 틀린 내용 이라면 너무 부끄럽잖아요? 그 이유인지, 질문을 초반기에 너무 안해서, 리드님이 걱정까지 했다는 후일담이 있었습니다. 사실 <strong>나의 무지를 드러내야 새롭게 배우는 것</strong>도 많을 것인데요.</p>\n<p align=\"center\">\n    <img src=\"/post_image/retrospect/2023-4.png\" style=\"width:80%;max-width:540px;\"/>\n    <div align=\"center\" color=\"#aaaaaa\">내 코드, 우리 새끼. (출처: 데브경수)</div>\n</p>\n<p align=\"center\">\n    <img src=\"/post_image/retrospect/2023-5.png\" style=\"width:80%;max-width:540px;\"/>\n    <div align=\"center\" color=\"#aaaaaa\">이렇게라도 하지 그랬어. (출처: 데브경수)</div>\n</p>\n<h3>Try (해 보아야 할 것)</h3>\n<h4>Take a little time</h4>\n<p>저에게 필요한 것은 급한 마음, 잘 보이려는 마음 보다는 <strong>차분함과 숨을 고르는 습관</strong>이 필요 하지 않을까 싶습니다. <strong>의사 소통</strong>이던, <strong>의사 결정</strong>이던, 제가 이러한 부분들에서 문제들을 겪었던 분명 한 이유는 <strong>머리 속에서 생각 나는 대로 바로 판단하고 행동</strong>한 것이 문제였거든요. 빠른 행동이 필요 할 때도 있지만, <strong>내가 하는 판단으로 팀의 업무 방향성이 달라지는 문제</strong>라면 <strong>빠른 판단</strong>의 중요성 보단, <strong>신중한 판단</strong>의 중요성이 더 높을 것입니다. 많은 것들을 경험 하면서, 어떤 상황에서는 <strong>빠른 판단</strong>이 중요한지, 어떤 상황에서는 <strong>신중한 판단</strong>이 더 중요한지 생각 하고, 신중한 판단이 더 중요 하다면 천천히 대답을 하거나, 판단을 유보 하는 등, <strong>판단을 위한 판단</strong>을 잘 하는 것이 내년의 <strong>Action Item</strong>으로 결정 한 내용 입니다.</p>\n<h4>Back to Basic</h4>\n<p>제가 <strong>비판적으로 의견을 제시 하지 못한 이유, 의사 결정이 아쉬운 이유</strong>는 <strong>기초가 부족한 이유</strong>가 있을 것 같습니다. 이는 CS적인 지식 보다는, 아마 Data Engineering에서 사용 하는 <strong>Open Source의 사용 경험이 적은 것</strong>이 이유가 될 것 같아요. 여러 가지 Case를 경험 하지 못한 것 때문에, <strong>국소적으로 제가 모자란 것들을 파악을 못하거나, 이를 몰라서 잘못 판단</strong>하는 경우인 거죠. 더 쉽게 갈 수 있는 방향이 있는데, Open Source 내의 특정 Feature를 모르는 이유로 꾸역꾸역 다른 Feature를 이용 해서, <strong>빡구현</strong>을 한다던지 말이에요. 아마 이건 제가 Document를 꼼꼼히 보는 성향 보다는, '<strong>일단 해보자!</strong>' 하고 행동에 옮기는 경우가 훨씬 많음이 이유라고 생각 합니다. 기존에 사용 중인 Open Source의 <strong>Basic Concepts</strong>부터 다시 꼼꼼히 공부해서, 돌아가는 판단을 하지 않도록 하는 것, <strong>다시 기초로 돌아가는 것</strong>이 내년의 두 번째 <strong>Action Item</strong>입니다.</p>\n<h4>Stay Hungry</h4>\n<p>제 장점을 더 정진하기 위해서, 또는 비판적인 사고를 기르기 위해서 저에게 중요 한 것은, <strong>더 좋은 최선</strong>을 찾을 수 있도록 <strong>항상 배고파 하는 것</strong> 입니다. 저는 제가 항상 더 좋은 것을 갈망하는 성격이라고 생각 했는데요, 올해 취업을 하면서 의욕이 살짝 빠졌는지 예전 만큼은 아닌 것 같습니다. 사수 한 분의 팀 이동, 회사 합병 관련 업무 대비, 이제는 없는 1년차 딱지(?) 등 <strong>내년은 올해와는 또 다른 마음 가짐</strong>으로 시작 해야 하지 않을까 싶어요. 1년 차에 비해서 더 많은 책임도 저한테 주어질 예정이고요. 더 나은 제가 될 수 있도록, <strong>기술적으로든, 기술 외적으로든 개발자 혹은 사람으로 성장하기 위해 계속 배고파 하는 마음 가짐</strong>으로 내년을 맞이 하는 것, 이것이 저의 세 번째 <strong>Action Item</strong> 입니다.</p>\n<h3>마치며</h3>\n<p>개인적으로 괄목 할 만한 무언가를 이룬 한 해는 아니었어요. 그 점에서는 아쉽지만, 사회인이 된 첫 해에, 어떤 방향으로 내가 걸어야 하는지, 어떤 보법으로 걸어야 하는지를 깨달은 한 해 였습니다. 리드님이랑 회식 후 지하철을 같이 타면서 나누었던 이야기가 생각나네요.</p>\n<blockquote>\n<p>개발자로든, 개인의 삶으로든 20대에 생각을 많이 해보는게 좋다. 추후에는 관성에 몸을 맡기기 때문에, 어떤 삶을 살지 지금 생각 하는게 제일 좋다.</p>\n</blockquote>\n<p>지금은 힘을 키우는 것보단, <strong>방향을 잡는 것이 더 중요한 시기</strong>라고 생각해요. 후회 하지 않을 정도로 많은 경험을 해보면서, 좋은 방향을 찾고 꾸준히 걸어가는 것을 올해 이후의 목표로 잡으려고 합니다.</p>\n<p>그래도 나름 올해 팀원 분들에게 좋은 평가를 받아, 제가 일하는 광고 조직 내의 <strong>동료상</strong>도 받게 되었어요. 더 열심히 하라는 뜻으로 생각하고, 내년에는 지금보다 조금 더 헌신적으로 <strong>좋음</strong>을 퍼트리며 일하는 제가 되고자 합니다. 저는 아직 까지는 <strong>좋음은 전염된다</strong>고 믿거든요. 이제 곧 크리스마스와 새해 입니다. 행복한 연말 보내세요!</p>\n<p>긴 글 읽어 주신 모든 분들에게 감사드립니다 :)</p>","id":"e46743f9-8a4c-5573-9ff5-b8e1b50ff808","frontmatter":{"date":"2023-12-21","path":"/etc/2023-retrospect","title":"1년차 Data Engineer의 회고","tags":["etc","Data-Engineering"],"keyword":"개발자 회고, 회고, 2023년, 데이터 엔지니어링","summary":"2023년을 되돌아 봅니다.","img":"/post_image/2023-retrospect.jpeg","series":null}}},"pageContext":{"postPath":"/etc/2023-retrospect","series":{"data":{"allMarkdownRemark":{"edges":[]}}},"categoryPosts":{"data":{"allMarkdownRemark":{"edges":[{"node":{"id":"7147dfc9-03ff-5d3b-a91e-4d8aeceec08c","excerpt":"머릿말 안녕하세요? 박민재입니다. 이번 포스팅은 제가 활동하고 있는 개발자 커뮤니티인 글또에서 Udemy 강의를 무료로 지원받아 작성하는 후기글을 올리고자 합니다. 지원 받은 강의는 DevOps (데브옵스) : Kubernetes 완전 정복입니다. 당시 회사에서 K8S 관련 Task를 하고 있었기 때문에, Kubernetes…","frontmatter":{"date":"2024-04-21","tags":["etc"],"path":"/etc/udemy-k8s-review","title":"[Udemy X 글또] | DevOps (데브옵스) : Kubernetes 완전 정복 리뷰","img":"/post_image/thumbnail/udemy-k8s-review.png","summary":"뒤늦은 강의 리뷰를 올려 봅니다."}}},{"node":{"id":"1d03cd6b-f9e8-55b7-8675-d8603f32cc71","excerpt":"머릿말 주의: 해당 게시글은 회사에서 Spark 등을 사용하여, Batch Job 개발을 주로 수행하고, 타 개발자에게 Data Platform 등을 제공하는 Data Engineer인 저의 상황이 반영된 게시글입니다. 다른 도메인, 다른 기술을 사용하는 Data Engineer 분들에게는 조금 다른 내용일 수도 있습니다. 안녕하세요? 박민재입니다. 오늘은 저의 개인적인 사견이 듬뿍 담긴, 이제…","frontmatter":{"date":"2024-02-04","tags":["etc"],"path":"/etc/surviving-as-a-data-engineer","title":"Data Engineer로 성과를 내려면 뭘 해야할까..?","img":"/post_image/thumbnail/surviving-as-a-data-engineer.jpeg","summary":"저의 개인적인 사견을 듬뿍 담았습니다."}}},{"node":{"id":"e46743f9-8a4c-5573-9ff5-b8e1b50ff808","excerpt":"머릿말 안녕하세요? JustKode, 박민재 입니다. 이 글을 쓰는 지금, Data Engineer로 LINE Plus에 입사한지 벌써 만으로 1년이 다 되어 가네요. 올해 1월에 입사 했으니까요. 첫 사회 생활, 첫 회사에서 (첫 인턴, 첫 회사가 LINE Plus…","frontmatter":{"date":"2023-12-21","tags":["etc","Data-Engineering"],"path":"/etc/2023-retrospect","title":"1년차 Data Engineer의 회고","img":"/post_image/2023-retrospect.jpeg","summary":"2023년을 되돌아 봅니다."}}},{"node":{"id":"629563f1-d098-5752-87a9-252240207fb1","excerpt":"오랜만입니다! 안녕하세요! JustKode 입니다. 전에도  +  를 이용해서 블로그를 만들었었지만,  인스턴스 유지 비용이 현실적으로 학생 (현재는 군인)에게는 약간 부담이 되는 가격이더라고요.. 그래서 정적 페이지로 블로그를 다시 만들어 보자! 하게 되었고, 한 달 동안 시간 날 때마다 사이버지식정보방에 박혀서 열심히 만들었습니다. :D Used Framework React.js Gatsby.js TypeScript Code…","frontmatter":{"date":"2020-03-20","tags":["etc"],"path":"/etc/blog-open","title":"JustKode Blog 오픈!","img":"https://images-na.ssl-images-amazon.com/images/I/51RAI%2BrOTtL._AC_SX466_.jpg","summary":"오랜만입니다!"}}}]}}}}},"staticQueryHashes":["3819017183","63159454"],"slicesMap":{}}