{"componentChunkName":"component---src-layouts-post-layout-tsx","path":"/java/cpp-to-java-5","result":{"data":{"markdownRemark":{"html":"<h2>Exceptions</h2>\n<p>우리는 사용자의 프로그램 오작동이든, 시스템 내부의 예기치 못한 오류든 많은 경우의 예외 사항을 어플리케이션을 운영 하면서 맞게 됩니다. 그러므로 우리는 <strong>예외 처리</strong>에 대해서 알 필요가 있습니다.</p>\n<p>예를 들어 보겠습니다. 만약 <strong>계산기</strong> 프로그램을 만든다고 가정 하였을 때, 사용자가 어떤 수를 <strong>0으로</strong> 나누려고 한다면 에러가 발생 할 것 입니다. 다음과 같이 말이죠.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> c <span class=\"token operator\">=</span> <span class=\"token number\">5</span> <span class=\"token operator\">/</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"terminal\"><pre class=\"language-terminal\"><code class=\"language-terminal\">Exception in thread &quot;main&quot; java.lang.ArithmeticException: / by zero\n\tat Main.main(Main.java:3)</code></pre></div>\n<p>위 에러를 잘 읽어보면, <code class=\"language-text\">java.lang.ArithmeticException</code> 이 발생 했다는 것을 알 수 있습니다. 우리는 <strong>C++</strong>에서 예외 처리를 위해서 <code class=\"language-text\">try</code>, <code class=\"language-text\">catch</code> 를 사용 한 것을 알고 있습니다. <strong>Java</strong>도 마찬 가지로, <code class=\"language-text\">try</code>, <code class=\"language-text\">catch</code> 문을 이용하여 예외 처리를 할 수 있습니다. 다음과 같이 말이죠.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span> c <span class=\"token operator\">=</span> <span class=\"token number\">5</span> <span class=\"token operator\">/</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ArithmeticException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"0으로 나눌 수 없습니다.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"terminal\"><pre class=\"language-terminal\"><code class=\"language-terminal\">0으로 나눌 수 없습니다.</code></pre></div>\n<p>우리는 위와 같이 <code class=\"language-text\">try</code> 블럭에 예외처리를 시행 할 코드를 삽입 하고, <code class=\"language-text\">catch</code> 문에 예외가 발생할 것으로 <strong>예상 되는</strong> <code class=\"language-text\">Exception</code> 클래스를 <code class=\"language-text\">catch</code> 문에 넣으면 됩니다. 그런데 우리가 예상치 못한 <code class=\"language-text\">Exception</code> 클래스가 <code class=\"language-text\">throw</code> (발생) 하면, 우리는 어떻게 해야 할 까요? 우리가 <strong>C++</strong>에서 배웠듯, <code class=\"language-text\">Exception</code> 클래스들은 <code class=\"language-text\">Exception</code> 이라는 클래스를 <strong>상속 받은 클래스</strong> 입니다. 그러므로, 우리는 전에 배웠던, 클래스의 <strong>다형성</strong>을 이용하여, 다양한 타입의, 예상치 못했던 <code class=\"language-text\">Exception</code>들을 일괄 처리 할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ArithmeticException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"0으로 나눌 수 없습니다.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"알 수 없는 에러가 발생 했습니다.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"terminal\"><pre class=\"language-terminal\"><code class=\"language-terminal\">java.lang.ArrayIndexOutOfBoundsException\n알 수 없는 에러가 발생 했습니다.</code></pre></div>\n<h2>Finally</h2>\n<p>예외가 처리 되든, 처리가 되지 않든 꼭 실행을 원하는 <strong>코드 블럭</strong>이 있을 수 있습니다. 그럴 때는 <code class=\"language-text\">finally</code> 블럭을 이용하여, 해당 블럭을 무조건 실행 하게 할 수 있습니다. 이 문구는, <code class=\"language-text\">try</code> 문에서 <code class=\"language-text\">return</code>이 되더라도, 무조건 실행 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ArithmeticException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"0으로 나눌 수 없습니다.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"알 수 없는 에러가 발생 했습니다.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Finally 구문 실행.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"terminal\"><pre class=\"language-terminal\"><code class=\"language-terminal\">Finally 구문 실행.</code></pre></div>\n<h2>printStackTrace(), getMessage()</h2>\n<p>우리는 <code class=\"language-text\">Exception</code> 클래스에 있는 <code class=\"language-text\">printStackTrace()</code>와 <code class=\"language-text\">getMessage()</code>를 통해 예외 처리가 일어 나게 된 과정과, 메시지를 확인 할 수 있습니다.</p>\n<ul>\n<li><code class=\"language-text\">printStackTrace()</code>: 예외 발생 시점에 호출 스택에 있었던 메서드들의 정보 및 예외 메시지를 화면에 출력합니다.</li>\n<li><code class=\"language-text\">getMessage()</code>: 발생한 <code class=\"language-text\">Exception</code> 클래스의 인스턴스에 저장된 메시지를 얻을 수 있습니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Exception</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"에러가 났지롱\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"terminal\"><pre class=\"language-terminal\"><code class=\"language-terminal\">java.lang.Exception: 에러가 났지롱\n\tat Main.main(Main.java:4)\n에러가 났지롱</code></pre></div>\n<h2>Exception &#x26; RuntimeException</h2>\n<p>우리는 <strong>C++</strong>에서 했던 것 처럼, <code class=\"language-text\">Exception</code>을 상속 받은, 다른 <strong>예외 클래스</strong>를 만들 수 있습니다. 하지만, 우리는 용도에 따라서, 다른 <code class=\"language-text\">Exception</code>을 상속 해야 합니다.</p>\n<ul>\n<li><code class=\"language-text\">Exception</code>: 사용자의 실수와 같은 외적인 요인으로 발생 하는 예외, <strong>컴파일 시점</strong>에서 예측 가능한 예외들이 이에 속합니다. (예: <code class=\"language-text\">IOException</code>, <code class=\"language-text\">ClassNotFoundException</code>)</li>\n<li><code class=\"language-text\">RuntimeException</code>: 프로그래머의 실수로 발생하는 예외 상황, <strong>논리적 오류</strong>에 속하는 예외들이 이에 속합니다. (예: <code class=\"language-text\">ArithmeticException</code>, <code class=\"language-text\">ClassCastException</code>)</li>\n</ul>\n<p>구조는 <code class=\"language-text\">RuntimeException</code>이 <code class=\"language-text\">Exception</code>을 상속 받은 구조 입니다.</p>\n<p align=\"center\">\n\t<img src=\"/post_image/cpp-to-java/05-02.png\" width=\"40%\"/>\n\t<p align=\"center\" style=\"color:#888888; font-size: 12px;\">\n\t\t출처: https://commons.wikimedia.org/wiki/File:Java_exception_classes.svg\n\t</p>\n</p>\n<p>우리는 <code class=\"language-text\">Exception</code>을 상속 받아서 또 다른 <code class=\"language-text\">Exception</code> 클래스를 만들고, 사용자에게 원치 않는 예외 입력를 받았을 때, <code class=\"language-text\">Exception</code>을 <code class=\"language-text\">throw</code> 할 수 있습니다. <strong>생성자</strong>에서 <code class=\"language-text\">super()</code>를 이용하여, <code class=\"language-text\">Exception</code> 클래스의 <strong>생성자</strong>를 호출, 메시지를 생성 할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">NoneInputException</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">NoneInputException</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">Scanner</span> scanner <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"아무거나 입력 후, Enter를 눌러 주세요: \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token class-name\">String</span> s <span class=\"token operator\">=</span> scanner<span class=\"token punctuation\">.</span><span class=\"token function\">nextLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NoneInputException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"아무 것도 없지롱\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"terminal\"><pre class=\"language-terminal\"><code class=\"language-terminal\">아무거나 입력 후, Enter를 눌러 주세요: \n아무 것도 없지롱\nNoneInputException: 아무 것도 없지롱\n\tat Main.main(Main.java:18)</code></pre></div>\n<h2>try-with-resource</h2>\n<p><strong>JDK1.7</strong> 이상부터 지원하는 기능입니다. <code class=\"language-text\">try</code> 문 옆에 괄호로 <code class=\"language-text\">close()</code> 가 필요한 <strong>스트림 클래스</strong> 같은 경우에, <code class=\"language-text\">try-catch</code> 문이 끝나면, <strong>스트림</strong>을 자동으로 닫아주는 기능을 수행 합니다.</p>\n<blockquote>\n<p>test.txt</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"terminal\"><pre class=\"language-terminal\"><code class=\"language-terminal\">1\n2\n3\n4\n5</code></pre></div>\n<blockquote>\n<p>Main.java</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">FileReader</span> fr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileReader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">int</span> temp <span class=\"token operator\">=</span> fr<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>temp <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">EOFException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">)</span>temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">FileNotFoundException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"파일이 없습니다.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">EOFException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n읽기 끝!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> ie<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            ie<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"terminal\"><pre class=\"language-terminal\"><code class=\"language-terminal\">1\n2\n3\n4\n5\n읽기 끝!</code></pre></div>\n<h2>throws</h2>\n<p>함수에 <code class=\"language-text\">throws</code> 문을 입력하여, 특정 예외 클래스가 나올 것이라고 타입을 지정 해 줄 수 있습니다. 이렇게 <strong>예외 타입</strong>을 지정을 하게 되면 다음과 같은 이점을 얻을 수 있습니다.</p>\n<ol>\n<li><code class=\"language-text\">throw</code> 되지 않는 예외 타입을 <code class=\"language-text\">catch</code> 하려는 경우에 컴파일 에러를 발생 시킵니다. </li>\n<li><code class=\"language-text\">throws</code>로 예외 타입이 지정된 해당 함수가 <code class=\"language-text\">try</code>, <code class=\"language-text\">catch</code> 문 안에 없는 경우 에러를 발생 시킵니다. 즉, <strong>무조건 예외 처리</strong> 하게 끔 만들 수 있습니다.</li>\n<li>함수 내에서 발생한 <strong>예외</strong>들을 함수를 사용하는 곳으로 <strong>예외에 대한 책임을 전가</strong> 할 수 있습니다. (그래서 2번 항목이 충족이 되어야 합니다.)</li>\n<li>협업 시 명시적으로 <code class=\"language-text\">throw</code> 해줘야 하는 에러를 알려주어, 의사소통을 원활하게 할 수 있습니다.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">someThingForThrow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">NullPointerException</span> ne<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            ne<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ArithmeticException</span> ae<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            ae<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">someThingForThrow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">NullPointerException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ArithmeticException</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">double</span> temp <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>temp <span class=\"token operator\">>=</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NullPointerException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArithmeticException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"terminal\"><pre class=\"language-terminal\"><code class=\"language-terminal\">java.lang.ArithmeticException\n\tat Main.someThingForThrow(Main.java:17)\n\tat Main.main(Main.java:4)</code></pre></div>\n<h2>마치며</h2>\n<p>다음 시간에는 기본 <code class=\"language-text\">import</code> 되는 클래스인 <code class=\"language-text\">java.lang</code> 패키지에 대해서 공부 해 보는 시간을 가져 보도록 하겠습니다.</p>","id":"b0131649-a240-5030-aea6-27074d8af80b","frontmatter":{"date":"2022-01-11","path":"/java/cpp-to-java-5","title":"[C++ to Java] 5. 예외 처리","tags":["Java"],"keyword":"Java, c++ to java, java exception, java try catch, java 예외처리, 자바 예외처리","summary":"Java의 예외 처리에 대해 알아보자.","img":"/post_image/cpp-to-java/05-01.jpeg","series":"C++ to Java"}}},"pageContext":{"series":{"data":{"allMarkdownRemark":{"edges":[{"node":{"id":"886bb640-121c-554c-8c28-e85a7dab0c3b","excerpt":"Java Stream…","frontmatter":{"date":"2022-01-31","tags":["Java"],"path":"/java/cpp-to-java-10","title":"[C++ to Java] 10. Stream","img":"/post_image/cpp-to-java/10-01.jpeg","summary":"Java Stream에 대해 알아보자."}}},{"node":{"id":"c638b5a0-5e6a-5704-9719-94f403af34f1","excerpt":"Generic, Enum, Lambda 안녕하세요? 오늘은 중요하지만, 한 번에 다루기에 애매했던 토픽들에 대해서 배워 보고자 합니다. Generic Generic은 C++ 에서의 Template와 같은 역할을 합니다. 타입 변수를 받아, 이에 맞는 지네릭 클래스를 만들 수 있습니다. 문법은 C…","frontmatter":{"date":"2022-01-26","tags":["Java"],"path":"/java/cpp-to-java-9","title":"[C++ to Java] 9. Generic, Enum, Lambda","img":"/post_image/cpp-to-java/09-01.jpeg","summary":"여태 다루지 못한 것들에 대해 한번 다뤄보자."}}},{"node":{"id":"8224a040-7a4f-5a02-b882-7d6fc6874047","excerpt":"Java Collections 안녕하세요? JustKode 입니다. 우리는 프로그래밍을 하며, 동일한 규격을 가진 수 많은 데이터를 다루는 경우가 있습니다. 그럴 때 우리는 배열을 주로 사용 합니다. 하지만, 자료 구조를 배웠다면 알겠지만, 배열로는 수 많은 데이터를 다루기에는 부족하다는 것을 알 수 있습니다. Java에서는 자료들을 쉽게 관리 하기 위해 제공하는 패키지,  가 있습니다. 대표적으로 3가지 Interface로 나뉩니다. List…","frontmatter":{"date":"2022-01-23","tags":["Java"],"path":"/java/cpp-to-java-8","title":"[C++ to Java] 8. Collections","img":"/post_image/cpp-to-java/08-01.jpeg","summary":"Java Collections에 대해 알아보자."}}},{"node":{"id":"1787bcf7-9a6e-52cd-bee1-ed50be42f565","excerpt":"Thread Thread는 운영체제에서, 프로세스 실행 단위를 일컫습니다. 하나의 프로세스가 한 개 이상의 쓰레드를 가지며, 다수의 Thread…","frontmatter":{"date":"2022-01-20","tags":["Java"],"path":"/java/cpp-to-java-7","title":"[C++ to Java] 7. Thread 기초","img":"/post_image/cpp-to-java/07-01.jpeg","summary":"Java Thread 기초에 대해 알아보자."}}},{"node":{"id":"72344018-a67c-56e7-9d0d-9d1fa56ac234","excerpt":"Java의 기존 패키지들 안녕하세요? JustKode 입니다. 오늘은 Java의 기본 패키지들에 대해서 알아보는 시간을 가져 보겠습니다. 기본으로  되어 있는  부터 시작해서,  에 있는 패키지까지 알아 보도록 하겠습니다. java.lang.Object 는 Java내에서 모든 Class…","frontmatter":{"date":"2022-01-15","tags":["Java"],"path":"/java/cpp-to-java-6","title":"[C++ to Java] 6. Java.lang 패키지 & 유용한 클래스","img":"/post_image/cpp-to-java/06-01.jpeg","summary":"Java 기본 패키지들에 대해 알아보자."}}},{"node":{"id":"b0131649-a240-5030-aea6-27074d8af80b","excerpt":"Exceptions 우리는 사용자의 프로그램 오작동이든, 시스템 내부의 예기치 못한 오류든 많은 경우의 예외 사항을 어플리케이션을 운영 하면서 맞게 됩니다. 그러므로 우리는 예외 처리에 대해서 알 필요가 있습니다. 예를 들어 보겠습니다. 만약 계산기 프로그램을 만든다고 가정 하였을 때, 사용자가 어떤 수를…","frontmatter":{"date":"2022-01-11","tags":["Java"],"path":"/java/cpp-to-java-5","title":"[C++ to Java] 5. 예외 처리","img":"/post_image/cpp-to-java/05-01.jpeg","summary":"Java의 예외 처리에 대해 알아보자."}}},{"node":{"id":"754c5ad9-0338-5c4f-aaaa-3dedbc23c6e2","excerpt":"Package, Import 안녕하세요? Justkode 입니다. 오늘은 Package와 이를 Import 하는 것에 대해 알아 보겠습니다. Package…","frontmatter":{"date":"2022-01-05","tags":["Java"],"path":"/java/cpp-to-java-4","title":"[C++ to Java] 4. Package와 Import","img":"/post_image/cpp-to-java/04-01.png","summary":"패키지와 임포트에 대해 알아보자."}}},{"node":{"id":"0024c64f-f35e-5531-a3ba-adc280de2813","excerpt":"Inheritance, Polymorphism 안녕하세요? Justkode 입니다. 오늘은 상속, 다형성, 인터페이스에 대해서 알아 보는 시간을 가져 보도록 하겠습니다. 상속 (Inheritance…","frontmatter":{"date":"2021-12-25","tags":["Java"],"path":"/java/cpp-to-java-3","title":"[C++ to Java] 3. 상속, 다형성, 인터페이스","img":"/post_image/cpp-to-java/03-01.jpg","summary":"Java에서의 상속, 다형성에 대해 알아 보자."}}},{"node":{"id":"6861ec31-c681-53af-a75b-dd7da4cf707c","excerpt":"OOP in Java 안녕하세요! JustKode 입니다. 사실 제목까지 이렇게 분리 하고, 이렇게 이야기 하기도 뭐한게, Java는 Object-Oriented Programming을 위해 태어난 언어이고, 안에서 OOP를 하는 것은 당연한 이야기 이기 때문입니다. 우리는 이번 시간에 Java의 OOP에 대해, C++과 비교하여 제대로 짚고 넘어 가고자 합니다. Pass by Value, Pass by Reference 일단, C…","frontmatter":{"date":"2021-12-23","tags":["Java"],"path":"/java/cpp-to-java-2","title":"[C++ to Java] 2. Object-Oriented Programming","img":"/post_image/cpp-to-java/02-01.png","summary":"Java에서의 OOP에 대해 알아보자."}}},{"node":{"id":"e1b89ed7-138a-5e78-b43c-51be401aed68","excerpt":"Hello World! 안녕하세요! JustKode 입니다. 오늘은  패키지에 있는 System Class에 대해서 알아 보겠습니다. 일단  패키지에 대해서 설명 드리자면, Java 프로그래밍에 사용 되는 가장 기본적인 Class들을 모아놓은 패키지로, 를 하지 않아도 사용 가능 합니다. System Class는 JVM을 거쳐 운영체제의 일부 기능을 사용 할 수 있도록 도와주는 클래스입니다. 또한, System Class…","frontmatter":{"date":"2021-12-22","tags":["Java"],"path":"/java/cpp-to-java-1","title":"[C++ to Java] 1. System Class","img":"/post_image/cpp-to-java/01-01.png","summary":"System Class에 대해 알아보자."}}},{"node":{"id":"3c1880a7-ded3-5495-be73-6bf25d2854bf","excerpt":"C++ to Java 안녕하세요! JustKode 입니다. 살다 보면, 아니 한국에서 개발자로 살다보면 생각 보다, Java를 해야 할 일이 많습니다. Android, Spring, Hadoop, Spark 등, 여러 곳에서 자바는 사용 됩니다. 대부분의 컴퓨터공학과 학생들은 학교 프로그래밍 기초 시간에, C/C++을 많이 배우게 됩니다. 저 같은 경우에도 1학년 때 C++로 프로그래밍을 시작 했습니다. C++ 과 Java…","frontmatter":{"date":"2021-12-15","tags":["Java"],"path":"/java/cpp-to-java-0","title":"[C++ to Java] 0. Orientation","img":"/post_image/cpp-to-java/00-01.jpg","summary":"어쩌다 java를 해야 하는 사람들을 위해"}}}]}}},"categoryPosts":{"data":{"allMarkdownRemark":{"edges":[{"node":{"id":"3f935429-1219-5489-9122-08b2890770e8","excerpt":"SOLID 원칙 SOLID 원칙은 객체지향 설계에서 지켜줘야 하는 5가지 원칙을 의미 합니다. 우리는 협업을 하면서, 많은 어려움을 봉착 합니다. 분명 기능 1개만 수정 한다고 특정 컴포넌트의 코드를 몇 가지 수정했는데, 이와 연관된 여러 개의 컴포넌트에서 오류를 뱉어 버리는 경우는 개발을 해보신 분들이라면 많이 경험해 봤을 것이라고 생각해요. SRP(Single Responsibility Principle…","frontmatter":{"date":"2022-02-14","tags":["Java"],"path":"/java/solid-pattern","title":"객체지향 개발의 5대 원리, SOLID","img":"/post_image/thumbnail/solid-pattern.jpeg","summary":"객체지향 개발의 5대 원리, SOLID에 대해 알아보자."}}},{"node":{"id":"886bb640-121c-554c-8c28-e85a7dab0c3b","excerpt":"Java Stream…","frontmatter":{"date":"2022-01-31","tags":["Java"],"path":"/java/cpp-to-java-10","title":"[C++ to Java] 10. Stream","img":"/post_image/cpp-to-java/10-01.jpeg","summary":"Java Stream에 대해 알아보자."}}},{"node":{"id":"c638b5a0-5e6a-5704-9719-94f403af34f1","excerpt":"Generic, Enum, Lambda 안녕하세요? 오늘은 중요하지만, 한 번에 다루기에 애매했던 토픽들에 대해서 배워 보고자 합니다. Generic Generic은 C++ 에서의 Template와 같은 역할을 합니다. 타입 변수를 받아, 이에 맞는 지네릭 클래스를 만들 수 있습니다. 문법은 C…","frontmatter":{"date":"2022-01-26","tags":["Java"],"path":"/java/cpp-to-java-9","title":"[C++ to Java] 9. Generic, Enum, Lambda","img":"/post_image/cpp-to-java/09-01.jpeg","summary":"여태 다루지 못한 것들에 대해 한번 다뤄보자."}}},{"node":{"id":"8224a040-7a4f-5a02-b882-7d6fc6874047","excerpt":"Java Collections 안녕하세요? JustKode 입니다. 우리는 프로그래밍을 하며, 동일한 규격을 가진 수 많은 데이터를 다루는 경우가 있습니다. 그럴 때 우리는 배열을 주로 사용 합니다. 하지만, 자료 구조를 배웠다면 알겠지만, 배열로는 수 많은 데이터를 다루기에는 부족하다는 것을 알 수 있습니다. Java에서는 자료들을 쉽게 관리 하기 위해 제공하는 패키지,  가 있습니다. 대표적으로 3가지 Interface로 나뉩니다. List…","frontmatter":{"date":"2022-01-23","tags":["Java"],"path":"/java/cpp-to-java-8","title":"[C++ to Java] 8. Collections","img":"/post_image/cpp-to-java/08-01.jpeg","summary":"Java Collections에 대해 알아보자."}}}]}}}}},"staticQueryHashes":["234633779","63159454"]}