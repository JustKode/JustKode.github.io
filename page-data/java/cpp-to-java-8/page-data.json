{"componentChunkName":"component---src-layouts-post-layout-tsx","path":"/java/cpp-to-java-8","result":{"data":{"markdownRemark":{"html":"<h2>Java Collections</h2>\n<p>안녕하세요? <strong>JustKode</strong> 입니다. 우리는 프로그래밍을 하며, 동일한 규격을 가진 수 많은 데이터를 다루는 경우가 있습니다. 그럴 때 우리는 <strong>배열</strong>을 주로 사용 합니다. 하지만, 자료 구조를 배웠다면 알겠지만, <strong>배열</strong>로는 수 많은 데이터를 다루기에는 부족하다는 것을 알 수 있습니다.</p>\n<p><strong>Java</strong>에서는 <strong>자료들을 쉽게 관리 하기 위해</strong> 제공하는 패키지, <code class=\"language-text\">Collections</code> 가 있습니다. 대표적으로 3가지 <strong>Interface</strong>로 나뉩니다.</p>\n<ul>\n<li><strong>List</strong>: 순서가 있는 데이터의 집합 입니다. 데이터의 중복을 허용합니다. 구현 클래스로는 <code class=\"language-text\">ArrayList</code>, <code class=\"language-text\">LinkedList</code>, <code class=\"language-text\">Stack</code>, <code class=\"language-text\">Vector</code> 가 있습니다. <strong>Python</strong>의 <code class=\"language-text\">list</code> 와 유사 합니다.</li>\n<li><strong>Set</strong>: 순서가 없으며, 중복을 허용 하지 않는 데이터의 집합 입니다. 구현 클래스로는 <code class=\"language-text\">HashSet</code>, <code class=\"language-text\">TreeSet</code> 이 있습니다. <strong>Python</strong>의 <code class=\"language-text\">set</code> 과 유사 합니다.</li>\n<li><strong>Map</strong>: 키, 값 쌍이 있는 데이터 집합 입니다. <strong>Python</strong>의 <code class=\"language-text\">dict</code> 와 유사 합니다.</li>\n</ul>\n<p>위 3가지 <strong>Interface</strong>중 <code class=\"language-text\">List</code>, <code class=\"language-text\">Set</code>은 <code class=\"language-text\">Collection</code> 이라는 <strong>Interface</strong>를 상속 받습니다.</p>\n<p align=\"center\">\n\t<img src=\"/post_image/cpp-to-java/08-03.png\" width=\"80%\"/>\n\t<p align=\"center\" style=\"color:#888888; font-size: 12px;\">\n\t\tCollection Interface\n\t</p>\n</p>\n<p><code class=\"language-text\">Collection</code> 인터페이스에서 구현을 요구하는 메서드들은 다음과 같습니다.</p>\n<ul>\n<li><code class=\"language-text\">boolean add(Object o)</code>, <code class=\"language-text\">boolean add(Collection c)</code>: <code class=\"language-text\">Object o</code> 혹은, <code class=\"language-text\">Collection c</code> 에 있는 모든 <code class=\"language-text\">Object</code>를 <code class=\"language-text\">Collection</code>에 저장 합니다. 성공 여부를 반환 합니다.</li>\n<li><code class=\"language-text\">void clear()</code>: <code class=\"language-text\">Collection</code> 내의 객체들을 모두 삭제 합니다.</li>\n<li><code class=\"language-text\">boolean contain(Object o), boolean containAll(Collection c)</code>: <code class=\"language-text\">Object o</code> 혹은, <code class=\"language-text\">Collection c</code> 에 있는 모든 <code class=\"language-text\">Object</code>가 <code class=\"language-text\">Collection</code>에 있는 지 확인 합니다.</li>\n<li><code class=\"language-text\">boolean equals(Collection c)</code>: <code class=\"language-text\">Collection c</code>와 <code class=\"language-text\">Collection</code>이 동일 한지 여부를 반환 합니다.</li>\n<li><code class=\"language-text\">int hashCode()</code>: <code class=\"language-text\">Collection</code>의 <code class=\"language-text\">hashCode</code>를 반환 합니다.</li>\n<li><code class=\"language-text\">boolean isEmpty()</code>: <code class=\"language-text\">Collection</code>이 비어 있는지를 확인 합니다.</li>\n<li><code class=\"language-text\">Iterator iterator()</code>: <code class=\"language-text\">Collection</code> 내의 객체들을 담고 있는 <code class=\"language-text\">Iterator</code> 객체를 반환 합니다.</li>\n<li><code class=\"language-text\">boolean remove(Object o)</code>: 해당 객체 <code class=\"language-text\">o</code> 와 일치 하는 객체를 제거 합니다.</li>\n<li><code class=\"language-text\">boolean removeAll(Collection c)</code>: <code class=\"language-text\">Collection c</code> 에 있는 모든 <code class=\"language-text\">Object</code>중 하나와 일치 하는 객체 모든 객체를 제거 합니다. 이 작업으로 무언가 지웠다면 <code class=\"language-text\">true</code>를 반환 합니다.</li>\n<li><code class=\"language-text\">boolean retainAll(Collection c)</code>: <code class=\"language-text\">Collection c</code> 에 있는 모든 <code class=\"language-text\">Object</code>중 하나와 일치 하는 객체를 제외한 모든 객체를 제거 합니다. 이 작업으로 무언가 지웠다면 <code class=\"language-text\">true</code>를 반환 합니다.</li>\n<li><code class=\"language-text\">int size()</code>: <code class=\"language-text\">Collection</code>에 저장된 객체의 갯수를 반환 합니다.</li>\n<li><code class=\"language-text\">Object[] toArray()</code>: <code class=\"language-text\">Collection</code>에 저장된 객체를 <code class=\"language-text\">Array</code>로 변환 합니다.</li>\n<li><code class=\"language-text\">Object[] toArray(Object[] a)</code>: <code class=\"language-text\">a</code> 에 <code class=\"language-text\">Collection</code> 내에 있는 객체를 저장 후 반환 합니다.</li>\n</ul>\n<p>여기서 이야기 하는 <code class=\"language-text\">Iterator</code> 객체는, 객체를 순회할 수 있는 객체로, 다음 객체가 있는지 반환 하는 <code class=\"language-text\">boolean hasNext()</code>, 다음 객체를 반환 하는 <code class=\"language-text\">Object next()</code> 가 있습니다.</p>\n<h3>List Interface</h3>\n<p><strong>List Interface</strong>를 이용한, 구현 클래스들의 상속 구조를 나타낸 그림입니다.</p>\n<p align=\"center\">\n\t<img src=\"/post_image/cpp-to-java/08-02.png\" width=\"80%\"/>\n    <p align=\"center\" style=\"color:#888888; font-size: 12px;\">\n\t\tList Interface\n\t</p>\n</p>\n<ul>\n<li><strong>Vector</strong>: 삽입은 시간이 걸리지만, 탐색이 빠른 <strong>Vector</strong> 자료 구조 입니다.</li>\n<li><strong>ArrayList</strong>: <strong>Vector</strong> 자료 구조를 개선 한 자료 구조로, <strong>Vector</strong>와 기능은 동일 합니다.</li>\n<li><strong>LinkedList</strong>: 삽입은 빠르지만, 탐색이 느린 <strong>LinkedList</strong> 자료 구조 입니다.</li>\n</ul>\n<p><strong>List Interface</strong>에 구현 된 메서드들은 다음과 같습니다.</p>\n<ul>\n<li><code class=\"language-text\">void add(int index, Object element)</code>: <code class=\"language-text\">index</code> 위치에 <code class=\"language-text\">element</code>를 객체를 추가 합니다.</li>\n<li><code class=\"language-text\">boolean addAll(int index, Collection c)</code>: <code class=\"language-text\">index</code> 위치에 <code class=\"language-text\">c</code> 내에 있는 객체 모두를 추가 합니다. 성공시 <code class=\"language-text\">true</code>를 반환 합니다.</li>\n<li><code class=\"language-text\">Object get(int index)</code>: 지정된 위치 <code class=\"language-text\">index</code>에 있는 객체를 반환 합니다.</li>\n<li><code class=\"language-text\">int indexOf(Object o)</code>: <code class=\"language-text\">o</code>가 저장된 위치를 반환 합니다. (처음부터 훑음)</li>\n<li><code class=\"language-text\">int lastIndexOf(Object o)</code>: <code class=\"language-text\">o</code>가 저장된 위치를 반환 합니다. (마지막부터 훑음)</li>\n<li><code class=\"language-text\">ListIterator listIterator()</code>, <code class=\"language-text\">ListIterator listIterator(int index)</code>: <code class=\"language-text\">List</code>의 객체에 접근 할 수 있는 <code class=\"language-text\">ListIterator</code>를 반환 합니다. <code class=\"language-text\">index</code> 가 있는 경우, <code class=\"language-text\">index</code> 위치 부터 반환 합니다.</li>\n<li><code class=\"language-text\">Object remove(int index)</code>: <code class=\"language-text\">index</code> 위치에 있는 객체를 제거 후 반환 합니다.</li>\n<li><code class=\"language-text\">Object set(int index, Object element)</code>: <code class=\"language-text\">index</code> 위치에 객체 <code class=\"language-text\">element</code>를 삽입 합니다.</li>\n<li><code class=\"language-text\">void sort(Comparator c)</code>: 지정된 비교자로 <code class=\"language-text\">List</code>를 정렬 합니다.</li>\n<li><code class=\"language-text\">List subList(int fromIndex, int toIndex)</code>: <code class=\"language-text\">List</code>의 <code class=\"language-text\">fromIndex</code> 부터 <code class=\"language-text\">toIndex</code> 까지 잘라서 반환 합니다.</li>\n</ul>\n<p>대표적으로 사용 하는 <strong>LinkedList</strong>를 사용 하여, <strong>List</strong> 인터페이스 구현체들을 사용 해 보겠습니다.</p>\n<p>일단 시작하기 전에, <strong>C++</strong>에서 배운 템플릿을 기억 하시나요? 우리가 이런 자료구조 구현체를 사용 할 때, <strong>STL</strong>을 사용 했던 것 처럼, <code class=\"language-text\">Collections</code> 패키지에 구현 된 클래스들은 <strong>템플릿 문법</strong>과 유사한, <strong>제너릭 문법을</strong>을 사용 합니다.</p>\n<p>예를 들어, <code class=\"language-text\">Box&lt;T&gt;</code>는 <strong>제너릭 클래스</strong>라고 불리고, 여기서 <code class=\"language-text\">T</code>는 <strong>타입 변수</strong>, <code class=\"language-text\">Box</code>는 <strong>원시 타입</strong>을 일컫습니다. 우리는 <strong>원시 타입</strong>을 갖는 특정 객체를 선언할 때, 사용하려는 의도에 맞게 <strong>타입 변수</strong>를 변경 해 주면 됩니다. 만약 우리가, <code class=\"language-text\">Integer</code>를 <code class=\"language-text\">Object</code>로 갖는 <code class=\"language-text\">ArrayList</code> 객체를 가지고 싶다고 가정하면, <code class=\"language-text\">ArrayList&lt;Integer&gt;</code> 이렇게 선언 하면 되는 것이죠. 한 번 해 볼까요?</p>\n<p>일단 <code class=\"language-text\">ArrayList</code>는 선언 시에 얼마만큼의 객체를 담을 공간을 만들어 놓을 것인지, <code class=\"language-text\">new ArrayList&lt;T&gt;(int size)</code>로 생성 할 때 작성할 수 있습니다.</p>\n<p>또한, <code class=\"language-text\">sort(Comparator c)</code>는, 저번에 이야기 한 <strong>익명 객체</strong>를 이용, 적절한 <code class=\"language-text\">Comparator&lt;T&gt;</code>를 삽입 하면 됩니다. 내부 <code class=\"language-text\">compare(Object o1, Object o2)</code>는 <strong>1, 0, -1</strong>을 반환 하도록 하면 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 초기화 및 아이템 삽입</span>\n        <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> arrayList1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        arrayList1<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        arrayList1<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        arrayList1<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> arrayList2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        arrayList2<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        arrayList2<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        arrayList2<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// Collection Interface에 구현 되어 있는 것</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1이 배열 내 존재 하는가?: \"</span> <span class=\"token operator\">+</span> arrayList1<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// true</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"두 ArrayList는 일치 하는가?: \"</span> <span class=\"token operator\">+</span> arrayList1<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>arrayList2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// true</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"arrayList1의 hashCode(): \"</span> <span class=\"token operator\">+</span> arrayList1<span class=\"token punctuation\">.</span><span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 30817</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"arrayList1의 길이는?: \"</span> <span class=\"token operator\">+</span> arrayList1<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 3</span>\n\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"뭘 하나라도 지웠는가?: \"</span> <span class=\"token operator\">+</span> arrayList2<span class=\"token punctuation\">.</span><span class=\"token function\">removeAll</span><span class=\"token punctuation\">(</span>arrayList1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// true</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"arrayList2는 비었는가?: \"</span> <span class=\"token operator\">+</span> arrayList2<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// true</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"arrayList1를 Array로 변환 하면?: \"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>arrayList1<span class=\"token punctuation\">.</span><span class=\"token function\">toArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// [1, 2, 3]</span>\n\n        <span class=\"token class-name\">Iterator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> iter <span class=\"token operator\">=</span> arrayList1<span class=\"token punctuation\">.</span><span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>iter<span class=\"token punctuation\">.</span><span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>iter<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"]\\n\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// [1, 2, 3,]</span>\n\n        <span class=\"token comment\">// List Interface에 구현 되어 있는 것</span>\n        arrayList1<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"arrayList1의 1번 인덱스에 3을 넣고 꺼내 보면?: \"</span> <span class=\"token operator\">+</span> arrayList1<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 3</span>\n        arrayList2<span class=\"token punctuation\">.</span><span class=\"token function\">addAll</span><span class=\"token punctuation\">(</span>arrayList1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"arrayList2에 arrayList1을 다 넣어 보면?: \"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>arrayList2<span class=\"token punctuation\">.</span><span class=\"token function\">toArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// [1, 3, 2, 3]</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"arrayList1에서 3이 있는 위치: \"</span> <span class=\"token operator\">+</span> arrayList1<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 1</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"arrayList1에서 3이 있는 위치: \"</span> <span class=\"token operator\">+</span> arrayList1<span class=\"token punctuation\">.</span><span class=\"token function\">lastIndexOf</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 3</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"인덱스 1에 있는 값을 지웠는가?: \"</span> <span class=\"token operator\">+</span> arrayList1<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 3</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"그럼 현재 인덱스 1의 값을 4로 바꾸면?: \"</span> <span class=\"token operator\">+</span> arrayList1<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 2</span>\n        arrayList1<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        arrayList1<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Comparator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token annotation punctuation\">@Override</span>\n            <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">compare</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> o1<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span> o2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>o1 <span class=\"token operator\">></span> o2<span class=\"token punctuation\">)</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>o1 <span class=\"token operator\">==</span> o2<span class=\"token punctuation\">)</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">else</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"정렬 하면?: \"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>arrayList1<span class=\"token punctuation\">.</span><span class=\"token function\">toArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// [1, 2, 3, 4]</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1부터 2까지 추출: \"</span> <span class=\"token operator\">+</span> arrayList1<span class=\"token punctuation\">.</span><span class=\"token function\">subList</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// [2, 3]</span>\n\n        <span class=\"token class-name\">ListIterator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> li <span class=\"token operator\">=</span> arrayList1<span class=\"token punctuation\">.</span><span class=\"token function\">listIterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>li<span class=\"token punctuation\">.</span><span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>li<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"] => 뒤로 한번더 [\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>li<span class=\"token punctuation\">.</span><span class=\"token function\">hasPrevious</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>li<span class=\"token punctuation\">.</span><span class=\"token function\">previous</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"]\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// [1,2,3,4,] => 뒤로 한번더 [4,3,2,1,]</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"terminal\"><pre class=\"language-terminal\"><code class=\"language-terminal\">1이 배열 내 존재 하는가?: true\n두 ArrayList는 일치 하는가?: true\narrayList1의 hashCode(): 30817\narrayList1의 길이는?: 3\n뭘 하나라도 지웠는가?: true\narrayList2는 비었는가?: true\narrayList1를 Array로 변환 하면?: [1, 2, 3]\n[1,2,3,]\n\narrayList1의 1번 인덱스에 3을 넣고 꺼내 보면?: 3\narrayList2에 arrayList1을 다 넣어 보면?: [1, 3, 2, 3]\narrayList1에서 3이 있는 위치: 1\narrayList1에서 3이 있는 위치: 3\n인덱스 1에 있는 값을 지웠는가?: 3\n그럼 현재 인덱스 1의 값을 4로 바꾸면?: 2\n정렬 하면?: [1, 2, 3, 4]\n1부터 2까지 추출: [2, 3]\n[1,2,3,4,] =&gt; 뒤로 한번더 [4,3,2,1,]</code></pre></div>\n<h3>Set Interface</h3>\n<p><strong>Set Interface</strong>를 이용한, 구현 클래스들의 상속 구조를 나타낸 그림입니다.</p>\n<p align=\"center\">\n\t<img src=\"/post_image/cpp-to-java/08-04.png\" width=\"80%\"/>\n    <p align=\"center\" style=\"color:#888888; font-size: 12px;\">\n\t\tSet Interface\n\t</p>\n</p>\n<ul>\n<li><strong>HashSet</strong>: <strong>Hash Table</strong>을 이용, 데이터를 빠르게 접근 가능하도록 만든 자료 구조 입니다. 단, <strong>저장 순서를 보장하지 않습니다.</strong></li>\n<li><strong>LinkedHashSet</strong>: <strong>Linked List + Hash + Set</strong>을 합친 자료 구조로, <strong>저장 순서를 보장하는 HashSet</strong>입니다.</li>\n<li><strong>TreeSet</strong>: <strong>삽입은 느리지만, 탐색은 빠른 Tree</strong> 구조를 이용한 <strong>Set</strong>으로, <strong>저장 순서를 유지 하지 않지만, 정렬 상태를 유지 가능한</strong> 자료 구조 입니다.</li>\n</ul>\n<p><strong>Set Interface</strong>에 구현된 인터페이스는 다음과 같습니다.</p>\n<ul>\n<li><code class=\"language-text\">add(Object o)</code>: <code class=\"language-text\">o</code>가 <code class=\"language-text\">Set</code> 내에 없으면 추가 하고, 이미 존재하면 <code class=\"language-text\">false</code>를 반환 합니다.</li>\n<li><code class=\"language-text\">contains(Object o)</code>, <code class=\"language-text\">containsAll(Collection c)</code>: <code class=\"language-text\">o</code> 혹은 <code class=\"language-text\">c</code> 내에 있는 모든 <code class=\"language-text\">element</code> 들이 <code class=\"language-text\">Set</code> 내에 존재하는지 반환 합니다.</li>\n<li><code class=\"language-text\">equals(Object o)</code>: <code class=\"language-text\">o</code>와 <code class=\"language-text\">Set</code>이 같은 값을 가지고 있는지 확인 합니다.</li>\n<li><code class=\"language-text\">isEmpty()</code>: 현재 집합이 비어있으면 <code class=\"language-text\">true</code>, 아니면 <code class=\"language-text\">false</code>를 반환 합니다.</li>\n<li><code class=\"language-text\">remove(Object o)</code>: <code class=\"language-text\">o</code> 가 <code class=\"language-text\">Set</code> 내에 있으면 제거 하고, 제거 여부를 반환 합니다.</li>\n<li><code class=\"language-text\">size()</code>: 집합 크기를 반환 합니다.</li>\n<li><code class=\"language-text\">clear()</code>: 집합 내의 모든 <code class=\"language-text\">element</code>를 제거 합니다.</li>\n</ul>\n<p><strong>Set</strong> 인터페이스 구현체의 대표격인 <code class=\"language-text\">HashSet</code> 을 이용한 예시는 다음과 같습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 초기화 및 아이템 삽입</span>\n        <span class=\"token class-name\">HashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> hashSet <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        hashSet<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        hashSet<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        hashSet<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">HashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> hashSet2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>hashSet<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"3 추가 성공 했는가?: \"</span> <span class=\"token operator\">+</span> hashSet<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1이 Set 내에 있는가?: \"</span> <span class=\"token operator\">+</span> hashSet<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hashSet이 hashSet2를 포함 하는가?: \"</span> <span class=\"token operator\">+</span> hashSet<span class=\"token punctuation\">.</span><span class=\"token function\">containsAll</span><span class=\"token punctuation\">(</span>hashSet2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hashSet2 내의 2를 지웠는가?: \"</span> <span class=\"token operator\">+</span> hashSet2<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hashSet과 hashSet2는 같은가?: \"</span> <span class=\"token operator\">+</span> hashSet<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>hashSet2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hashSet의 크기는?: \"</span> <span class=\"token operator\">+</span> hashSet<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        hashSet<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hashSet은 비었는가?: \"</span> <span class=\"token operator\">+</span> hashSet<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"terminal\"><pre class=\"language-terminal\"><code class=\"language-terminal\">3 추가 성공 했는가?: false\n1이 Set 내에 있는가?: true\nhashSet이 hashSet2를 포함 하는가?: true\nhashSet2 내의 2를 지웠는가?: true\nhashSet과 hashSet2는 같은가?: false\nhashSet의 크기는?: 3\nhashSet은 비었는가?: true</code></pre></div>\n<h3>Map Interface</h3>\n<p><strong>Map Interface</strong>는 키-값을 저장 하는 자료구조를 구현 하기 위한 <strong>인터페이스</strong> 입니다.</p>\n<p align=\"center\">\n\t<img src=\"/post_image/cpp-to-java/08-05.png\" width=\"80%\"/>\n    <p align=\"center\" style=\"color:#888888; font-size: 12px;\">\n\t\tMap Interface\n\t</p>\n</p>\n<ul>\n<li><strong>HashMap</strong>: 키 값을 기반으로 한 정렬이 필요 없이, <strong>Hash</strong> 기법을 사용하여, 빠른 키 값 접근을 할 수 있는 <strong>자료 구조</strong> 입니다.</li>\n<li><strong>HashTable</strong>: <strong>HashMap</strong>과 동일한 기능을 합니다. 현재 <code class=\"language-text\">deprecated</code> 되었습니다.</li>\n<li><strong>LinkedHashMap</strong>: <strong>HashMap</strong>에 <strong>삽입 순서를 유지</strong>해 주는 기능이 추가된 것 입니다.</li>\n<li><strong>TreeMap</strong>: <strong>키 정렬 기능</strong>이 추가된 <strong>Map</strong> 자료구조 입니다.</li>\n</ul>\n<p><strong>Map Interface</strong>의 메서드는 다음과 같습니다.</p>\n<ul>\n<li><code class=\"language-text\">Object put(Object key, Object value)</code>: <code class=\"language-text\">Map</code> 내에 <code class=\"language-text\">key</code>, <code class=\"language-text\">value</code>를 키-값 쌍으로 연결하여 저장 합니다.</li>\n<li><code class=\"language-text\">void putAll(Map t)</code>: <code class=\"language-text\">Map</code> 에 <code class=\"language-text\">t</code> 에 있는 키-값 쌍들 모두를 저장 합니다.</li>\n<li><code class=\"language-text\">Object get(Object key)</code>: <code class=\"language-text\">Map</code> 내에 <code class=\"language-text\">key</code>와 일치하는 값을 추출 합니다.</li>\n<li><code class=\"language-text\">Object remove(Object key)</code>: <code class=\"language-text\">Map</code> 내에 <code class=\"language-text\">key</code> 객체와 일치하는 <code class=\"language-text\">key-value</code> 객체를 삭제 합니다.</li>\n<li><code class=\"language-text\">boolean containsKey(Object Key)</code>: <code class=\"language-text\">Map</code> 내에 <code class=\"language-text\">key</code>와 일치하는 키-값 쌍 값이 있는지 여부를 반환 합니다.</li>\n<li><code class=\"language-text\">boolean containsValue(Object value)</code>: <code class=\"language-text\">Map</code> 내에 <code class=\"language-text\">value</code>와 일치하는 키-값 쌍 값이 있는지 여부를 반환 합니다.</li>\n<li><code class=\"language-text\">Set KeySet()</code>: <code class=\"language-text\">Map</code>에 저장된 모든 <code class=\"language-text\">key</code> 객체를 <code class=\"language-text\">Set</code>을 이용 하여 반환 합니다.</li>\n<li><code class=\"language-text\">void clear()</code>: <code class=\"language-text\">Map</code> 내의 모든 객체를 삭제 합니다.</li>\n</ul>\n<p><strong>Map</strong> 인터페이스 구현체의 대표격인 <code class=\"language-text\">HashMap</code> 을 이용한 예시는 다음과 같습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 초기화 및 아이템 삽입</span>\n        <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> hashMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        hashMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        hashMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        hashMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> hashMap2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        hashMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        hashMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Key 3과 일치: \"</span> <span class=\"token operator\">+</span> hashMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        hashMap<span class=\"token punctuation\">.</span><span class=\"token function\">putAll</span><span class=\"token punctuation\">(</span>hashMap2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Key 5 삭제: \"</span> <span class=\"token operator\">+</span> hashMap<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Key 4가 존재 하는지?: \"</span> <span class=\"token operator\">+</span> hashMap<span class=\"token punctuation\">.</span><span class=\"token function\">containsKey</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Value 5가 존재 하는지?: \"</span> <span class=\"token operator\">+</span> hashMap<span class=\"token punctuation\">.</span><span class=\"token function\">containsValue</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Key 값 모두 출력: \"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>hashMap<span class=\"token punctuation\">.</span><span class=\"token function\">keySet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"terminal\"><pre class=\"language-terminal\"><code class=\"language-terminal\">Key 3과 일치: 3\nKey 5 삭제: 5\nKey 4가 존재 하는지?: true\nValue 5가 존재 하는지?: false\nKey 값 모두 출력: [1, 2, 3, 4]</code></pre></div>\n<h3>마치며</h3>\n<p>다음 시간에는 <strong>컬렉션, 배열</strong>에 이어, 많은 양의 데이터를 다룰 수 있는 <strong>스트림</strong>에 대해서 배워 보겠습니다.</p>","id":"8224a040-7a4f-5a02-b882-7d6fc6874047","frontmatter":{"date":"2022-01-23","path":"/java/cpp-to-java-8","title":"[C++ to Java] 8. Collections","tags":["Java"],"keyword":"Java, c++ to java, java collections, 자바 컬렉션, 자바 collections, java 컬렉션","summary":"Java Collections에 대해 알아보자.","img":"/post_image/cpp-to-java/08-01.jpeg","series":"C++ to Java"}}},"pageContext":{"series":{"data":{"allMarkdownRemark":{"edges":[{"node":{"id":"8224a040-7a4f-5a02-b882-7d6fc6874047","excerpt":"Java Collections 안녕하세요? JustKode 입니다. 우리는 프로그래밍을 하며, 동일한 규격을 가진 수 많은 데이터를 다루는 경우가 있습니다. 그럴 때 우리는 배열을 주로 사용 합니다. 하지만, 자료 구조를 배웠다면 알겠지만, 배열로는 수 많은 데이터를 다루기에는 부족하다는 것을 알 수 있습니다. Java에서는 자료들을 쉽게 관리 하기 위해 제공하는 패키지,  가 있습니다. 대표적으로 3가지 Interface로 나뉩니다. List…","frontmatter":{"date":"2022-01-23","tags":["Java"],"path":"/java/cpp-to-java-8","title":"[C++ to Java] 8. Collections","img":"/post_image/cpp-to-java/08-01.jpeg","summary":"Java Collections에 대해 알아보자."}}},{"node":{"id":"1787bcf7-9a6e-52cd-bee1-ed50be42f565","excerpt":"Thread Thread는 운영체제에서, 프로세스 실행 단위를 일컫습니다. 하나의 프로세스가 한 개 이상의 쓰레드를 가지며, 다수의 Thread…","frontmatter":{"date":"2022-01-20","tags":["Java"],"path":"/java/cpp-to-java-7","title":"[C++ to Java] 7. Thread 기초","img":"/post_image/cpp-to-java/07-01.jpeg","summary":"Java Thread 기초에 대해 알아보자."}}},{"node":{"id":"72344018-a67c-56e7-9d0d-9d1fa56ac234","excerpt":"Java의 기존 패키지들 안녕하세요? JustKode 입니다. 오늘은 Java의 기본 패키지들에 대해서 알아보는 시간을 가져 보겠습니다. 기본으로  되어 있는  부터 시작해서,  에 있는 패키지까지 알아 보도록 하겠습니다. java.lang.Object 는 Java내에서 모든 Class…","frontmatter":{"date":"2022-01-15","tags":["Java"],"path":"/java/cpp-to-java-6","title":"[C++ to Java] 6. Java.lang 패키지 & 유용한 클래스","img":"/post_image/cpp-to-java/06-01.jpeg","summary":"Java 기본 패키지들에 대해 알아보자."}}},{"node":{"id":"b0131649-a240-5030-aea6-27074d8af80b","excerpt":"Exceptions 우리는 사용자의 프로그램 오작동이든, 시스템 내부의 예기치 못한 오류든 많은 경우의 예외 사항을 어플리케이션을 운영 하면서 맞게 됩니다. 그러므로 우리는 예외 처리에 대해서 알 필요가 있습니다. 예를 들어 보겠습니다. 만약 계산기 프로그램을 만든다고 가정 하였을 때, 사용자가 어떤 수를…","frontmatter":{"date":"2022-01-11","tags":["Java"],"path":"/java/cpp-to-java-5","title":"[C++ to Java] 5. 예외 처리","img":"/post_image/cpp-to-java/05-01.jpeg","summary":"Java의 예외 처리에 대해 알아보자."}}},{"node":{"id":"754c5ad9-0338-5c4f-aaaa-3dedbc23c6e2","excerpt":"Package, Import 안녕하세요? Justkode 입니다. 오늘은 Package와 이를 Import 하는 것에 대해 알아 보겠습니다. Package…","frontmatter":{"date":"2022-01-05","tags":["Java"],"path":"/java/cpp-to-java-4","title":"[C++ to Java] 4. Package와 Import","img":"/post_image/cpp-to-java/04-01.png","summary":"패키지와 임포트에 대해 알아보자."}}},{"node":{"id":"0024c64f-f35e-5531-a3ba-adc280de2813","excerpt":"Inheritance, Polymorphism 안녕하세요? Justkode 입니다. 오늘은 상속, 다형성, 인터페이스에 대해서 알아 보는 시간을 가져 보도록 하겠습니다. 상속 (Inheritance…","frontmatter":{"date":"2021-12-25","tags":["Java"],"path":"/java/cpp-to-java-3","title":"[C++ to Java] 3. 상속, 다형성, 인터페이스","img":"/post_image/cpp-to-java/03-01.jpg","summary":"Java에서의 상속, 다형성에 대해 알아 보자."}}},{"node":{"id":"6861ec31-c681-53af-a75b-dd7da4cf707c","excerpt":"OOP in Java 안녕하세요! JustKode 입니다. 사실 제목까지 이렇게 분리 하고, 이렇게 이야기 하기도 뭐한게, Java는 Object-Oriented Programming을 위해 태어난 언어이고, 안에서 OOP를 하는 것은 당연한 이야기 이기 때문입니다. 우리는 이번 시간에 Java의 OOP에 대해, C++과 비교하여 제대로 짚고 넘어 가고자 합니다. Pass by Value, Pass by Reference 일단, C…","frontmatter":{"date":"2021-12-23","tags":["Java"],"path":"/java/cpp-to-java-2","title":"[C++ to Java] 2. Object-Oriented Programming","img":"/post_image/cpp-to-java/02-01.png","summary":"Java에서의 OOP에 대해 알아보자."}}},{"node":{"id":"e1b89ed7-138a-5e78-b43c-51be401aed68","excerpt":"Hello World! 안녕하세요! JustKode 입니다. 오늘은  패키지에 있는 System Class에 대해서 알아 보겠습니다. 일단  패키지에 대해서 설명 드리자면, Java 프로그래밍에 사용 되는 가장 기본적인 Class들을 모아놓은 패키지로, 를 하지 않아도 사용 가능 합니다. System Class는 JVM을 거쳐 운영체제의 일부 기능을 사용 할 수 있도록 도와주는 클래스입니다. 또한, System Class…","frontmatter":{"date":"2021-12-22","tags":["Java"],"path":"/java/cpp-to-java-1","title":"[C++ to Java] 1. System Class","img":"/post_image/cpp-to-java/01-01.png","summary":"System Class에 대해 알아보자."}}},{"node":{"id":"3c1880a7-ded3-5495-be73-6bf25d2854bf","excerpt":"C++ to Java 안녕하세요! JustKode 입니다. 살다 보면, 아니 한국에서 개발자로 살다보면 생각 보다, Java를 해야 할 일이 많습니다. Android, Spring, Hadoop, Spark 등, 여러 곳에서 자바는 사용 됩니다. 대부분의 컴퓨터공학과 학생들은 학교 프로그래밍 기초 시간에, C/C++을 많이 배우게 됩니다. 저 같은 경우에도 1학년 때 C++로 프로그래밍을 시작 했습니다. C++ 과 Java…","frontmatter":{"date":"2021-12-15","tags":["Java"],"path":"/java/cpp-to-java-0","title":"[C++ to Java] 0. Orientation","img":"/post_image/cpp-to-java/00-01.jpg","summary":"어쩌다 java를 해야 하는 사람들을 위해"}}}]}}},"categoryPosts":{"data":{"allMarkdownRemark":{"edges":[{"node":{"id":"8224a040-7a4f-5a02-b882-7d6fc6874047","excerpt":"Java Collections 안녕하세요? JustKode 입니다. 우리는 프로그래밍을 하며, 동일한 규격을 가진 수 많은 데이터를 다루는 경우가 있습니다. 그럴 때 우리는 배열을 주로 사용 합니다. 하지만, 자료 구조를 배웠다면 알겠지만, 배열로는 수 많은 데이터를 다루기에는 부족하다는 것을 알 수 있습니다. Java에서는 자료들을 쉽게 관리 하기 위해 제공하는 패키지,  가 있습니다. 대표적으로 3가지 Interface로 나뉩니다. List…","frontmatter":{"date":"2022-01-23","tags":["Java"],"path":"/java/cpp-to-java-8","title":"[C++ to Java] 8. Collections","img":"/post_image/cpp-to-java/08-01.jpeg","summary":"Java Collections에 대해 알아보자."}}},{"node":{"id":"1787bcf7-9a6e-52cd-bee1-ed50be42f565","excerpt":"Thread Thread는 운영체제에서, 프로세스 실행 단위를 일컫습니다. 하나의 프로세스가 한 개 이상의 쓰레드를 가지며, 다수의 Thread…","frontmatter":{"date":"2022-01-20","tags":["Java"],"path":"/java/cpp-to-java-7","title":"[C++ to Java] 7. Thread 기초","img":"/post_image/cpp-to-java/07-01.jpeg","summary":"Java Thread 기초에 대해 알아보자."}}},{"node":{"id":"72344018-a67c-56e7-9d0d-9d1fa56ac234","excerpt":"Java의 기존 패키지들 안녕하세요? JustKode 입니다. 오늘은 Java의 기본 패키지들에 대해서 알아보는 시간을 가져 보겠습니다. 기본으로  되어 있는  부터 시작해서,  에 있는 패키지까지 알아 보도록 하겠습니다. java.lang.Object 는 Java내에서 모든 Class…","frontmatter":{"date":"2022-01-15","tags":["Java"],"path":"/java/cpp-to-java-6","title":"[C++ to Java] 6. Java.lang 패키지 & 유용한 클래스","img":"/post_image/cpp-to-java/06-01.jpeg","summary":"Java 기본 패키지들에 대해 알아보자."}}},{"node":{"id":"b0131649-a240-5030-aea6-27074d8af80b","excerpt":"Exceptions 우리는 사용자의 프로그램 오작동이든, 시스템 내부의 예기치 못한 오류든 많은 경우의 예외 사항을 어플리케이션을 운영 하면서 맞게 됩니다. 그러므로 우리는 예외 처리에 대해서 알 필요가 있습니다. 예를 들어 보겠습니다. 만약 계산기 프로그램을 만든다고 가정 하였을 때, 사용자가 어떤 수를…","frontmatter":{"date":"2022-01-11","tags":["Java"],"path":"/java/cpp-to-java-5","title":"[C++ to Java] 5. 예외 처리","img":"/post_image/cpp-to-java/05-01.jpeg","summary":"Java의 예외 처리에 대해 알아보자."}}}]}}}}},"staticQueryHashes":["234633779","63159454"]}