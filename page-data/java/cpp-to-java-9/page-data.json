{"componentChunkName":"component---src-layouts-post-layout-tsx","path":"/java/cpp-to-java-9","result":{"data":{"markdownRemark":{"html":"<h2>Generic, Enum, Lambda</h2>\n<p>안녕하세요? 오늘은 중요하지만, 한 번에 다루기에 애매했던 토픽들에 대해서 배워 보고자 합니다.</p>\n<h2>Generic</h2>\n<p><strong>Generic</strong>은 <strong>C++</strong> 에서의 <strong>Template</strong>와 같은 역할을 합니다. <strong>타입 변수</strong>를 받아, 이에 맞는 <strong>지네릭 클래스</strong>를 만들 수 있습니다. 문법은 <strong>C++</strong>의 것과 상당히 유사 합니다. 클래스를 선언 할 때, <code class=\"language-text\">클래스명&lt;타입 변수&gt;</code>를 작성 하면 됩니다.</p>\n<p>또한, <strong>지네릭 메서드</strong> 또한 만들 수 있습니다. <strong>메서드</strong>를 정의할 때, <strong>리턴 타입</strong>까지 반환 하면 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ArrayList</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MyNewArray</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> array<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 초기화 블록</span>\n    <span class=\"token punctuation\">{</span>\n        array <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">T</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> item<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        array<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">MyNewArray</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> array <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyNewArray</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        array<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        array<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        array<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        array<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"0번째 인덱스: \"</span> <span class=\"token operator\">+</span> array<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"terminal\"><pre class=\"language-terminal\"><code class=\"language-terminal\">1\n2\n3\n0번째 인덱스: 1</code></pre></div>\n<p>위와 같이 <code class=\"language-text\">클래스명&lt;타입변수&gt;</code> 형태로 클래스를 생성 했을 때, <strong>절대 다른 타입변수가 적용된 제네릭 클래스의 객체를 참조할 수 없다</strong>는 점입니다. 예시를 들어 보겠습니다. 당연히 <code class=\"language-text\">SomeClass&lt;Fruit&gt; sc = new SomeClass&lt;Toy&gt;();</code> 같은 해당 코드는 작동 하지 않을 것 입니다. 아예 다른 클래스니까요, 그 다음으로, <code class=\"language-text\">Fruit</code>이라는 상위 클래스가 존재하고, <code class=\"language-text\">Apple</code>이라는 하위 클래스가 존재 한다면, <code class=\"language-text\">Fruit</code>이 대입 된 <strong>지네릭 클래스</strong>에 <code class=\"language-text\">Apple</code>은 대입 할 수 없습니다. 그렇게 해 놓은 이유는, <strong>의도치 않은 결과가 나오지 않게</strong> 끔 하기 위해서 입니다. <code class=\"language-text\">클래스명&lt;타입변수&gt;</code>에서, <strong>타입변수</strong>는 어느 클래스든 들어 갈 수 있기 때문이에요.</p>\n<p>비슷한 이유로, <strong>타입 변수</strong> 내에 있는, 가장 기본이 되는 <code class=\"language-text\">Object</code> 객체에 없는 메서드는 <strong>지네릭 클래스</strong> 안에서 실행 못하게 하는 것도 같은 이유에요.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">SomeClass</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Fruit</span><span class=\"token punctuation\">></span></span> sc <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SomeClass</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Fruit</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 가능</span>\n<span class=\"token class-name\">SomeClass</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Fruit</span><span class=\"token punctuation\">></span></span> sc <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SomeClass</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Toy</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 불가능</span>\n<span class=\"token class-name\">SomeClass</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Fruit</span><span class=\"token punctuation\">></span></span> sc <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SomeClass</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Apple</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 불가능</span></code></pre></div>\n<h3>지네릭 클래스 내의 다형성</h3>\n<p>우리가 <strong>지네릭 클래스</strong>를 사용 하면서, <strong>다형성</strong>을 이용 할 수 있게 하고 싶으면, 어떻게 하면 될까요? <strong>지네릭을 제한 시키는 것</strong>이 도움이 될 수 있습니다. 한 번 보겠습니다. 만약 <code class=\"language-text\">클래스명&lt;타입변수 extends 부모클래스&gt;</code>를 이용하여, <strong>부모 클래스</strong> 자신 혹은, <strong>부모 클래스</strong>의 <strong>자식 클래스</strong>만 사용 하도록 만들면 어떨까요? 그렇게 되면, <strong>부모 클래스</strong> 내에 있는 메서드들은 <strong>지네릭 클래스</strong>를 구현 하여 사용할 수 있게 됩니다.</p>\n<p>또한, 우리가 <strong>지네릭 클래스가 아닌 클래스</strong>에서 <strong>지네릭 타입</strong>에 따라서, 함수가 실행 되게 하기 위해선 어떻게 해야 할까요? <code class=\"language-text\">클래스명&lt;타입변수&gt;</code> 처럼 되어 있는 것이 아니기 때문에, <strong>타입변수</strong>를 사용 할 수 없을 텐데 말이죠. 그럴 때는 <strong>리턴 타입, 혹은 파라미터 타입</strong>에 <strong>와일드 카드</strong>를 사용하면 됩니다.</p>\n<p>와일드 카드는 전체 클래스에 대해서 작동하게 하려면 다음과 같은 세 가지 방법이 있습니다.</p>\n<ul>\n<li><code class=\"language-text\">&lt;? extends T&gt;</code>: <code class=\"language-text\">T</code>와 그 자손들만 가능</li>\n<li><code class=\"language-text\">&lt;? super T&gt;</code>: <code class=\"language-text\">T</code>와 그 조상들만 가능</li>\n<li><code class=\"language-text\">&lt;?&gt;</code>: 모든 타입이 가능. </li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Fruit</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">myName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token keyword\">return</span> <span class=\"token string\">\"Fruit\"</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Apple</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Fruit</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">myName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"Apple\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Banana</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Fruit</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">myName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"Banana\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MyClass</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Fruit</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">T</span> my_fruit<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">MyClass</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> t<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        my_fruit <span class=\"token operator\">=</span> t<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>my_fruit<span class=\"token punctuation\">.</span><span class=\"token function\">myName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Fruit의 메서드를 사용 할 수 있다.</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">callPrint</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MyClass</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Fruit</span><span class=\"token punctuation\">></span></span> mc<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        mc<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">MyClass</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">returnMyClass</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MyClass</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> mc<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> mc<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">MyClass</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Fruit</span><span class=\"token punctuation\">></span></span> f <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyClass</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Fruit</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Fruit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        f<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">callPrint</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">MyClass</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Apple</span><span class=\"token punctuation\">></span></span> a <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyClass</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Apple</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Apple</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        a<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">callPrint</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">MyClass</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Banana</span><span class=\"token punctuation\">></span></span> b <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyClass</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Banana</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Banana</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        b<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">callPrint</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"terminal\"><pre class=\"language-terminal\"><code class=\"language-terminal\">Fruit\nFruit\nApple\nApple\nBanana\nBanana</code></pre></div>\n<h2>Enum</h2>\n<p><strong>C++</strong>에서 <code class=\"language-text\">Enum</code>을 이용한 열거형이 있듯이, <strong>Java</strong>에도 열거형이 존재 합니다. <strong>Java</strong>의 <strong>열거형</strong>은, <strong>C++</strong>의 것보다 더 향상된 열거형 입니다. 열거형의 <strong>값</strong> 뿐만 아니라, <strong>타입</strong>까지 체킹 하기 때문에, 보다 더 논리적인 오류를 줄일 수 있습니다. 또한, 열거형에 <strong>멤버변수</strong> 혹은 <strong>메서드</strong>를 추가 할 수 있습니다. 그리하여, 더 객체지향 적인 <strong>Enum Class</strong>를 만들 수 있습니다. </p>\n<p><code class=\"language-text\">switch</code> 문을 사용 하려고 할 때는, <strong>열거형 타입</strong>을 굳이 입력 하지 않아도 됩니다.</p>\n<ul>\n<li><code class=\"language-text\">String name()</code>: 열거형 객체의 이름을 반환 합니다.</li>\n<li><code class=\"language-text\">int ordinal()</code>: 열거형 객체의 순서를 반환 합니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">enum</span> <span class=\"token class-name\">Alphabet</span> <span class=\"token punctuation\">{</span><span class=\"token class-name\">A</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">B</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">C</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">D</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">E</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">F</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">enum</span> <span class=\"token class-name\">Qwerty</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Q</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">W</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">E</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">R</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">(</span><span class=\"token number\">9</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Y</span><span class=\"token punctuation\">(</span><span class=\"token number\">11</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 열거형에 멤버 변수 및 메서드를 적용.</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> value<span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Qwerty</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// System.out.println(\"Alphabet.A == Qwerty.Q: \" + (Alphabet.A == Qwerty.Q)); => 불가능</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Alphabet.A == Qwerty.Q: \"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Alphabet<span class=\"token punctuation\">.</span>A</span> <span class=\"token operator\">==</span> <span class=\"token class-name\">Alphabet<span class=\"token punctuation\">.</span>B</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 가능</span>\n\n        <span class=\"token class-name\">Alphabet</span> alphabet <span class=\"token operator\">=</span> <span class=\"token class-name\">Alphabet<span class=\"token punctuation\">.</span>A</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>alphabet<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">case</span> <span class=\"token class-name\">A</span><span class=\"token operator\">:</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A 입니다!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A가 아닙니다!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Alphabet<span class=\"token punctuation\">.</span>C</span><span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Qwerty<span class=\"token punctuation\">.</span>R</span><span class=\"token punctuation\">.</span><span class=\"token function\">ordinal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Qwerty<span class=\"token punctuation\">.</span>Y</span><span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"terminal\"><pre class=\"language-terminal\"><code class=\"language-terminal\">Alphabet.A == Qwerty.Q: false\nA 입니다!\nC\n3\n11</code></pre></div>\n<h2>Lambda</h2>\n<p><strong>람다식(Lambda Expression)</strong>은 메서드를 하나의 <strong>식(Expression)</strong>으로 나타 낸 것 입니다. 우리는 <strong>익명 함수</strong>를 이용하여, 파라미터를 <strong>함수</strong>로 받는 함수에 <strong>익명 함수</strong>를 파라미터로 삽입하여 다른 함수를 따로 구현 할 필요 없이, 이를 구현 할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">setAll</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"terminal\"><pre class=\"language-terminal\"><code class=\"language-terminal\">[2, 4, 6, 8, 10]</code></pre></div>\n<p>람다식은 다음과 같은 형식을 따릅니다.</p>\n<blockquote>\n<p>(매개변수) -> {\n문장들\n}</p>\n</blockquote>\n<p>만약 <code class=\"language-text\">a, b</code> 중 더 큰 값을 반환하는 <code class=\"language-text\">max(int a, int b)</code> 함수를 구현 한다고 하면, 어떻게 하면 될까요? 예시는 다음과 같습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span><span class=\"token keyword\">return</span> a <span class=\"token operator\">></span> b <span class=\"token operator\">?</span> a <span class=\"token operator\">:</span> b<span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span><span class=\"token keyword\">return</span> a <span class=\"token operator\">></span> b <span class=\"token operator\">?</span> a <span class=\"token operator\">:</span> b<span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> a <span class=\"token operator\">></span> b <span class=\"token operator\">?</span> a <span class=\"token operator\">:</span> b\n<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> a <span class=\"token operator\">></span> b <span class=\"token operator\">?</span> a <span class=\"token operator\">:</span> b  <span class=\"token comment\">// 타입 추론이 가능 한 경우</span></code></pre></div>\n<p>여기서, 매개변수가 하나만 존재 한다면, <code class=\"language-text\">a -&gt; a * a</code> 로 표현 가능 합니다.</p>\n<h3>Functional Interface</h3>\n<p>만약, 우리가 <strong>람다식</strong>을 파라미터로 넣을 수 있다면, 그 <strong>람다식</strong>은, 특정 <strong>클래스</strong>에 포함 되어야 한다는 의미를 가집니다. 그렇다면, <strong>람다식</strong>은 어떤 <strong>클래스</strong> 혹은 <strong>인터페이스</strong>에 들어가 있는 걸까요?</p>\n<p>사실, 그것은 우리가 정해주면 되는 것 입니다. 우리는 다음과 같은 조건을 만족하는 <strong>인터페이스</strong>를 만들어서 제공 하면 됩니다.</p>\n<ul>\n<li><strong>어노테이터 (함수 위에 메타정보 삽입)</strong>로 <code class=\"language-text\">@FunctionalInterface</code>를 넣어 줍니다.</li>\n<li><strong>단 하나의 추상 메서드</strong>만을 제공 하여야 합니다. <code class=\"language-text\">public abstract 반환타입 함수명(파라미터)</code>로 말입니다.</li>\n</ul>\n<p>다음은 구현 예시 입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@FunctionalInterface</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">MyFunction</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">int</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">printFunc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token class-name\">MyFunction</span> f<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">.</span><span class=\"token function\">func</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">printFunc</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> x <span class=\"token operator\">-></span> x <span class=\"token operator\">*</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"terminal\"><pre class=\"language-terminal\"><code class=\"language-terminal\">4</code></pre></div>\n<p>우리는 <code class=\"language-text\">x -&gt; x * x</code> 람다식을 구현 후, 파라미터로 넣음으로써 이를 구현 할 수 있었습니다. 사실, 위의 코드에서 <code class=\"language-text\">x -&gt; x * x</code> 는 다음과 동일 합니다. 우리는 <code class=\"language-text\">@FunctionalInterface</code> 어노테이션을 통해, 어느 함수로 우리가 만든 <strong>익명 함수</strong>로 매핑해야 하는 지 알고 있습니다. 당연히, 위의 규칙 대로라면, <strong>유일하게 구현 해야 하는 추상 메서드</strong>로 매핑이 될 것 입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> x <span class=\"token operator\">*</span> x<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>우리는 이런식으로, <code class=\"language-text\">@FunctionalInterface</code>를 구현 하여, <strong>람다식</strong>을 함수의 파라미터로 이용 할 수 있도록 할 수 있었습니다.</p>\n<h3>java.util.function 패키지</h3>\n<p><strong>Java</strong>에서는 기본적으로 <strong>Function Interface</strong>를 제공 합니다. 바로 <code class=\"language-text\">java.util.function</code>에서 말이죠. 일단, 많은 것을 다루지 않고, 기초적인 것만 다루고 넘어 가도록 하겠습니다.</p>\n<h4>java.lang.Runnable</h4>\n<p>매개변수도 없고, 반환 값도 없는 인터페이스입니다. <strong>Thread</strong> 생성 시 자주 사용 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Thread</span> thread <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span>  <span class=\"token comment\">// 해당 위치에서 사용 됨</span>\n            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"쓰레드 시작!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"쓰레드 끝!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        thread<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"terminal\"><pre class=\"language-terminal\"><code class=\"language-terminal\">쓰레드 시작!\n쓰레드 끝!</code></pre></div>\n<h4>Supplier<T></h4>\n<p>매개변수는 없고, 반환 값 <code class=\"language-text\">T</code> 만 있는 인터페이스 입니다. <code class=\"language-text\">T get()</code>을 구현하는 인터페이스 입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>function<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">printFunc</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Supplier</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> t<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  <span class=\"token comment\">// 와일드 카드 사용</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// T get()</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">printFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token number\">3.14</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 알아서 변환 됨</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"terminal\"><pre class=\"language-terminal\"><code class=\"language-terminal\">3.14</code></pre></div>\n<h4>Consumer<T></h4>\n<p>매개변수로 <code class=\"language-text\">T</code>를 받고, 반환 값은 없는 인터페이스 입니다. <code class=\"language-text\">void accept(T t)</code>를 구현하는 인터페이스 입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>function<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">useFunc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Consumer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> func<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        func<span class=\"token punctuation\">.</span><span class=\"token function\">accept</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">useFunc</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">+</span> <span class=\"token string\">\"가 입력 되었습니다.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"terminal\"><pre class=\"language-terminal\"><code class=\"language-terminal\">5가 입력 되었습니다.</code></pre></div>\n<h4>Function&#x3C;T, R></h4>\n<p>매개변수로 <code class=\"language-text\">T</code>를 받고, <code class=\"language-text\">R</code>을 반환 하는 인터페이스 입니다. <code class=\"language-text\">R apply(T t)</code>를 구현하는 인터페이스 입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>function<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Function</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> consumer <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> x <span class=\"token operator\">+</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 생성 과정에서 바로 람다식 대입 가능</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>consumer<span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token number\">1234</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"terminal\"><pre class=\"language-terminal\"><code class=\"language-terminal\">1234</code></pre></div>\n<h4>Predicate<T></h4>\n<p>매개변수로 <code class=\"language-text\">T</code>를 받고, <code class=\"language-text\">boolean</code>을 반환 하는 인터페이스 입니다. <code class=\"language-text\">boolean test(T t)</code> 를 구현 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>function<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Predicate</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> predicate <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> array<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> array<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> array <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>predicate<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"terminal\"><pre class=\"language-terminal\"><code class=\"language-terminal\">false</code></pre></div>\n<h4>기타 인터페이스</h4>\n<p>기타 인터페이스로 두 개의 파라미터를 받으며 똑같은 기능을 하는 <code class=\"language-text\">BiConsumer&lt;T, U&gt;</code>, <code class=\"language-text\">BiPredicate&lt;T, U&gt;</code>, <code class=\"language-text\">BiFunction&lt;T, U, R&gt;</code> 가 있고, 매개변수 <code class=\"language-text\">T</code> 한 개를 받아 <code class=\"language-text\">T</code>로 반환하는 <code class=\"language-text\">UnaryOperator&lt;T&gt;</code>, 매개변수 <code class=\"language-text\">T</code> 두 개를 받아 하나의 <code class=\"language-text\">T</code>로 반환하는 <code class=\"language-text\">BinaryOperator&lt;T&gt;</code> 가 있습니다. 그 이외에서 많은 인터페이스가 존재 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>function<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">BiConsumer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Float</span><span class=\"token punctuation\">></span></span> biConsumer <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> i<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Float</span> f<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">BiPredicate</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Float</span><span class=\"token punctuation\">></span></span> biPredicate <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> i<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Float</span> f<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> i <span class=\"token operator\">></span> f<span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">BiFunction</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Float</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Float</span><span class=\"token punctuation\">></span></span> biFunction <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> i<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Float</span> f<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span>i <span class=\"token operator\">+</span> f<span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">UnaryOperator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> unaryOperator <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> a<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> a <span class=\"token operator\">*</span> a<span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">BinaryOperator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> binaryOperator <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> a<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>마치며</h2>\n<p>다음 시간에는 <strong>배열, 컬렉션</strong>처럼 많은 데이터를 처리 할 수 있는 <strong>Stream</strong>에 대해서 배워 보도록 하겠습니다.</p>","id":"c638b5a0-5e6a-5704-9719-94f403af34f1","frontmatter":{"date":"2022-01-26","path":"/java/cpp-to-java-9","title":"[C++ to Java] 9. Generic, Enum, Lambda","tags":["Java"],"keyword":"Java, c++ to java, java Generic, java enum, java lambda, 자바 지네릭, 자바 열거형, 자바 람다","summary":"여태 다루지 못한 것들에 대해 한번 다뤄보자.","img":"/post_image/cpp-to-java/09-01.jpeg","series":"C++ to Java"}}},"pageContext":{"series":{"data":{"allMarkdownRemark":{"edges":[{"node":{"id":"886bb640-121c-554c-8c28-e85a7dab0c3b","excerpt":"Java Stream…","frontmatter":{"date":"2022-01-31","tags":["Java"],"path":"/java/cpp-to-java-10","title":"[C++ to Java] 10. Stream","img":"/post_image/cpp-to-java/10-01.jpeg","summary":"Java Stream에 대해 알아보자."}}},{"node":{"id":"c638b5a0-5e6a-5704-9719-94f403af34f1","excerpt":"Generic, Enum, Lambda 안녕하세요? 오늘은 중요하지만, 한 번에 다루기에 애매했던 토픽들에 대해서 배워 보고자 합니다. Generic Generic은 C++ 에서의 Template와 같은 역할을 합니다. 타입 변수를 받아, 이에 맞는 지네릭 클래스를 만들 수 있습니다. 문법은 C…","frontmatter":{"date":"2022-01-26","tags":["Java"],"path":"/java/cpp-to-java-9","title":"[C++ to Java] 9. Generic, Enum, Lambda","img":"/post_image/cpp-to-java/09-01.jpeg","summary":"여태 다루지 못한 것들에 대해 한번 다뤄보자."}}},{"node":{"id":"8224a040-7a4f-5a02-b882-7d6fc6874047","excerpt":"Java Collections 안녕하세요? JustKode 입니다. 우리는 프로그래밍을 하며, 동일한 규격을 가진 수 많은 데이터를 다루는 경우가 있습니다. 그럴 때 우리는 배열을 주로 사용 합니다. 하지만, 자료 구조를 배웠다면 알겠지만, 배열로는 수 많은 데이터를 다루기에는 부족하다는 것을 알 수 있습니다. Java에서는 자료들을 쉽게 관리 하기 위해 제공하는 패키지,  가 있습니다. 대표적으로 3가지 Interface로 나뉩니다. List…","frontmatter":{"date":"2022-01-23","tags":["Java"],"path":"/java/cpp-to-java-8","title":"[C++ to Java] 8. Collections","img":"/post_image/cpp-to-java/08-01.jpeg","summary":"Java Collections에 대해 알아보자."}}},{"node":{"id":"1787bcf7-9a6e-52cd-bee1-ed50be42f565","excerpt":"Thread Thread는 운영체제에서, 프로세스 실행 단위를 일컫습니다. 하나의 프로세스가 한 개 이상의 쓰레드를 가지며, 다수의 Thread…","frontmatter":{"date":"2022-01-20","tags":["Java"],"path":"/java/cpp-to-java-7","title":"[C++ to Java] 7. Thread 기초","img":"/post_image/cpp-to-java/07-01.jpeg","summary":"Java Thread 기초에 대해 알아보자."}}},{"node":{"id":"72344018-a67c-56e7-9d0d-9d1fa56ac234","excerpt":"Java의 기존 패키지들 안녕하세요? JustKode 입니다. 오늘은 Java의 기본 패키지들에 대해서 알아보는 시간을 가져 보겠습니다. 기본으로  되어 있는  부터 시작해서,  에 있는 패키지까지 알아 보도록 하겠습니다. java.lang.Object 는 Java내에서 모든 Class…","frontmatter":{"date":"2022-01-15","tags":["Java"],"path":"/java/cpp-to-java-6","title":"[C++ to Java] 6. Java.lang 패키지 & 유용한 클래스","img":"/post_image/cpp-to-java/06-01.jpeg","summary":"Java 기본 패키지들에 대해 알아보자."}}},{"node":{"id":"b0131649-a240-5030-aea6-27074d8af80b","excerpt":"Exceptions 우리는 사용자의 프로그램 오작동이든, 시스템 내부의 예기치 못한 오류든 많은 경우의 예외 사항을 어플리케이션을 운영 하면서 맞게 됩니다. 그러므로 우리는 예외 처리에 대해서 알 필요가 있습니다. 예를 들어 보겠습니다. 만약 계산기 프로그램을 만든다고 가정 하였을 때, 사용자가 어떤 수를…","frontmatter":{"date":"2022-01-11","tags":["Java"],"path":"/java/cpp-to-java-5","title":"[C++ to Java] 5. 예외 처리","img":"/post_image/cpp-to-java/05-01.jpeg","summary":"Java의 예외 처리에 대해 알아보자."}}},{"node":{"id":"754c5ad9-0338-5c4f-aaaa-3dedbc23c6e2","excerpt":"Package, Import 안녕하세요? Justkode 입니다. 오늘은 Package와 이를 Import 하는 것에 대해 알아 보겠습니다. Package…","frontmatter":{"date":"2022-01-05","tags":["Java"],"path":"/java/cpp-to-java-4","title":"[C++ to Java] 4. Package와 Import","img":"/post_image/cpp-to-java/04-01.png","summary":"패키지와 임포트에 대해 알아보자."}}},{"node":{"id":"0024c64f-f35e-5531-a3ba-adc280de2813","excerpt":"Inheritance, Polymorphism 안녕하세요? Justkode 입니다. 오늘은 상속, 다형성, 인터페이스에 대해서 알아 보는 시간을 가져 보도록 하겠습니다. 상속 (Inheritance…","frontmatter":{"date":"2021-12-25","tags":["Java"],"path":"/java/cpp-to-java-3","title":"[C++ to Java] 3. 상속, 다형성, 인터페이스","img":"/post_image/cpp-to-java/03-01.jpg","summary":"Java에서의 상속, 다형성에 대해 알아 보자."}}},{"node":{"id":"6861ec31-c681-53af-a75b-dd7da4cf707c","excerpt":"OOP in Java 안녕하세요! JustKode 입니다. 사실 제목까지 이렇게 분리 하고, 이렇게 이야기 하기도 뭐한게, Java는 Object-Oriented Programming을 위해 태어난 언어이고, 안에서 OOP를 하는 것은 당연한 이야기 이기 때문입니다. 우리는 이번 시간에 Java의 OOP에 대해, C++과 비교하여 제대로 짚고 넘어 가고자 합니다. Pass by Value, Pass by Reference 일단, C…","frontmatter":{"date":"2021-12-23","tags":["Java"],"path":"/java/cpp-to-java-2","title":"[C++ to Java] 2. Object-Oriented Programming","img":"/post_image/cpp-to-java/02-01.png","summary":"Java에서의 OOP에 대해 알아보자."}}},{"node":{"id":"e1b89ed7-138a-5e78-b43c-51be401aed68","excerpt":"Hello World! 안녕하세요! JustKode 입니다. 오늘은  패키지에 있는 System Class에 대해서 알아 보겠습니다. 일단  패키지에 대해서 설명 드리자면, Java 프로그래밍에 사용 되는 가장 기본적인 Class들을 모아놓은 패키지로, 를 하지 않아도 사용 가능 합니다. System Class는 JVM을 거쳐 운영체제의 일부 기능을 사용 할 수 있도록 도와주는 클래스입니다. 또한, System Class…","frontmatter":{"date":"2021-12-22","tags":["Java"],"path":"/java/cpp-to-java-1","title":"[C++ to Java] 1. System Class","img":"/post_image/cpp-to-java/01-01.png","summary":"System Class에 대해 알아보자."}}},{"node":{"id":"3c1880a7-ded3-5495-be73-6bf25d2854bf","excerpt":"C++ to Java 안녕하세요! JustKode 입니다. 살다 보면, 아니 한국에서 개발자로 살다보면 생각 보다, Java를 해야 할 일이 많습니다. Android, Spring, Hadoop, Spark 등, 여러 곳에서 자바는 사용 됩니다. 대부분의 컴퓨터공학과 학생들은 학교 프로그래밍 기초 시간에, C/C++을 많이 배우게 됩니다. 저 같은 경우에도 1학년 때 C++로 프로그래밍을 시작 했습니다. C++ 과 Java…","frontmatter":{"date":"2021-12-15","tags":["Java"],"path":"/java/cpp-to-java-0","title":"[C++ to Java] 0. Orientation","img":"/post_image/cpp-to-java/00-01.jpg","summary":"어쩌다 java를 해야 하는 사람들을 위해"}}}]}}},"categoryPosts":{"data":{"allMarkdownRemark":{"edges":[{"node":{"id":"3f935429-1219-5489-9122-08b2890770e8","excerpt":"SOLID 원칙 SOLID 원칙은 객체지향 설계에서 지켜줘야 하는 5가지 원칙을 의미 합니다. 우리는 협업을 하면서, 많은 어려움을 봉착 합니다. 분명 기능 1개만 수정 한다고 특정 컴포넌트의 코드를 몇 가지 수정했는데, 이와 연관된 여러 개의 컴포넌트에서 오류를 뱉어 버리는 경우는 개발을 해보신 분들이라면 많이 경험해 봤을 것이라고 생각해요. SRP(Single Responsibility Principle…","frontmatter":{"date":"2022-02-14","tags":["Java"],"path":"/java/solid-pattern","title":"객체지향 개발의 5대 원리, SOLID","img":"/post_image/thumbnail/solid-pattern.jpeg","summary":"객체지향 개발의 5대 원리, SOLID에 대해 알아보자."}}},{"node":{"id":"886bb640-121c-554c-8c28-e85a7dab0c3b","excerpt":"Java Stream…","frontmatter":{"date":"2022-01-31","tags":["Java"],"path":"/java/cpp-to-java-10","title":"[C++ to Java] 10. Stream","img":"/post_image/cpp-to-java/10-01.jpeg","summary":"Java Stream에 대해 알아보자."}}},{"node":{"id":"c638b5a0-5e6a-5704-9719-94f403af34f1","excerpt":"Generic, Enum, Lambda 안녕하세요? 오늘은 중요하지만, 한 번에 다루기에 애매했던 토픽들에 대해서 배워 보고자 합니다. Generic Generic은 C++ 에서의 Template와 같은 역할을 합니다. 타입 변수를 받아, 이에 맞는 지네릭 클래스를 만들 수 있습니다. 문법은 C…","frontmatter":{"date":"2022-01-26","tags":["Java"],"path":"/java/cpp-to-java-9","title":"[C++ to Java] 9. Generic, Enum, Lambda","img":"/post_image/cpp-to-java/09-01.jpeg","summary":"여태 다루지 못한 것들에 대해 한번 다뤄보자."}}},{"node":{"id":"8224a040-7a4f-5a02-b882-7d6fc6874047","excerpt":"Java Collections 안녕하세요? JustKode 입니다. 우리는 프로그래밍을 하며, 동일한 규격을 가진 수 많은 데이터를 다루는 경우가 있습니다. 그럴 때 우리는 배열을 주로 사용 합니다. 하지만, 자료 구조를 배웠다면 알겠지만, 배열로는 수 많은 데이터를 다루기에는 부족하다는 것을 알 수 있습니다. Java에서는 자료들을 쉽게 관리 하기 위해 제공하는 패키지,  가 있습니다. 대표적으로 3가지 Interface로 나뉩니다. List…","frontmatter":{"date":"2022-01-23","tags":["Java"],"path":"/java/cpp-to-java-8","title":"[C++ to Java] 8. Collections","img":"/post_image/cpp-to-java/08-01.jpeg","summary":"Java Collections에 대해 알아보자."}}}]}}}}},"staticQueryHashes":["234633779","63159454"]}