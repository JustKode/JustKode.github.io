{"componentChunkName":"component---src-layouts-post-layout-tsx","path":"/java/cpp-to-java-0","result":{"data":{"markdownRemark":{"html":"<h3>C++ to Java</h3>\n<p>안녕하세요! <strong>JustKode</strong> 입니다. 살다 보면, <del>아니 한국에서 개발자로 살다보면</del> 생각 보다, <strong>Java</strong>를 해야 할 일이 많습니다. <strong>Android, Spring, Hadoop, Spark</strong> 등, 여러 곳에서 자바는 사용 됩니다.</p>\n<p>대부분의 컴퓨터공학과 학생들은 학교 프로그래밍 기초 시간에, C/C++을 많이 배우게 됩니다. 저 같은 경우에도 1학년 때 C++로 프로그래밍을 시작 했습니다.</p>\n<p><strong>C++</strong> 과 <strong>Java</strong>는 닮은 구석이 많습니다.</p>\n<ul>\n<li>객체지향 프로그래밍에 용이한 구조를 가지고 있다.</li>\n<li>코드 구조가 상당히 유사하다.</li>\n</ul>\n<p>사실 이 두 가지가 많은 것들을 함축하고 있습니다. 코드 구조가 유사하다는 것은, 우리가 <strong>C++</strong> 에서 배운 개념들을 유사하게 <strong>Java</strong>에서 이용할 수 있다는 것을 의미 합니다.</p>\n<p>그래서, 저는 <strong>유사한</strong> 부분과, <strong>다른</strong> 부분을 비교 및 대조 해 보며, <strong>C++</strong>을 배운 학생들이 쉽게 <strong>Java</strong>를 배울 수 있도록 글을 써보려고 합니다.</p>\n<p>해당 시리즈는, <strong>C++</strong>의 상속, virtual Class 및 function, STL 까지, 다 알고 있다는 가정 하에 진행 합니다. 오늘은 <strong>Java</strong>를 하기 전에 알아야 할 것들에 대해서 작성 해 보려고 합니다.</p>\n<h3>Java에 대해서 간단한 언급</h3>\n<p><strong>Java</strong>는 순수하게 객체지향 프로그래밍을 실천하기 위해 만들어진 언어 면서, <strong>C++</strong>의 단점인 종속성 문제를 해결 하기 위해 등장하였습니다. <strong>C++</strong>은 한 번 컴파일 되면 해당 운영체제 혹은 플랫폼에 종속되는 문제를 가지고 있지만, <strong>Java</strong>는 <strong>JVM</strong>을 이용하여, <strong>Java 실행 환경</strong>을 지원 하는 어느 운영체제에서도 실행 될 수 있도록 합니다. 이를 통해, <strong>Java</strong>는 전 세계에서 가장 많은 사람이 사용 하는 언어로 자리 매김 할 수 있었습니다.</p>\n<p align=\"center\">\n\t<img src=\"/post_image/cpp-to-java/00-02.png\" width=\"40%\"/>\n\t<p align=\"center\" style=\"color:#888888; font-size: 12px;\">\n\t\tJVM 구조, 출처: https://medium.com/@ahn428/java-jvm-java-virtual-machine-jre-java-runtime-environment-jdk-java-developement-kit-fed91def1d6f\n\t</p>\n</p>\n<h3>Java가 C++ 보다, 좋고 나쁜 점</h3>\n<p><strong>Java</strong>가 <strong>C++</strong>에 비한 장단점은 다음과 같습니다. </p>\n<h4>장점</h4>\n<ul>\n<li>운영체제 종속성이 덜 함.</li>\n<li>가비지 컬렉터가 존재, 메모리 관리 코드를 넣지 않아도 됨.</li>\n<li>많은 사람들이 사용 하는 만큼, 자료가 많음.</li>\n</ul>\n<h4>단점</h4>\n<ul>\n<li>느림.</li>\n<li>코드가 너무 김.</li>\n<li>예외 처리가 까다로움.</li>\n</ul>\n<h3>JRE, JDK</h3>\n<ul>\n<li><strong>JRE</strong>: <strong>Java Runtime Environment</strong>로, <strong>JVM</strong>, <strong>Java Class Library</strong>, <strong>Java Command</strong> 등 자바 프로그램을 실행 하기 위해 필요한 패키지, 실행 환경 입니다.</li>\n<li><strong>JDK</strong>: <strong>Java Development Kit</strong>으로, 자바 코드를 컴파일 하는 데 사용하는, <strong>javac</strong>를 포함하고 있습니다. 물론, <strong>JRE</strong>와 함께 말입니다.</li>\n</ul>\n<p>우리는 <strong>JDK</strong> 내에 있는 <strong>javac</strong>를 사용 하여, <strong>java</strong> 코드를 <strong>.class</strong> 파일로 컴파일 하고, <strong>java</strong>를 이용 하여 <strong>.class</strong> 파일을 실행 합니다.</p>\n<p align=\"center\">\n\t<img src=\"/post_image/cpp-to-java/00-03.png\" width=\"40%\"/>\n\t<p align=\"center\" style=\"color:#888888; font-size: 12px;\">\n\t\tTest.class 파일이 만들어 진 것은 생략 하였습니다.\n\t</p>\n</p>\n<h3>File Name</h3>\n<p>파일 명은, <code class=\"language-text\">public class</code> 이름과 완전히 일치 해야 합니다. 또한, <code class=\"language-text\">public class</code>는 <strong>파일 내에 하나만 존재</strong> 하여야 합니다.</p>\n<blockquote>\n<p>Main.java</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Sub</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>만약 <code class=\"language-text\">public class</code>가 없다면, 아무 클래스의 이름과 일치 하여도 됩니다.</p>\n<blockquote>\n<p>A.java or B.java</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">B</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>왜 <code class=\"language-text\">public class</code>가 존재 하는가? 이는 그저 가독성 때문 입니다. 만약 제가 <code class=\"language-text\">Pig</code> 라는 클래스를 <code class=\"language-text\">import</code> 하였는데, <code class=\"language-text\">Cat</code>이 나오면 당황스러울 것이기 때문입니다.</p>\n<h3>Variable Type</h3>\n<p><strong>Java</strong>에서 기본 적으로 제공하는 변수는 다음과 같습니다. 대부분 <strong>C++</strong> 에서 사용 하던 파일 타입을 사용 하나, <strong>C++</strong>과 다르게 <code class=\"language-text\">unsigned</code>를 적용 할 수 없습니다.</p>\n<ul>\n<li>정수: <code class=\"language-text\">byte</code>, <code class=\"language-text\">short</code>, <code class=\"language-text\">int</code>, <code class=\"language-text\">long</code></li>\n<li>실수: <code class=\"language-text\">float</code>, <code class=\"language-text\">double</code></li>\n<li>문자: <code class=\"language-text\">char</code></li>\n<li>참과 거짓: <code class=\"language-text\">boolean</code></li>\n</ul>\n<h3>public static void main(String args[])</h3>\n<p><code class=\"language-text\">public static void main(String args[])</code>은 <code class=\"language-text\">public class</code> 내에 존재하여, <strong>C++</strong>에서 <code class=\"language-text\">int main()</code> 역할을 합니다. 이 함수를 <code class=\"language-text\">public class</code> 내에 넣어 주면 해당 코드를 실행 합니다. <code class=\"language-text\">args</code>에 들어가는 데이터들은 <code class=\"language-text\">java</code> 명령어로 <code class=\"language-text\">.class</code> 파일을 실행 할 때 <code class=\"language-text\">argument</code>로 들어 가는 값들 입니다.</p>\n<ul>\n<li>\n<p>Code</p>\n<blockquote>\n<p>Main.java</p>\n</blockquote>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> args<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token string\">\", \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>Terminal</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ java Main <span class=\"token number\">123</span> <span class=\"token number\">456</span> <span class=\"token number\">789</span>\n<span class=\"token number\">123</span>, <span class=\"token number\">456</span>, <span class=\"token number\">789</span>, </code></pre></div>\n<h3>new operator</h3>\n<p><code class=\"language-text\">new</code>는 새로운 배열의 혹은 새로운 객체를 <strong>heap</strong> 영역에 할당 할 때 사용 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> int_array <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// int형 배열 참조변수 int_array에</span>\n<span class=\"token comment\">// 새롭게 heap 영역에 할당 된 int_array 배열의 주소를 저장함.</span>\n\n<span class=\"token class-name\">Cat</span> cat<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 메모리에 참조 변수 cat을 위한 공간이 마련됨.</span>\n<span class=\"token comment\">// 아직 인스턴스가 생성 되지 않음.</span>\n\ncat <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Cat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 참조 변수 cat에 새롭게 heap 영역에</span>\n<span class=\"token comment\">// 할당 된 Cat 객체의 주소를 저장함.</span></code></pre></div>\n<h3>마치며</h3>\n<p>다음 시간에는 본격적으로 <strong>콘솔 입출력</strong>, <strong>배열 복사</strong>, <strong>os 정보 열람</strong> 기능을 담당하는 <strong>System</strong> 객체에 대해서 알아 보겠습니다.</p>","id":"3c1880a7-ded3-5495-be73-6bf25d2854bf","frontmatter":{"date":"2021-12-15","path":"/java/cpp-to-java-0","title":"[C++ to Java] 0. Orientation","tags":["Java"],"keyword":"Java, c++ to java","summary":"어쩌다 java를 해야 하는 사람들을 위해","img":"/post_image/cpp-to-java/00-01.jpg","series":"C++ to Java"}}},"pageContext":{"series":{"data":{"allMarkdownRemark":{"edges":[{"node":{"id":"6861ec31-c681-53af-a75b-dd7da4cf707c","excerpt":"OOP in Java 안녕하세요! JustKode 입니다. 사실 제목까지 이렇게 분리 하고, 이렇게 이야기 하기도 뭐한게, Java는 Object-Oriented Programming을 위해 태어난 언어이고, 안에서 OOP를 하는 것은 당연한 이야기 이기 때문입니다. 우리는 이번 시간에 Java의 OOP에 대해, C++과 비교하여 제대로 짚고 넘어 가고자 합니다. Pass by Value, Pass by Reference 일단, C…","frontmatter":{"date":"2021-12-23","tags":["Java"],"path":"/java/cpp-to-java-2","title":"[C++ to Java] 2. Object-Oriented Programming","img":"/post_image/cpp-to-java/02-01.png","summary":"Java에서의 OOP에 대해 알아보자."}}},{"node":{"id":"e1b89ed7-138a-5e78-b43c-51be401aed68","excerpt":"Hello World! 안녕하세요! JustKode 입니다. 오늘은  패키지에 있는 System Class에 대해서 알아 보겠습니다. 일단  패키지에 대해서 설명 드리자면, Java 프로그래밍에 사용 되는 가장 기본적인 Class들을 모아놓은 패키지로, 를 하지 않아도 사용 가능 합니다. System Class는 JVM을 거쳐 운영체제의 일부 기능을 사용 할 수 있도록 도와주는 클래스입니다. 또한, System Class…","frontmatter":{"date":"2021-12-22","tags":["Java"],"path":"/java/cpp-to-java-1","title":"[C++ to Java] 1. System Class","img":"/post_image/cpp-to-java/01-01.png","summary":"System Class에 대해 알아보자."}}},{"node":{"id":"3c1880a7-ded3-5495-be73-6bf25d2854bf","excerpt":"C++ to Java 안녕하세요! JustKode 입니다. 살다 보면, 아니 한국에서 개발자로 살다보면 생각 보다, Java를 해야 할 일이 많습니다. Android, Spring, Hadoop, Spark 등, 여러 곳에서 자바는 사용 됩니다. 대부분의 컴퓨터공학과 학생들은 학교 프로그래밍 기초 시간에, C/C++을 많이 배우게 됩니다. 저 같은 경우에도 1학년 때 C++로 프로그래밍을 시작 했습니다. C++ 과 Java…","frontmatter":{"date":"2021-12-15","tags":["Java"],"path":"/java/cpp-to-java-0","title":"[C++ to Java] 0. Orientation","img":"/post_image/cpp-to-java/00-01.jpg","summary":"어쩌다 java를 해야 하는 사람들을 위해"}}}]}}},"categoryPosts":{"data":{"allMarkdownRemark":{"edges":[{"node":{"id":"6861ec31-c681-53af-a75b-dd7da4cf707c","excerpt":"OOP in Java 안녕하세요! JustKode 입니다. 사실 제목까지 이렇게 분리 하고, 이렇게 이야기 하기도 뭐한게, Java는 Object-Oriented Programming을 위해 태어난 언어이고, 안에서 OOP를 하는 것은 당연한 이야기 이기 때문입니다. 우리는 이번 시간에 Java의 OOP에 대해, C++과 비교하여 제대로 짚고 넘어 가고자 합니다. Pass by Value, Pass by Reference 일단, C…","frontmatter":{"date":"2021-12-23","tags":["Java"],"path":"/java/cpp-to-java-2","title":"[C++ to Java] 2. Object-Oriented Programming","img":"/post_image/cpp-to-java/02-01.png","summary":"Java에서의 OOP에 대해 알아보자."}}},{"node":{"id":"e1b89ed7-138a-5e78-b43c-51be401aed68","excerpt":"Hello World! 안녕하세요! JustKode 입니다. 오늘은  패키지에 있는 System Class에 대해서 알아 보겠습니다. 일단  패키지에 대해서 설명 드리자면, Java 프로그래밍에 사용 되는 가장 기본적인 Class들을 모아놓은 패키지로, 를 하지 않아도 사용 가능 합니다. System Class는 JVM을 거쳐 운영체제의 일부 기능을 사용 할 수 있도록 도와주는 클래스입니다. 또한, System Class…","frontmatter":{"date":"2021-12-22","tags":["Java"],"path":"/java/cpp-to-java-1","title":"[C++ to Java] 1. System Class","img":"/post_image/cpp-to-java/01-01.png","summary":"System Class에 대해 알아보자."}}},{"node":{"id":"3c1880a7-ded3-5495-be73-6bf25d2854bf","excerpt":"C++ to Java 안녕하세요! JustKode 입니다. 살다 보면, 아니 한국에서 개발자로 살다보면 생각 보다, Java를 해야 할 일이 많습니다. Android, Spring, Hadoop, Spark 등, 여러 곳에서 자바는 사용 됩니다. 대부분의 컴퓨터공학과 학생들은 학교 프로그래밍 기초 시간에, C/C++을 많이 배우게 됩니다. 저 같은 경우에도 1학년 때 C++로 프로그래밍을 시작 했습니다. C++ 과 Java…","frontmatter":{"date":"2021-12-15","tags":["Java"],"path":"/java/cpp-to-java-0","title":"[C++ to Java] 0. Orientation","img":"/post_image/cpp-to-java/00-01.jpg","summary":"어쩌다 java를 해야 하는 사람들을 위해"}}}]}}}}},"staticQueryHashes":["234633779","63159454"]}