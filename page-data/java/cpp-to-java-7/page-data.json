{"componentChunkName":"component---src-layouts-post-layout-tsx","path":"/java/cpp-to-java-7","result":{"data":{"markdownRemark":{"html":"<h2>Thread</h2>\n<p><strong>Thread</strong>는 운영체제에서, <strong>프로세스 실행 단위</strong>를 일컫습니다. 하나의 <strong>프로세스</strong>가 한 개 이상의 <strong>쓰레드</strong>를 가지며, 다수의 <strong>Thread</strong>를 이용하여, 동시에 두 가지 이상의 일을 실행 시킬 수 있습니다. 이를 <strong>멀티쓰레드 프로세스</strong>라고 합니다. <strong>멀티쓰레드 프로세스</strong>는 다음과 같은 장점들을 가집니다.</p>\n<p align=\"center\">\n\t<img src=\"/post_image/cpp-to-java/07-02.png\" width=\"40%\"/>\n\t<p align=\"center\" style=\"color:#888888; font-size: 12px;\">\n\t\t출처: https://en.wikipedia.org/wiki/Thread_(computing)#/media/File:Multithreaded_process.svg\n\t</p>\n</p>\n<p><strong>멀티쓰레딩의 장점</strong></p>\n<ul>\n<li>프로그램의 일부가 긴 작업을 수행 하더라도, 다른 곳에서는 프로그램의 수행이 계속 진행 될 수 있습니다.</li>\n<li>프로세스 내 자원들을 여러 개의 쓰레드에서 공유하기 때문에 메모리 공간과 시스템 자원 소모가 줄어 들 수 있습니다.</li>\n<li>멀티프로세서를 활용 할 수 있습니다.</li>\n</ul>\n<p>우리가 실제로 사용하는 프로그램에도 <strong>멀티쓰레딩</strong>을 사용하는 경우는 많습니다. 카카오톡에서 파일 업로드 도중에 메시지를 보내거나, 웹 브라우저에 창 여러개를 열어서 작업 하는 것과 같이 말입니다.</p>\n<p><strong>Java</strong> 에서 쓰레드를 구현 하기 위해선, 세 가지 방법 중 하나로 작성 하여야 합니다. 하나는 <code class=\"language-text\">Thread</code> 클래스를 상속 받아 구현 하는 것이고, 다른 하나는 <code class=\"language-text\">Runnable</code> 인터페이스를 구현 하는 것입니다. 두 개다 <code class=\"language-text\">public void run()</code> 함수를 구현 해 주어야 한다는 공통점이 있습니다.</p>\n<p><code class=\"language-text\">Thread</code>를 실행 하기 위해서는 <code class=\"language-text\">thread.start()</code> 메서드를 호출 해 주어야 합니다. 왜 <code class=\"language-text\">run()</code>을 구현 하였는데  <code class=\"language-text\">start()</code>를 호출 하는가? 에 대해서 의문을 가지실 수 있습니다. <code class=\"language-text\">start()</code>는 <strong>새로운 쓰레드를 생성</strong>하고, 쓰레드가 작업 하는 데 사용될 <strong>Call Stack을 생성</strong>, 해당 <strong>Call Stack</strong>에 <code class=\"language-text\">run()</code> 을 호출하여 사용합니다. 이제 <code class=\"language-text\">main()</code> 을 실행 시키는 <strong>main thread</strong>와, 우리가 새로 만든 <strong>thread</strong>가 존재 하므로, CPU는 이 둘을 오가며 쓰레드를 번갈아 실행 시킵니다.</p>\n<ul>\n<li><code class=\"language-text\">Thread</code> 클래스를 상속 함.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">SimpleThread</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Thread</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> number<span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">SimpleThread</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> number<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>number <span class=\"token operator\">=</span> number<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Simple Thread %d Start%n\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Simple Thread %d End%n\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">SimpleThread</span> simpleThread <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SimpleThread</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            simpleThread<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Main 함수 종료.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">Runnable</code> 인터페이스를 구현 </li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">SimpleThread</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnable</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> number<span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">SimpleThread</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> number<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>number <span class=\"token operator\">=</span> number<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Simple Thread %d Start%n\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Simple Thread %d End%n\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">SimpleThread</span> simpleThread <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SimpleThread</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">Thread</span> thread <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>simpleThread<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Thread 객체를 생성 하여, 인터페이스를 구현한 클래스의 객체를 생성자에 넣어야 함.</span>\n            thread<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Main 함수 종료.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>둘은 똑같은 결과를 보여 줍니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"terminal\"><pre class=\"language-terminal\"><code class=\"language-terminal\">Simple Thread 1 Start\nSimple Thread 5 Start\nSimple Thread 2 Start\nMain 함수 종료.\nSimple Thread 4 Start\nSimple Thread 3 Start\nSimple Thread 4 End\nSimple Thread 5 End\nSimple Thread 1 End\nSimple Thread 3 End\nSimple Thread 2 End</code></pre></div>\n<p>마지막으로 쓰레드를 만드는 방법은 <strong>익명 객체</strong>를 사용 하는 것 입니다. 단, <strong>파라미터</strong>를 사용 하는데 제약이 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">Thread</span> thread <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token annotation punctuation\">@Override</span>\n                <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Simple Thread Start%n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n                        <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Simple Thread End%n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            thread<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Main 함수 종료.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"terminal\"><pre class=\"language-terminal\"><code class=\"language-terminal\">Simple Thread Start\nSimple Thread Start\nMain 함수 종료.\nSimple Thread Start\nSimple Thread Start\nSimple Thread Start\nSimple Thread End\nSimple Thread End\nSimple Thread End\nSimple Thread End\nSimple Thread End</code></pre></div>\n<p><strong>Thread</strong>의 개념에 대해서 모르는 사람들은 다음과 같은 의문을 가질 수 있습니다. <strong>\"아니 분명히 순차적으로 실행해야 하는 데, 왜 이렇게 순서가 뒤죽 박죽이지?\"</strong> 그 이유는 <strong>Thread</strong>는 순서가 존재 하지 않기 때문 입니다. <strong>우선 순위</strong>를 정해 주기 전에는 말입니다. 하지만 <strong>멀티 코어</strong>를 사용 하고 있고, 같은 자원을 공유 하지 않고, 각자의 <strong>Call Stack</strong>에서 해결 할 수 있는 작업이라면, 우선 순위가 있어도 끝나는 시간이 다를 가능성이 높습니다.</p>\n<h3>우선순위 설정 하기</h3>\n<p>일단, 우선 순위를 넣는 방법은 <code class=\"language-text\">thread.start()</code>를 하기 전에 <code class=\"language-text\">thread.setPriority(int value)</code>를 넣는 것 입니다. <code class=\"language-text\">value</code>로 들어 갈 수 있는 값을 1부터 10까지 입니다. 이를 통해서 우리는 <strong>같은 자원</strong>을 사용하는 <strong>Thread</strong> 사이에서, 어떤 <strong>Thread</strong>가 우선적으로 자원을 가져 갈 수 있게 할 것 인지 설정 할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 윗 부분은 생략</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">SimpleThread</span> simpleThread <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SimpleThread</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">Thread</span> thread <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>simpleThread<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Thread 객체를 생성 하여, 인터페이스를 구현한 클래스의 객체를 생성자에 넣어야 함.</span>\n            thread<span class=\"token punctuation\">.</span><span class=\"token function\">setPriority</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            thread<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Main 함수 종료.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>Daemon Thread</h3>\n<p><strong>데몬 스레드</strong>는 메인 스레드의 작업을 돕는 보조적인 역할을 수행 합니다. <strong>기존 스레드</strong>는 <strong>메인 스레드</strong>가 종료 되더라도, 계속 실행되는 반면, <strong>데몬 스레드</strong>는 같이 종료 됩니다. <code class=\"language-text\">thread.setDaemon(true)</code>를 통해 설정 할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 윗 부분은 생략</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">SimpleThread</span> simpleThread <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SimpleThread</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">Thread</span> thread <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>simpleThread<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Thread 객체를 생성 하여, 인터페이스를 구현한 클래스의 객체를 생성자에 넣어야 함.</span>\n            thread<span class=\"token punctuation\">.</span><span class=\"token function\">setDaemon</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            thread<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Main 함수 종료.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"terminal\"><pre class=\"language-terminal\"><code class=\"language-terminal\">Simple Thread 2 Start\nSimple Thread 5 Start\nMain 함수 종료.\nSimple Thread 3 Start\nSimple Thread 4 Start\nSimple Thread 1 Start</code></pre></div>\n<h3>Thread Name</h3>\n<p><code class=\"language-text\">thread.setName(String s)</code>를 통해, <strong>Thread</strong>에 이름을 지정, 디버깅을 편하게 할 수 있습니다. <code class=\"language-text\">Thread.currentThread().getName()</code> 로 현재 쓰레드의 이름을 가져올 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Thread</span> thread1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token annotation punctuation\">@Override</span>\n            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" 실행\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Thread 객체를 생성 하여, 인터페이스를 구현한 클래스의 객체를 생성자에 넣어야 함.</span>\n        <span class=\"token class-name\">Thread</span> thread2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>thread1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        thread1<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1번\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        thread2<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2번\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        thread1<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        thread2<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Main 함수 종료.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"terminal\"><pre class=\"language-terminal\"><code class=\"language-terminal\">Main 함수 종료.\n2번 실행\n1번 실행</code></pre></div>\n<h3>Thread의 실행제어</h3>\n<p><strong>Thread</strong>를 다루기 힘든 이유는 <strong>동기화, 스케쥴링, 상태 제어</strong> 등등 신경 써 줘야 할 것들이 많기 때문입니다. 또한, 쓰레드 프로그래밍을 하면서, <strong>자원 낭비</strong>가 되지 않도록 하는 것도 중요 합니다. 일단, 그 전에 우리는 쓰레드의 상태와 관련 메서드들에 대한 것들을 잘 알아 둘 필요가 있습니다.</p>\n<h4>Thread가 가지는 상태들</h4>\n<p><strong>Thread</strong>는 다음과 같은 상태를 가집니다.</p>\n<ul>\n<li><strong>생성</strong>: <strong>Thread</strong> 객체가 생성 된 상태 입니다. 아직 <code class=\"language-text\">start()</code>가 호출되지 않은 상태 입니다.</li>\n<li><strong>실행 대기</strong>: <code class=\"language-text\">start()</code>가 호출이 된 상태로, 쓰레드에 CPU 코어가 할당 될 때 까지 기다리는 상태입니다.</li>\n<li><strong>실행</strong>: <strong>Thread</strong>가 작업을 진행 하는 상태 입니다.</li>\n<li><strong>일시 정지</strong>: <strong>Thread</strong>의 작업이 종료 되지 않으면서, <strong>동기화 블럭으로 인한 BLOCK 상태, 사용자 입력 대기 등</strong> 여러 가지 이유로 <strong>일시 정지</strong>가 되어, <strong>실행 대기</strong> 상태로 넘어 가지 않은 상태를 일컫습니다.</li>\n<li><strong>소멸</strong>: <strong>Thread</strong>의 작업이 종료 된 상태 입니다.</li>\n</ul>\n<p align=\"center\">\n\t<img src=\"/post_image/cpp-to-java/07-03.png\" width=\"80%\"/>\n</p>\n<h4>Thread가 가지는 상태제어 메서드들</h4>\n<ul>\n<li><code class=\"language-text\">start()</code>: 쓰레드를 <strong>생성</strong> 상태에서, <strong>실행 대기</strong> 상태로 이동 시킵니다.</li>\n<li><code class=\"language-text\">sleep(long mills)</code>: 쓰레드를 <strong>실행</strong> 상태에서, <code class=\"language-text\">mills</code> 밀리 초 만큼 <strong>일시 정지</strong> 상태로 전환 시킵니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 생략</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Simple Thread %d Start%n\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Simple Thread %d End%n\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">interrupt()</code>: 쓰레드의 작업을 취소 합니다. <strong>Sleep</strong> 상태일 경우, 예외가 호출 됩니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Thread</span> thread <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token annotation punctuation\">@Override</span>\n            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token string\">\"초\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"당신은 \"</span> <span class=\"token operator\">+</span> i <span class=\"token operator\">+</span> <span class=\"token string\">\"초 만에 답을 입력 했습니다.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        thread<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">Scanner</span> scanner <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"아무 값이나 입력 해 주세요: \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> input <span class=\"token operator\">=</span> scanner<span class=\"token punctuation\">.</span><span class=\"token function\">nextLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"당신이 입력 하신 값은 \"</span> <span class=\"token operator\">+</span> input <span class=\"token operator\">+</span> <span class=\"token string\">\"입니다.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        thread<span class=\"token punctuation\">.</span><span class=\"token function\">interrupt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"terminal\"><pre class=\"language-terminal\"><code class=\"language-terminal\">아무 값이나 입력 해 주세요: 1초\n2초\n3초\n4초\n5초\n6초\n123\n당신이 입력 하신 값은 123입니다.\n당신은 6초 만에 답을 입력 했습니다.</code></pre></div>\n<ul>\n<li><code class=\"language-text\">yield()</code>: 다음 차례의 쓰레드에게 실행 시간을 양보 합니다. <strong>실행</strong> 상태에서 <strong>실행 대기</strong> 상태로 전환 합니다. 이는 <strong>무조건 쓰레드가 양보함을 보장하지 않으며</strong> 스케쥴러가 <strong>참고 하여 스케쥴링에 있어 이를 고려 합니다.</strong> 이렇게 하는 것이, 현재 많은 자원을 요하는 스레드에 더 많은 자원을 제공 할 수 있도록, 스케줄러에게 도움을 줄 수 있기 때문이죠. 자세한 내용은 <a href=\"https://codingdog.tistory.com/entry/java-yield-%EB%A9%94%EC%84%9C%EB%93%9C-%EC%96%91%EB%B3%B4%ED%95%9C%EB%8B%A4%EB%8A%94-%ED%9E%8C%ED%8A%B8%EB%A5%BC-%EC%A4%80%EB%8B%A4\">해당 블로그</a>를 참조 해 주세요.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 중략</span>\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>stopped<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>suspended<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">yield</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 후략</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">join()</code>: 다른 쓰레드의 작업을 기다립니다. 현재 실행 중인 쓰레드에서, <code class=\"language-text\">join()</code>을 호출한 쓰레드가 종료 될 때 까지 기다립니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">HumanRunnable</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnable</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Thread</span> trafficLight<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">HumanRunnable</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span> trafficLight<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>trafficLight <span class=\"token operator\">=</span> trafficLight<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"신호 대기 중.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            trafficLight<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 신호 대기</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"건너자!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">TrafficLightRunnable</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnable</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"빨간 불...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 신호는 1초...</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"파란 불!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Thread</span> trafficLight <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">TrafficLightRunnable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        trafficLight<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 신호등 쓰레드 시작</span>\n\n        <span class=\"token class-name\">Thread</span> human <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">HumanRunnable</span><span class=\"token punctuation\">(</span>trafficLight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        human<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 사람 쓰레드 시작</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"terminal\"><pre class=\"language-terminal\"><code class=\"language-terminal\">빨간 불...\n신호 대기 중.\n파란 불!\n건너자!</code></pre></div>\n<h4>Synchronized</h4>\n<p>우리는 <strong>여러 쓰레드</strong>가 하나의 자원을 공유 하는 경우를 자주 경험 합니다. 예를 들어서, 통장 잔고를 예시로 들어 보면, <strong>하나 이상의 입금과 출금이 동시에 일어 나는 경우</strong>가 있을 수 있겠죠? 한 계좌의 잔고를 이용하여 덧셈 뺄셈 연산을 할 테니까요. </p>\n<p>다음과 같은 예시를 들어 보겠습니다. 해당 예시는 두개의 쓰레드를 이용하여, 하나의 객체에 대한 뺄셈 연산을 수행 하는 것 입니다. 또한, 잔고는 마이너스 값이 되면 안되므로, <code class=\"language-text\">withdraw(int money)</code>에서 <code class=\"language-text\">money</code>로 들어 간 값이 <code class=\"language-text\">balance</code> 보다 작으면 안됩니다. 실제 서버와의 통신을 가정 하여, <code class=\"language-text\">Thread.sleep()</code>을 걸어 보겠습니다. 두 개의 쓰레드를 이용 하여 해당 코드를 작성 해 보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Account</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> balance <span class=\"token operator\">=</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getBalance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> balance<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">withdraw</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> money<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>balance <span class=\"token operator\">>=</span> money<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>balance <span class=\"token operator\">-=</span> money<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">TestRunnable</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnable</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Account</span> account <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Account</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>account<span class=\"token punctuation\">.</span><span class=\"token function\">getBalance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span> money <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">3</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n            account<span class=\"token punctuation\">.</span><span class=\"token function\">withdraw</span><span class=\"token punctuation\">(</span>money<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"잔고: \"</span> <span class=\"token operator\">+</span> account<span class=\"token punctuation\">.</span><span class=\"token function\">getBalance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Runnable</span> r <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TestRunnable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Thread</span> th1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Thread</span> th2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        th1<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        th2<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"terminal\"><pre class=\"language-terminal\"><code class=\"language-terminal\">잔고: 900\n잔고: 600\n잔고: 400\n잔고: 200\n잔고: 100\n잔고: -100</code></pre></div>\n<p>프로그램이 종료 된 후, 잔고가 마이너스인 것을 미루어 보아, 의도대로 프로그램이 작동 하지 않았음을 알 수 있습니다. 우리는 결과에서 알 수 있듯이 두 개의 쓰레드가 동시에 코드를 실행하여 문제가 발생 했음을 알 수 있습니다. <strong>두 개 이상의 쓰레드가 동시에 제어권을 잡지 않도록 하기 위해선 어떻게 해야 할까요?</strong></p>\n<p>우리는 <code class=\"language-text\">synchronized</code> 를 이용하여, 간단하게 한 쓰레드에서 해당 코드가 실행 될 때, 다른 쓰레드가 간섭하지 못하도록, <strong>동기화</strong>가 되게 끔 구현 할 수 있습니다. <code class=\"language-text\">synchronized</code> 되었다는 것은, 이가 <strong>임계 영역</strong>으로 지정되었다는 것을 의미 합니다. <strong>임계 영역</strong>으로 지정 되었다는 것은, 다른 한 쓰레드가 <strong>임계 영역</strong>이 끝날 때 까지, 건들 수 없음을 의미 합니다. 이러한 상태를 <strong>lock</strong> 상태라고 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 중략</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">synchronized</span> <span class=\"token keyword\">void</span> <span class=\"token function\">withdraw</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> money<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>balance <span class=\"token operator\">>=</span> money<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>balance <span class=\"token operator\">-=</span> money<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 후략</span></code></pre></div>\n<p>한 번 위 코드에 <code class=\"language-text\">synchronized</code>를 적용 해 보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Account</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> balance <span class=\"token operator\">=</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getBalance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> balance<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">synchronized</span> <span class=\"token keyword\">void</span> <span class=\"token function\">withdraw</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> money<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>balance <span class=\"token operator\">>=</span> money<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>balance <span class=\"token operator\">-=</span> money<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">TestRunnable</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnable</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Account</span> account <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Account</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>account<span class=\"token punctuation\">.</span><span class=\"token function\">getBalance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span> money <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">3</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n            account<span class=\"token punctuation\">.</span><span class=\"token function\">withdraw</span><span class=\"token punctuation\">(</span>money<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"잔고: \"</span> <span class=\"token operator\">+</span> account<span class=\"token punctuation\">.</span><span class=\"token function\">getBalance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Runnable</span> r <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TestRunnable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Thread</span> th1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Thread</span> th2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        th1<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        th2<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"terminal\"><pre class=\"language-terminal\"><code class=\"language-terminal\">잔고: 800\n잔고: 600\n잔고: 500\n잔고: 400\n잔고: 100\n잔고: 100\n잔고: 100\n잔고: 0\n잔고: 0  // 반복 출력 되는 이유는 잔고가 0이 될 때 까지 while 문이 돌아가기 때문 입니다.</code></pre></div>\n<p>동작이 잘 되는 것을 확인 할 수 있습니다.</p>\n<h4>wait(), notify()</h4>\n<p>만약 한 쓰레드가 객체에 lock을 걸고 어떤 조건이 만족될 때 까지 기다려야하는 경우, 다른 쓰레드들은 lock이 풀릴 때까지 무한 대기해야 하는 경우가 있습니다. 그런 경우를 방지 하기 위해선, 특정 조건이 만족 될 때 까지 기다려야 하는 쓰레드에서 <code class=\"language-text\">wait()</code> 을 호출 하고, <strong>일시 정지 상태</strong>로 들어간 해당 쓰레드를 깨우기 위해서 <code class=\"language-text\">notify()</code>를 호출하는 경우로 해당 문제를 해결 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Account</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> balance <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getBalance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> balance<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">synchronized</span> <span class=\"token keyword\">void</span> <span class=\"token function\">withdraw</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> money<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>balance <span class=\"token operator\">&lt;</span> money<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token function\">wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>balance <span class=\"token operator\">-=</span> money<span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>money <span class=\"token operator\">+</span> <span class=\"token string\">\"원 출금 성공!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">synchronized</span> <span class=\"token keyword\">void</span> <span class=\"token function\">deposit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> money<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>money <span class=\"token operator\">+</span> <span class=\"token string\">\"원 입금 중...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>balance <span class=\"token operator\">+=</span> money<span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>money <span class=\"token operator\">+</span> <span class=\"token string\">\"원 입금 성공! / 현재 잔고: \"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>balance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">notify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">WithDrawRunnable</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnable</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Account</span> account<span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">WithDrawRunnable</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Account</span> account<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>account <span class=\"token operator\">=</span> account<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        account<span class=\"token punctuation\">.</span><span class=\"token function\">withdraw</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">DepositRunnable</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnable</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Account</span> account<span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">DepositRunnable</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Account</span> account<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>account <span class=\"token operator\">=</span> account<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        account<span class=\"token punctuation\">.</span><span class=\"token function\">deposit</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        account<span class=\"token punctuation\">.</span><span class=\"token function\">deposit</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        account<span class=\"token punctuation\">.</span><span class=\"token function\">deposit</span><span class=\"token punctuation\">(</span><span class=\"token number\">300</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        account<span class=\"token punctuation\">.</span><span class=\"token function\">deposit</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Account</span> account <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Account</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Thread</span> th1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">WithDrawRunnable</span><span class=\"token punctuation\">(</span>account<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Thread</span> th2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">DepositRunnable</span><span class=\"token punctuation\">(</span>account<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        th1<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        th2<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"terminal\"><pre class=\"language-terminal\"><code class=\"language-terminal\">100원 입금 중...\n100원 입금 성공! / 현재 잔고: 100\n200원 입금 중...\n200원 입금 성공! / 현재 잔고: 300\n300원 입금 중...\n300원 입금 성공! / 현재 잔고: 600\n400원 입금 중...\n400원 입금 성공! / 현재 잔고: 1000\n1000원 출금 성공!</code></pre></div>\n<h3>마치며</h3>\n<p>다음 시간에는 <strong>Java</strong>의 <strong>자료 구조</strong>들을 다루는 <code class=\"language-text\">Collections</code> 패키지에 대해서 알아 보는 시간을 가져 보겠습니다.</p>","id":"237db748-7a57-518a-be02-be71d2872cb5","frontmatter":{"date":"2022-01-20","path":"/java/cpp-to-java-7","title":"[C++ to Java] 7. Thread 기초","tags":["Java"],"keyword":"Java, c++ to java, java lang, java thread, java 쓰레드, 자바 쓰레드, 자바 thread","summary":"Java Thread 기초에 대해 알아보자.","img":"/post_image/cpp-to-java/07-01.jpeg","series":"C++ to Java"}}},"pageContext":{"series":{"data":{"allMarkdownRemark":{"edges":[{"node":{"id":"8e597aee-d5a7-5b8e-98bb-5e90921a69a5","excerpt":"Java Stream…","frontmatter":{"date":"2022-01-31","tags":["Java"],"path":"/java/cpp-to-java-10","title":"[C++ to Java] 10. Stream","img":"/post_image/cpp-to-java/10-01.jpeg","summary":"Java Stream에 대해 알아보자."}}},{"node":{"id":"2616ed81-b682-57eb-b686-405eb08fdcb7","excerpt":"Generic, Enum, Lambda 안녕하세요? 오늘은 중요하지만, 한 번에 다루기에 애매했던 토픽들에 대해서 배워 보고자 합니다. Generic Generic은 C++ 에서의 Template와 같은 역할을 합니다. 타입 변수를 받아, 이에 맞는 지네릭 클래스를 만들 수 있습니다. 문법은 C…","frontmatter":{"date":"2022-01-26","tags":["Java"],"path":"/java/cpp-to-java-9","title":"[C++ to Java] 9. Generic, Enum, Lambda","img":"/post_image/cpp-to-java/09-01.jpeg","summary":"여태 다루지 못한 것들에 대해 한번 다뤄보자."}}},{"node":{"id":"76620abd-20f0-5e76-b910-85c057e48f78","excerpt":"Java Collections 안녕하세요? JustKode 입니다. 우리는 프로그래밍을 하며, 동일한 규격을 가진 수 많은 데이터를 다루는 경우가 있습니다. 그럴 때 우리는 배열을 주로 사용 합니다. 하지만, 자료 구조를 배웠다면 알겠지만, 배열로는 수 많은 데이터를 다루기에는 부족하다는 것을 알 수 있습니다. Java에서는 자료들을 쉽게 관리 하기 위해 제공하는 패키지,  가 있습니다. 대표적으로 3가지 Interface로 나뉩니다. List…","frontmatter":{"date":"2022-01-23","tags":["Java"],"path":"/java/cpp-to-java-8","title":"[C++ to Java] 8. Collections","img":"/post_image/cpp-to-java/08-01.jpeg","summary":"Java Collections에 대해 알아보자."}}},{"node":{"id":"237db748-7a57-518a-be02-be71d2872cb5","excerpt":"Thread Thread는 운영체제에서, 프로세스 실행 단위를 일컫습니다. 하나의 프로세스가 한 개 이상의 쓰레드를 가지며, 다수의 Thread…","frontmatter":{"date":"2022-01-20","tags":["Java"],"path":"/java/cpp-to-java-7","title":"[C++ to Java] 7. Thread 기초","img":"/post_image/cpp-to-java/07-01.jpeg","summary":"Java Thread 기초에 대해 알아보자."}}},{"node":{"id":"351ee41f-cf86-5d48-bbce-7d0af7a0d11d","excerpt":"Java의 기존 패키지들 안녕하세요? JustKode 입니다. 오늘은 Java의 기본 패키지들에 대해서 알아보는 시간을 가져 보겠습니다. 기본으로  되어 있는  부터 시작해서,  에 있는 패키지까지 알아 보도록 하겠습니다. java.lang.Object 는 Java내에서 모든 Class…","frontmatter":{"date":"2022-01-15","tags":["Java"],"path":"/java/cpp-to-java-6","title":"[C++ to Java] 6. Java.lang 패키지 & 유용한 클래스","img":"/post_image/cpp-to-java/06-01.jpeg","summary":"Java 기본 패키지들에 대해 알아보자."}}},{"node":{"id":"ad93fec2-6628-57ec-822f-c6aa1bf3d2d6","excerpt":"Exceptions 우리는 사용자의 프로그램 오작동이든, 시스템 내부의 예기치 못한 오류든 많은 경우의 예외 사항을 어플리케이션을 운영 하면서 맞게 됩니다. 그러므로 우리는 예외 처리에 대해서 알 필요가 있습니다. 예를 들어 보겠습니다. 만약 계산기 프로그램을 만든다고 가정 하였을 때, 사용자가 어떤 수를…","frontmatter":{"date":"2022-01-11","tags":["Java"],"path":"/java/cpp-to-java-5","title":"[C++ to Java] 5. 예외 처리","img":"/post_image/cpp-to-java/05-01.jpeg","summary":"Java의 예외 처리에 대해 알아보자."}}},{"node":{"id":"870c7cf8-2d34-579b-b36b-63cd3cfa04cd","excerpt":"Package, Import 안녕하세요? Justkode 입니다. 오늘은 Package와 이를 Import 하는 것에 대해 알아 보겠습니다. Package…","frontmatter":{"date":"2022-01-05","tags":["Java"],"path":"/java/cpp-to-java-4","title":"[C++ to Java] 4. Package와 Import","img":"/post_image/cpp-to-java/04-01.png","summary":"패키지와 임포트에 대해 알아보자."}}},{"node":{"id":"c4ca30be-0695-5c97-bab8-4afb285745ac","excerpt":"Inheritance, Polymorphism 안녕하세요? Justkode 입니다. 오늘은 상속, 다형성, 인터페이스에 대해서 알아 보는 시간을 가져 보도록 하겠습니다. 상속 (Inheritance…","frontmatter":{"date":"2021-12-25","tags":["Java"],"path":"/java/cpp-to-java-3","title":"[C++ to Java] 3. 상속, 다형성, 인터페이스","img":"/post_image/cpp-to-java/03-01.jpg","summary":"Java에서의 상속, 다형성에 대해 알아 보자."}}},{"node":{"id":"7773aa16-0eaf-5cb2-9d17-a1b8ff97108c","excerpt":"OOP in Java 안녕하세요! JustKode 입니다. 사실 제목까지 이렇게 분리 하고, 이렇게 이야기 하기도 뭐한게, Java는 Object-Oriented Programming을 위해 태어난 언어이고, 안에서 OOP를 하는 것은 당연한 이야기 이기 때문입니다. 우리는 이번 시간에 Java의 OOP에 대해, C++과 비교하여 제대로 짚고 넘어 가고자 합니다. Pass by Value, Pass by Reference 일단, C…","frontmatter":{"date":"2021-12-23","tags":["Java"],"path":"/java/cpp-to-java-2","title":"[C++ to Java] 2. Object-Oriented Programming","img":"/post_image/cpp-to-java/02-01.png","summary":"Java에서의 OOP에 대해 알아보자."}}},{"node":{"id":"ae69ea36-3945-5432-a41a-3a213a4d9bfa","excerpt":"Hello World! 안녕하세요! JustKode 입니다. 오늘은  패키지에 있는 System Class에 대해서 알아 보겠습니다. 일단  패키지에 대해서 설명 드리자면, Java 프로그래밍에 사용 되는 가장 기본적인 Class들을 모아놓은 패키지로, 를 하지 않아도 사용 가능 합니다. System Class는 JVM을 거쳐 운영체제의 일부 기능을 사용 할 수 있도록 도와주는 클래스입니다. 또한, System Class…","frontmatter":{"date":"2021-12-22","tags":["Java"],"path":"/java/cpp-to-java-1","title":"[C++ to Java] 1. System Class","img":"/post_image/cpp-to-java/01-01.png","summary":"System Class에 대해 알아보자."}}},{"node":{"id":"ca0bb25c-bada-54c8-a6cb-11fafd4cf1f7","excerpt":"C++ to Java 안녕하세요! JustKode 입니다. 살다 보면, 아니 한국에서 개발자로 살다보면 생각 보다, Java를 해야 할 일이 많습니다. Android, Spring, Hadoop, Spark 등, 여러 곳에서 자바는 사용 됩니다. 대부분의 컴퓨터공학과 학생들은 학교 프로그래밍 기초 시간에, C/C++을 많이 배우게 됩니다. 저 같은 경우에도 1학년 때 C++로 프로그래밍을 시작 했습니다. C++ 과 Java…","frontmatter":{"date":"2021-12-15","tags":["Java"],"path":"/java/cpp-to-java-0","title":"[C++ to Java] 0. Orientation","img":"/post_image/cpp-to-java/00-01.jpg","summary":"어쩌다 java를 해야 하는 사람들을 위해"}}}]}}},"categoryPosts":{"data":{"allMarkdownRemark":{"edges":[{"node":{"id":"024f077c-5aae-5764-8e40-6332996a656e","excerpt":"SOLID 원칙 SOLID 원칙은 객체지향 설계에서 지켜줘야 하는 5가지 원칙을 의미 합니다. 우리는 협업을 하면서, 많은 어려움을 봉착 합니다. 분명 기능 1개만 수정 한다고 특정 컴포넌트의 코드를 몇 가지 수정했는데, 이와 연관된 여러 개의 컴포넌트에서 오류를 뱉어 버리는 경우는 개발을 해보신 분들이라면 많이 경험해 봤을 것이라고 생각해요. SRP(Single Responsibility Principle…","frontmatter":{"date":"2022-02-14","tags":["Java"],"path":"/java/solid-pattern","title":"객체지향 개발의 5대 원리, SOLID","img":"/post_image/thumbnail/solid-pattern.jpeg","summary":"객체지향 개발의 5대 원리, SOLID에 대해 알아보자."}}},{"node":{"id":"8e597aee-d5a7-5b8e-98bb-5e90921a69a5","excerpt":"Java Stream…","frontmatter":{"date":"2022-01-31","tags":["Java"],"path":"/java/cpp-to-java-10","title":"[C++ to Java] 10. Stream","img":"/post_image/cpp-to-java/10-01.jpeg","summary":"Java Stream에 대해 알아보자."}}},{"node":{"id":"2616ed81-b682-57eb-b686-405eb08fdcb7","excerpt":"Generic, Enum, Lambda 안녕하세요? 오늘은 중요하지만, 한 번에 다루기에 애매했던 토픽들에 대해서 배워 보고자 합니다. Generic Generic은 C++ 에서의 Template와 같은 역할을 합니다. 타입 변수를 받아, 이에 맞는 지네릭 클래스를 만들 수 있습니다. 문법은 C…","frontmatter":{"date":"2022-01-26","tags":["Java"],"path":"/java/cpp-to-java-9","title":"[C++ to Java] 9. Generic, Enum, Lambda","img":"/post_image/cpp-to-java/09-01.jpeg","summary":"여태 다루지 못한 것들에 대해 한번 다뤄보자."}}},{"node":{"id":"76620abd-20f0-5e76-b910-85c057e48f78","excerpt":"Java Collections 안녕하세요? JustKode 입니다. 우리는 프로그래밍을 하며, 동일한 규격을 가진 수 많은 데이터를 다루는 경우가 있습니다. 그럴 때 우리는 배열을 주로 사용 합니다. 하지만, 자료 구조를 배웠다면 알겠지만, 배열로는 수 많은 데이터를 다루기에는 부족하다는 것을 알 수 있습니다. Java에서는 자료들을 쉽게 관리 하기 위해 제공하는 패키지,  가 있습니다. 대표적으로 3가지 Interface로 나뉩니다. List…","frontmatter":{"date":"2022-01-23","tags":["Java"],"path":"/java/cpp-to-java-8","title":"[C++ to Java] 8. Collections","img":"/post_image/cpp-to-java/08-01.jpeg","summary":"Java Collections에 대해 알아보자."}}}]}}}}},"staticQueryHashes":["234633779","63159454"]}