{"componentChunkName":"component---src-layouts-post-layout-tsx","path":"/computer-science/property-based-test/","result":{"data":{"markdownRemark":{"html":"<p>안녕하세요? 오늘은 <strong>속성 기반 테스트</strong>에 대해서 알아 보도록 하겠습니다.</p>\n<h2>기존 테스트 방식의 문제점</h2>\n<p>기존 테스트 방식인 예제 기반 테스트(Example-Based Test)의 방법은 다음과 같습니다.</p>\n<ul>\n<li><strong>테스트 코드</strong>를 먼저 작성 합니다.</li>\n<li>해당 테스트 코드가 작동 할 수 있게 끔, <strong>구현부</strong>를 작성 합니다.</li>\n<li><strong>구현부</strong> 작성이 완료 되면, <strong>테스트 코드</strong>를 구동 시킵니다.</li>\n<li><strong>테스트 코드</strong>가 구동에 성공하면, 개발 성공!</li>\n</ul>\n<p>하지만, 이는 다음과 같은 문제점을 내재 하고 있습니다.</p>\n<ul>\n<li>예상 하지 못한 <strong>Edge Case</strong>가 발생 할 수 있다.</li>\n<li>우리가 <strong>테스트 코드</strong>를 작성 했기 때문에, <strong>테스트 코드</strong>에 <strong>편향</strong> 된 코드를 작성 할 가능성이 높다.</li>\n</ul>\n<p>하나의 극단적인 예시를 들어 보겠습니다. 다음과 같이, list 내의 최대값과 최소값을 더한 값을 return 하는 테스트 코드를 작성 했다고 가정 하겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">get_max_plus_min</span><span class=\"token punctuation\">(</span>li<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>li<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">min</span><span class=\"token punctuation\">(</span>li<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">assert</span> get_max_plus_min<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">5</span></code></pre></div>\n<p>하지만, 해당 코드는 이렇게 해도 잘 동작 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">get_max_plus_min</span><span class=\"token punctuation\">(</span>li<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>li<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">4</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">5</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">2</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">assert</span> get_max_plus_min<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">5</span>\n    <span class=\"token keyword\">assert</span> get_max_plus_min<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">2</span></code></pre></div>\n<p>우리는 어떤 <strong>Input</strong>과 어떤 <strong>Output</strong>이 주어 지는지 잘 알고 있기 때문에, 이런 극단적인 코드도 작동 하게 할 수 있는 것 입니다.</p>\n<p>그렇기 때문에, 우리는 <strong>논리적인 동작</strong>을 테스트에 반영 할 수 있는 기법이 필요하게 되는 것이지요.</p>\n<h2>속성 기반 테스트</h2>\n<p>속성 기반 테스트 (Property-Based Test)는 함수를 테스트 할 때, 함수를 실행한 결과값의 기반이 아닌, <strong>속성 값을 기반</strong>으로 Assert를 수행 하는 테스팅 방식으로, <strong>결과가 입력 데이터의 어떤 속성을 만족 하여 결과를 만들어 냈는지</strong>를 검증 하는 것이라고 생각하면 됩니다.</p>\n<p>만약 덧셈을 하는 함수를 만든다는 가정을 한다면, 다음과 같은 조건들이 있을 수 있겠군요. (Input으로 a, b가 들어온다는 가정)</p>\n<ul>\n<li>교환 법칙이 성립 하는가? => <code class=\"language-text\">func(a, b) == func(b, a)</code></li>\n<li>겹합 법칙이 성립 하는가? => <code class=\"language-text\">func(a, func(b, b)) == func(a, 2 * b)</code></li>\n</ul>\n<p><strong>a와 b</strong>가 어떤 값이 들어올지는 아무도 모릅니다. 그저, <strong>저 위에 있는 식들이 성립</strong> 하는지 확인 하면 되는 것이죠. 덧셈에서 중요한 원리들을 저희가 검증 하는 거에요.</p>\n<p><strong>속성 기반 테스트</strong>에서 중요한 것은, <strong>함수의 입력과 출력에서, 검증해야 하는 것이 무엇이냐?</strong> 에 집중 하여, <strong>검증해야 하는 논리</strong>에 대해, 이를 <strong>테스트</strong> 하는 것입니다.</p>\n<p>우리가 테스트를 하려고 하는 <strong>중요한 논리</strong>가 무엇인지 알아 내는 것은 난이도가 있는 일이지만, <strong>항상 성립해야 하는 조건을 찾거나, 항상 성립해서는 안되는 조건</strong>을 기반으로 생각 한다면, 답을 찾기가 쉬울 것입니다. 또한, <strong>테스트가 완료 된 부분은 추상화</strong> 하여, 다른 테스트를 수행하는 데 사용 하면, 테스트 코드를 작성 하기가 더욱 쉬울 것 입니다!</p>\n<p>이번엔 <strong>두 개의 Array를 붙이는</strong> 경우에 대해, <strong>테스트 조건</strong>을 한 번 만들어 볼까요? <code class=\"language-text\">(array_a, array_b) => new_array</code></p>\n<ul>\n<li>두 개의 Array를 붙인다면, 길이가 원본 배열 두 개의 합이어야 함. => <code class=\"language-text\">array_a.length + array_b.length == new_array.length</code></li>\n<li>최소 값 원칙 => <code class=\"language-text\">min(min(array_a), min(array_b)) == min(new_array)</code></li>\n<li>최대 값 원칙 => <code class=\"language-text\">max(max(array_a), max(array_b)) == max(new_array)</code></li>\n<li>합 원칙 => <code class=\"language-text\">sum(array_a) + sum(array_b) == sum(new_array)</code></li>\n</ul>\n<p>여기서 <code class=\"language-text\">min</code>, <code class=\"language-text\">max</code> <code class=\"language-text\">sum</code> 같은 경우는 <strong>기본 라이브러리</strong>의 함수 이기 때문에, <strong>테스트가 완료 되었다고 가정</strong>합니다. 그렇기 때문에 따로 검증을 수행 하지는 않습니다.</p>\n<h2>코드 직접 쳐보기</h2>\n<p>이번엔 Python 예시를 만들어 보죠! 일단, pip을 통해 테스트를 위한 <code class=\"language-text\">pytest</code>와, 속성 기반 테스트를 위한 <code class=\"language-text\">hypothesis</code>를 설치 하겠습니다. <strong>hypothesis</strong>에 대한 자세한 내용은 <a href=\"https://hypothesis.readthedocs.io/en/latest/index.html\">공식 Document</a>를 참고 해 주세요!</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ pip <span class=\"token function\">install</span> pytest hypothesis</code></pre></div>\n<p>그 다음, <code class=\"language-text\">test-script.py</code>에 다음과 같은 스크립트를 작성 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> hypothesis <span class=\"token keyword\">import</span> given<span class=\"token punctuation\">,</span> strategies <span class=\"token keyword\">as</span> st\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> y\n\n\n<span class=\"token decorator annotation punctuation\">@given</span><span class=\"token punctuation\">(</span>\n    x<span class=\"token operator\">=</span>st<span class=\"token punctuation\">.</span>integers<span class=\"token punctuation\">(</span>min_value<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> max_value<span class=\"token operator\">=</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># x와 y에 1~500 까지의 random integer를 넣어 Test를 수행 해 줍니다.</span>\n    y<span class=\"token operator\">=</span>st<span class=\"token punctuation\">.</span>integers<span class=\"token punctuation\">(</span>min_value<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> max_value<span class=\"token operator\">=</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">test_add</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">assert</span> add<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> add<span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">assert</span> add<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> add<span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> add<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> y<span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>테스트를 수행 하면, 결과를 확인 할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ pytest test-script.py</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"terminal\"><pre class=\"language-terminal\"><code class=\"language-terminal\">plugins: hypothesis-6.75.6\ncollected 1 item                                                                                                                                      \n\ntest-script.py .                                                                                                                                [100%]\n\n================================================================== 1 passed in 0.37s ==================================================================</code></pre></div>\n<p>다른 언어 같은 경우에도, 구글에서 <strong>[사용 언어] property based test library</strong> 키워드로 검색 하게 되면, 쉽게 찾을 수 있을 것 입니다!</p>","id":"421a1e99-3193-5d20-9ddc-9f12389e1d4c","frontmatter":{"date":"2023-05-29","path":"/computer-science/property-based-test","title":"속성 기반 테스트","tags":["Computer-Science"],"keyword":"testing, property base test, 속성 기반 테스트","summary":"기존 테스트를 보완하는, 속성 기반 테스트를 알아보자.","img":"/post_image/thumbnail/property-based-test.png","series":null}}},"pageContext":{"postPath":"/computer-science/property-based-test","series":{"data":{"allMarkdownRemark":{"edges":[]}}},"categoryPosts":{"data":{"allMarkdownRemark":{"edges":[{"node":{"id":"421a1e99-3193-5d20-9ddc-9f12389e1d4c","excerpt":"안녕하세요? 오늘은 속성 기반 테스트에 대해서 알아 보도록 하겠습니다. 기존 테스트 방식의 문제점 기존 테스트 방식인 예제 기반 테스트(Example-Based Test…","frontmatter":{"date":"2023-05-29","tags":["Computer-Science"],"path":"/computer-science/property-based-test","title":"속성 기반 테스트","img":"/post_image/thumbnail/property-based-test.png","summary":"기존 테스트를 보완하는, 속성 기반 테스트를 알아보자."}}}]}}}}},"staticQueryHashes":["3819017183","63159454"],"slicesMap":{}}