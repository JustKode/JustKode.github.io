{"componentChunkName":"component---src-layouts-python-list-layout-tsx","path":"/python/3","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"id":"3f443640-d594-5f30-9aa4-6e996830b566","excerpt":"우리가 가공한 데이터들을  객체에 녹여 내는 것을 성공 했다고 치겠습니다! 이를 바로  등으로 변환하여 학습을 시도 하면 어떻게 될까요? 만약 feature마다 범위가 1-100, 0-1000…","frontmatter":{"date":"2020-05-03","tags":["Data-Science","Python"],"path":"/data-science/pandas-normalization","title":"Pandas에서 데이터 정규화 하기","img":"https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcTQU34oEynvWRbC1FvDCWj8Rn16cCqypKf8q9LKbI0i1SLWtU9e&usqp=CAU","summary":"데이터 전처리 방법 중 하나인 정규화"}}},{"node":{"id":"ee196dff-4c4c-5d59-bf3c-c4726466fd60","excerpt":"에서 모델의 가중치를 저장하기 위해선 3가지 함수만 알면 충분 합니다. : 객체를 디스크에 저장합니다.  모듈을 이용하여 객체를 직렬화 하며, 이 함수를 사용하여 모든 종류의 모델, Tensor 등을 저장할 수 있습니다. :  모듈을 이용하여 객체를 역직렬화하여 메모리에 할당합니다. : 역직렬화된 state_dict를 사용, 모델의 매개변수들을 불러옵니다. state_dict는 간단히 말해 각 체층을 매개변수 Tensor로 매핑한 Python…","frontmatter":{"date":"2020-04-26","tags":["Deep-Learning","Python"],"path":"/deep-learning/pytorch-save","title":"Pytorch에서 학습한 모델 저장 및 불러오기","img":"/post_image/pytorch-save.png","summary":"Pytorch 모델을 저장하고, 불러와 보기"}}},{"node":{"id":"c684949e-8c6f-5fcc-95be-dd91ebbe3e0e","excerpt":"…","frontmatter":{"date":"2020-04-21","tags":["Python"],"path":"/python/try-except","title":"Python에서 try, except, raise로 예외 처리 하기.","img":"https://media.makeameme.org/created/exceptions-exceptions-everywhere-snh6tb.jpg","summary":"Python에서의 예외 처리 방법"}}},{"node":{"id":"cdf662e2-a4e9-58ba-84d0-e5847182d188","excerpt":"에서는 과 마찬가지로, 과 관련 된 를 제공합니다. 이를 이용해 손쉽게  네트워크를 구축 할 수 있습니다. Recurrent Neural Network 를 위한 는  입니다. 일단  시퀀스의 각 요소에 대해, 각 레이어에서는 다음 연산을 수행합니다.  Parameters : 의 사이즈에 해당 하는 수를 입력하면 됩니다. : 은닉층의 사이즈에 해당 하는 수를 입력하면 됩니다. : 의 은닉층 레이어 갯수를 나타냅니다. 기본 값은…","frontmatter":{"date":"2020-04-19","tags":["Deep-Learning","Python"],"path":"/deep-learning/pytorch-rnn","title":"Pytorch로 RNN, LSTM 구현하기","img":"https://lionbridge.ai/wp-content/uploads/2020/03/2020-02-21_difference-between-cnn-rnn-1.png","summary":"자연어 처리, 감성 분류 등에 사용되는 RNN, LSTM"}}},{"node":{"id":"d7508175-c9f6-50e4-91a9-e95c969f8214","excerpt":"Python Thread 에서는 한 프로세스에서 여러 가지 병렬 처리를 위해 를 구현 할 수 있는 를 제공 합니다. 프로그램을 여러 개로 나누지 않으며 하는 의 장점은 다음과 같습니다. 전역 변수를 이용한 메모리 공유를 통해 효율적인 메모리 사용이 가능 철저한 작업 분리 가능 코드 간결성 하지만, 단점 또한 존재합니다. 디버깅 난이도 상승 구현 난이도 상승 교착 상태가 발생하지 않도록 주의 하여야 함 Thread…","frontmatter":{"date":"2020-04-10","tags":["Python"],"path":"/python/thread","title":"Python으로 Thread 구현하기.","img":"https://i.imgur.com/CRLzESV.png","summary":"Python에서의 병렬처리 방법"}}},{"node":{"id":"4cdc9d08-db94-566b-88e6-c01dc47394f4","excerpt":"CNN In Pytorch 에는 을 개발 하기 위한 들이 있습니다. 다채널로 구현 되어 있는 CNN 신경망을 위한 Layers, Max pooling, Avg pooling 등, 이번 시간에는 여러 가지 을 위한 를 알아 보겠습니다. 또한,  데이터 또한 학습 해 보겠습니다. Convolution Layers  연산을 위한 레이어들은 다음과 같습니다. Conv1d (Text-CNN에서 많이 사용) Conv2d…","frontmatter":{"date":"2020-04-08","tags":["Deep-Learning","Python"],"path":"/deep-learning/pytorch-cnn","title":"Pytorch로 CNN 구현하기","img":"https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/uploads/2019/02/Plot-of-a-Subset-of-Images-from-the-MNIST-Dataset-1024x768.png","summary":"Pytorch로 MNIST 그림 식별을 해보자."}}}]}},"pageContext":{"limit":6,"skip":12,"numPages":4,"currentPage":3}},"staticQueryHashes":["234633779","63159454"]}