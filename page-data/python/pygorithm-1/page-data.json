{"componentChunkName":"component---src-layouts-post-layout-tsx","path":"/python/pygorithm-1","result":{"data":{"markdownRemark":{"html":"<h1>Python으로 알고리즘이라고요?</h1>\n<p><code class=\"language-text\">Python</code>은 좋은 언어 입니다. <strong>코딩하기도 쉽고, 가독성도 좋죠.</strong> 하지만, 그에게 단점이 있다면, <strong>프로그램 속도</strong>일 것입니다. <code class=\"language-text\">C++</code>과 같은 컴파일 언어와 다르게, <code class=\"language-text\">Python</code>은 <strong>인터프리터 언어</strong>이기 때문이죠. 하지만, 요즘 컴퓨터 속도의 발전과 함께, 기업에서 채용을 위한 <strong>코딩 테스트</strong>를 실시 할 때 <code class=\"language-text\">Python</code>으로 코딩 테스트를 보게 해 주는 경우가 많아지고 있습니다. 언어 사용 능력보단 문제 해결 능력이 프로그래밍의 세계에선 더 중요하기 때문이죠.</p>\n<p align=\"center\">\n\t<img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/c/c3/Python-logo-notext.svg/768px-Python-logo-notext.svg.png\" width=\"12%\" />\n\t<p align=\"center\" style=\"color:#888888; font-size: 12px;\">\n\t\tPython도 요즘 코딩 테스트에서 \"인싸\" 언어라구요?\n\t</p>\n</p>\n<p>하지만, <code class=\"language-text\">Python</code>으로 알고리즘을 풀기 전에 유의해야 할 것들이 있습니다. 일단 <code class=\"language-text\">C++</code>로 알고리즘 문제를 풀때, <code class=\"language-text\">cin</code> 객체를 이용 하여 입력을 받는 것보단, <code class=\"language-text\">scanf()</code> 함수를 이용해서 입력을 받는게 더 빠르듯, <code class=\"language-text\">Python</code>도 <strong>알고리즘 문제 해결을 위한 몇 개의 함수들이 존재 합니다.</strong> 또한, <code class=\"language-text\">Python 3</code> 인터프리터를 그대로 사용하는 것보다, <code class=\"language-text\">PyPy3</code>라는 인터프리터를 사용하는게 더 빠른 프로그램 실행에 좋습니다.</p>\n<ul>\n<li><a href=\"https://ko.wikipedia.org/wiki/PyPy\">PyPy 한국 위키 문서</a>\n<br><br></li>\n</ul>\n<h2>입력을 받아보자!</h2>\n<p><code class=\"language-text\">Python</code>을 사용하는 많은 사람들은 <code class=\"language-text\">input()</code> 함수를 통해 입력을 받을 것입니다. 하지만, 우리는 이제 <code class=\"language-text\">sys</code> 모듈과 친해질 것 입니다. <code class=\"language-text\">sys</code> 모듈은 사용자와 컴퓨터, 혹은 파이썬 인터프리터와의 상호 작용들을 도와주는 함수, 변수들을 모아놓은 모듈입니다. 일단, 오늘은 알고리즘 문제를 해결하는 데 필요한 함수들만 사용 할 것입니다. 더 많은 설명들은 <a href=\"https://docs.python.org/ko/3/library/sys.html\">sys 모듈에 관한 Document</a>를 참고해 주세요.\n<br><br></p>\n<h3>sys.stdin.readline()</h3>\n<p>해당 함수는 단, 한줄을 입력 받은 후, 입력 받은 값을 가진 <code class=\"language-text\">str</code> 객체를 반환합니다. <code class=\"language-text\">input()</code> 함수와 기능이 똑같습니다. 여기서 알아 두면 좋은 것은 <code class=\"language-text\">sys.stdin</code>은 <code class=\"language-text\">file</code> 객체와 사용 방법이 똑같습니다. 단지 입력을 인터프리터 내에서 받냐, 파일에서 받냐가 다를 뿐이죠.</p>\n<ul>\n<li>\n<p><code class=\"language-text\">int</code> 객체를 입력 받고 싶을 때</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> sys\nn <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>stdin<span class=\"token punctuation\">.</span>readline<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n<li>\n<p>한 줄에 여러가지 입력이 필요할 때</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> sys\narr <span class=\"token operator\">=</span> sys<span class=\"token punctuation\">.</span>stdin<span class=\"token punctuation\">.</span>readline<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><em>입력이 '1 2 3 4 5' 면 결과는 [\"1\", \"2\", \"3\", \"4\", \"5\"] 가 된다.</em>\n<br><br></p>\n</li>\n</ul>\n<h3>map(function, iterable):</h3>\n<p><code class=\"language-text\">map()</code> 함수는 <code class=\"language-text\">iterable</code> 가능한 객체 내부의 모든 <code class=\"language-text\">element</code>에 특정 작업을 하기 위해서 사용합니다. 특히 <strong>형변환</strong> 시의 속도가 빠릅니다. <code class=\"language-text\">function</code> 파라미터에 <code class=\"language-text\">lambda</code>식을 넣어서 작업을 할 수도 있지만, 이는 나중에 다룰 <code class=\"language-text\">list comprehension</code>이 더 빠릅니다. <code class=\"language-text\">map()</code> 함수는 <code class=\"language-text\">map</code> 객체를 반환하므로, <code class=\"language-text\">list</code> 객체로의 <strong>형변환</strong>을 필요로 합니다.</p>\n<ul>\n<li>\n<p>한 줄에 여러 가지 입력을 받은 후, <code class=\"language-text\">int</code> 객체로의 형 변환이 필요할 때.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> sys\narr <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> sys<span class=\"token punctuation\">.</span>stdin<span class=\"token punctuation\">.</span>readline<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><em>입력이 '1 2 3 4 5' 면 결과는 [1, 2, 3, 4, 5] 가 된다.</em>\n<br><br></p>\n</li>\n</ul>\n<h3>list comprehension</h3>\n<p><code class=\"language-text\">list comprehension</code>은 <code class=\"language-text\">list</code> 객체 선언부에서 <code class=\"language-text\">for</code> 문을 이용하여 객체를 선언하는 것입니다. <code class=\"language-text\">lambda</code> 식으로 처리할 데이터를 <code class=\"language-text\">for</code>문 앞에 그냥 작성 하면 되죠.</p>\n<ul>\n<li>\n<p>한 줄에 여러 가지 입력을 받은 후, 함수를 이용한 데이터 조작이 필요할 때.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> sys\narr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> sys<span class=\"token punctuation\">.</span>stdin<span class=\"token punctuation\">.</span>readline<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p><em>입력이 '1 2 3 4 5' 면 결과는 [3, 5, 7, 9, 11] 가 된다.</em>\n<br><br></p>\n</li>\n</ul>\n<h2>출력을 해보자!</h2>\n<p><code class=\"language-text\">sys.stdin</code>이 <strong>입력</strong>에 관련된 객체라면, 그에 맞는 짝도 있어야 겠지요? <code class=\"language-text\">sys.stdout</code>은 <strong>출력</strong>에 관련된 객체입니다. 사실 <code class=\"language-text\">print()</code> 함수를 그냥 사용해도 속도에는 큰 차이가 없어 무방하지만, 특수한 경우에는 속도 차이가 크게 나는 경우가 있기 때문에, 알아두는 게 좋습니다.\n<br><br></p>\n<h3>sys.stdout.write(str)</h3>\n<p><code class=\"language-text\">print()</code>와 기능은 똑같지만, <strong>주의</strong>해야 할 점 두 가지가 있다면, 첫 번째는 <code class=\"language-text\">str</code> 객체로의 <strong>형변환</strong>이 필수라는 것, 두 번째는 <code class=\"language-text\">print()</code> 함수 처럼 자동으로 개행 해주는 것이 아닌, <code class=\"language-text\">&#39;/n&#39;</code>을 이용한 <strong>개행</strong>을 해야 한다는 것입니다. 아래 코드의 두 번째, 세 번째 줄은 똑같은 기능을 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> sys\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\nsys<span class=\"token punctuation\">.</span>stdout<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><em>출력</em> <br>\n<em>1</em> <br>\n<em>1</em> <br><br></p>\n<h2>마치며</h2>\n<p>일단 오늘은 <code class=\"language-text\">Python</code>을 이용한, 데이터의 <strong>빠른 입출력</strong>에 대해서 알아 보았습니다. 다음 시간에는 <code class=\"language-text\">Python</code>으로 알고리즘 문제를 해결 할 때 사용 하기 유용한 <strong>내장 모듈과 내장 함수</strong>들에 대해서 알아 보겠습니다. 다음에 뵙겠습니다!</p>","id":"0623b160-6cbc-5c86-98f2-9a56af511710","frontmatter":{"date":"2020-03-21","path":"/python/pygorithm-1","title":"파이썬으로 알고리즘을 풀어보자! - 1. 입문","tags":["Python","Algorithm"],"keyword":"Python, python, 파이썬, Algorithm, algorithm, 알고리즘, Python Algorithm, 파이썬 알고리즘","summary":"Python의 입출력에 대하여","img":"https://miro.medium.com/max/1027/1*Ud_bNdeWPf4iN1EcydaDFA.png","series":"Python Algorithm"}}},"pageContext":{"series":{"data":{"allMarkdownRemark":{"edges":[{"node":{"id":"e9286bad-e1ad-5cfa-93ee-63d6e09aaa00","excerpt":"최단 경로 알고리즘은 지하철 노선도, 네비게이션 등 다방면에 사용되는 알고리즘입니다. 이번 시간에는 Python을 이용해 하나의 시작 정점으로 부터 모든 다른 정점까지의 최단 경로를 찾는 최단 경로 알고리즘인 다익스트라(dijkstra…","frontmatter":{"date":"2020-05-31","tags":["Python","Algorithm"],"path":"/algorithm/python-dijkstra","title":"Python으로 다익스트라(dijkstra) 알고리즘 구현하기","img":"https://ever-line.co.kr/images/use-1-2_img.png","summary":"최단 경로를 찾아보자"}}},{"node":{"id":"2844e887-0d70-507e-9559-6c96b24ceae4","excerpt":"Python, Algorithm, Tips…","frontmatter":{"date":"2020-03-27","tags":["Python","Algorithm"],"path":"/python/pygorithm-3","title":"파이썬으로 알고리즘을 풀어보자! - 3. 팁","img":"https://miro.medium.com/max/1027/1*Ud_bNdeWPf4iN1EcydaDFA.png","summary":"Python, Algorithm, Tips"}}},{"node":{"id":"cde60057-e4a1-5592-99d3-3d4739fb3b4b","excerpt":"Python…","frontmatter":{"date":"2020-03-22","tags":["Python","Algorithm"],"path":"/python/pygorithm-2","title":"파이썬으로 알고리즘을 풀어보자! - 2. 모듈","img":"https://miro.medium.com/max/1027/1*Ud_bNdeWPf4iN1EcydaDFA.png","summary":"Python의 내장 함수와 모듈"}}},{"node":{"id":"0623b160-6cbc-5c86-98f2-9a56af511710","excerpt":"Python…","frontmatter":{"date":"2020-03-21","tags":["Python","Algorithm"],"path":"/python/pygorithm-1","title":"파이썬으로 알고리즘을 풀어보자! - 1. 입문","img":"https://miro.medium.com/max/1027/1*Ud_bNdeWPf4iN1EcydaDFA.png","summary":"Python의 입출력에 대하여"}}}]}}},"categoryPosts":{"data":{"allMarkdownRemark":{"edges":[{"node":{"id":"f3e43e6f-5d36-5239-b7ec-ee45747150bd","excerpt":"AWS S3 안녕하세요? Justkode 입니다. 이번 시간에는 AWS S3에 대해서 알아 보고, AWS S3 버킷 생성, 파일 접근 권한 설정, Python 코드 상에서의 접근을 해 보도록 하겠습니다. 일단 AWS S3에 대해서 간단하게 설명 드리겠습니다. AWS S…","frontmatter":{"date":"2021-07-16","tags":["Cloud-Computing","Python"],"path":"/data-science/just-cloud-computing-2","title":"[찍먹 Cloud Computing] 2. AWS S3","img":"/post_image/thumbnail/just-cloud-computing-2.jpg","summary":"AWS S3와 boto3를 사용 해 보자"}}},{"node":{"id":"34bde66e-39b6-5ac2-952f-abfac8af008b","excerpt":"SQL 안녕하세요? Justkode 입니다. 오늘은 SQL에 대해서 간단하게 알아보는 시간을 가져보도록 하겠습니다. SQL은 Structured Query Language의 약자로, RDBMS의 데이터베이스를 주로 조회 하는데에 사용이 되는, 데이터베이스 관리 시스템(RDBMS)의 데이터를 관리하기 위해 설계된 특수 목적의 프로그래밍 언어입니다. 여기서 설명 하는 문법들은 많은 내용을 담지 않고, SQL…","frontmatter":{"date":"2021-07-11","tags":["Data-Science","Python"],"path":"/data-science/just-data-science-4","title":"[찍먹 Data Science] 4. SQL","img":"/post_image/thumbnail/just-data-science-4.jpg","summary":"SQL의 기본 문법에 대해 알아보자."}}},{"node":{"id":"a665dba1-d8d4-5bbe-98cd-1b8e95514c3d","excerpt":"Matplotlib 안녕하세요? Justkode 입니다. 오늘은 Matplotlib에 대해서 알아보는 시간을 가져보도록 하겠습니다. Matplotlib는 데이터 분석을 위해 만들어진 라이브러리로 Numpy, Pandas…","frontmatter":{"date":"2021-07-08","tags":["Data-Science","Python"],"path":"/data-science/just-data-science-3","title":"[찍먹 Data Science] 3. Matplotlib","img":"/post_image/thumbnail/just-data-science-3.jpeg","summary":"데이터 시각화 모듈, Matplotlib을 알아보자."}}},{"node":{"id":"9862b423-afa3-554a-8393-711ad503873f","excerpt":"Pandas 안녕하세요? Justkode 입니다. 오늘은 Pandas에 대해서 심층있게 알아보는 시간을 가져보도록 하겠습니다. Pandas는 데이터 분석을 위해 만들어진 라이브러리로 Numpy와 함께 많이 사용 됩니다. 주로 사용하는 데이터 구조는 Dataframe과 Series로, Table 정보와 같은 데이터를 처리 하는데 이점이 있습니다. Series and DataFrame 첫 번째로 Series입니다. Series는…","frontmatter":{"date":"2021-07-04","tags":["Data-Science","Python"],"path":"/data-science/just-data-science-2","title":"[찍먹 Data Science] 2. Pandas","img":"/post_image/thumbnail/just-data-science-2.jpg","summary":"데이터 분석에 쓰이는 Pandas를 알아보자."}}}]}}}}},"staticQueryHashes":["234633779","63159454"]}