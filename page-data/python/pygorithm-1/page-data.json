{"componentChunkName":"component---src-layouts-post-layout-tsx","path":"/python/pygorithm-1","result":{"data":{"markdownRemark":{"html":"<h1>Python으로 알고리즘이라고요?</h1>\n<p><code class=\"language-text\">Python</code>은 좋은 언어 입니다. <strong>코딩하기도 쉽고, 가독성도 좋죠.</strong> 하지만, 그에게 단점이 있다면, <strong>프로그램 속도</strong>일 것입니다. <code class=\"language-text\">C++</code>과 같은 컴파일 언어와 다르게, <code class=\"language-text\">Python</code>은 <strong>인터프리터 언어</strong>이기 때문이죠. 하지만, 요즘 컴퓨터 속도의 발전과 함께, 기업에서 채용을 위한 <strong>코딩 테스트</strong>를 실시 할 때 <code class=\"language-text\">Python</code>으로 코딩 테스트를 보게 해 주는 경우가 많아지고 있습니다. 언어 사용 능력보단 문제 해결 능력이 프로그래밍의 세계에선 더 중요하기 때문이죠.</p>\n<p align=\"center\">\n\t<img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/c/c3/Python-logo-notext.svg/768px-Python-logo-notext.svg.png\" width=\"12%\" />\n\t<p align=\"center\" style=\"color:#888888; font-size: 12px;\">\n\t\tPython도 요즘 코딩 테스트에서 \"인싸\" 언어라구요?\n\t</p>\n</p>\n<p>하지만, <code class=\"language-text\">Python</code>으로 알고리즘을 풀기 전에 유의해야 할 것들이 있습니다. 일단 <code class=\"language-text\">C++</code>로 알고리즘 문제를 풀때, <code class=\"language-text\">cin</code> 객체를 이용 하여 입력을 받는 것보단, <code class=\"language-text\">scanf()</code> 함수를 이용해서 입력을 받는게 더 빠르듯, <code class=\"language-text\">Python</code>도 <strong>알고리즘 문제 해결을 위한 몇 개의 함수들이 존재 합니다.</strong> 또한, <code class=\"language-text\">Python 3</code> 인터프리터를 그대로 사용하는 것보다, <code class=\"language-text\">PyPy3</code>라는 인터프리터를 사용하는게 더 빠른 프로그램 실행에 좋습니다.</p>\n<ul>\n<li><a href=\"https://ko.wikipedia.org/wiki/PyPy\">PyPy 한국 위키 문서</a>\n<br><br></li>\n</ul>\n<h2>입력을 받아보자!</h2>\n<p><code class=\"language-text\">Python</code>을 사용하는 많은 사람들은 <code class=\"language-text\">input()</code> 함수를 통해 입력을 받을 것입니다. 하지만, 우리는 이제 <code class=\"language-text\">sys</code> 모듈과 친해질 것 입니다. <code class=\"language-text\">sys</code> 모듈은 사용자와 컴퓨터, 혹은 파이썬 인터프리터와의 상호 작용들을 도와주는 함수, 변수들을 모아놓은 모듈입니다. 일단, 오늘은 알고리즘 문제를 해결하는 데 필요한 함수들만 사용 할 것입니다. 더 많은 설명들은 <a href=\"https://docs.python.org/ko/3/library/sys.html\">sys 모듈에 관한 Document</a>를 참고해 주세요.\n<br><br></p>\n<h3>sys.stdin.readline()</h3>\n<p>해당 함수는 단, 한줄을 입력 받은 후, 입력 받은 값을 가진 <code class=\"language-text\">str</code> 객체를 반환합니다. <code class=\"language-text\">input()</code> 함수와 기능이 똑같습니다. 여기서 알아 두면 좋은 것은 <code class=\"language-text\">sys.stdin</code>은 <code class=\"language-text\">file</code> 객체와 사용 방법이 똑같습니다. 단지 입력을 인터프리터 내에서 받냐, 파일에서 받냐가 다를 뿐이죠.</p>\n<ul>\n<li>\n<p><code class=\"language-text\">int</code> 객체를 입력 받고 싶을 때</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> sys\nn <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>stdin<span class=\"token punctuation\">.</span>readline<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n<li>\n<p>한 줄에 여러가지 입력이 필요할 때</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> sys\narr <span class=\"token operator\">=</span> sys<span class=\"token punctuation\">.</span>stdin<span class=\"token punctuation\">.</span>readline<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><em>입력이 '1 2 3 4 5' 면 결과는 [\"1\", \"2\", \"3\", \"4\", \"5\"] 가 된다.</em>\n<br><br></p>\n</li>\n</ul>\n<h3>map(function, iterable):</h3>\n<p><code class=\"language-text\">map()</code> 함수는 <code class=\"language-text\">iterable</code> 가능한 객체 내부의 모든 <code class=\"language-text\">element</code>에 특정 작업을 하기 위해서 사용합니다. 특히 <strong>형변환</strong> 시의 속도가 빠릅니다. <code class=\"language-text\">function</code> 파라미터에 <code class=\"language-text\">lambda</code>식을 넣어서 작업을 할 수도 있지만, 이는 나중에 다룰 <code class=\"language-text\">list comprehension</code>이 더 빠릅니다. <code class=\"language-text\">map()</code> 함수는 <code class=\"language-text\">map</code> 객체를 반환하므로, <code class=\"language-text\">list</code> 객체로의 <strong>형변환</strong>을 필요로 합니다.</p>\n<ul>\n<li>\n<p>한 줄에 여러 가지 입력을 받은 후, <code class=\"language-text\">int</code> 객체로의 형 변환이 필요할 때.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> sys\narr <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> sys<span class=\"token punctuation\">.</span>stdin<span class=\"token punctuation\">.</span>readline<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><em>입력이 '1 2 3 4 5' 면 결과는 [1, 2, 3, 4, 5] 가 된다.</em>\n<br><br></p>\n</li>\n</ul>\n<h3>list comprehension</h3>\n<p><code class=\"language-text\">list comprehension</code>은 <code class=\"language-text\">list</code> 객체 선언부에서 <code class=\"language-text\">for</code> 문을 이용하여 객체를 선언하는 것입니다. <code class=\"language-text\">lambda</code> 식으로 처리할 데이터를 <code class=\"language-text\">for</code>문 앞에 그냥 작성 하면 되죠.</p>\n<ul>\n<li>\n<p>한 줄에 여러 가지 입력을 받은 후, 함수를 이용한 데이터 조작이 필요할 때.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> sys\narr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> sys<span class=\"token punctuation\">.</span>stdin<span class=\"token punctuation\">.</span>readline<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p><em>입력이 '1 2 3 4 5' 면 결과는 [3, 5, 7, 9, 11] 가 된다.</em>\n<br><br></p>\n</li>\n</ul>\n<h2>출력을 해보자!</h2>\n<p><code class=\"language-text\">sys.stdin</code>이 <strong>입력</strong>에 관련된 객체라면, 그에 맞는 짝도 있어야 겠지요? <code class=\"language-text\">sys.stdout</code>은 <strong>출력</strong>에 관련된 객체입니다. 사실 <code class=\"language-text\">print()</code> 함수를 그냥 사용해도 속도에는 큰 차이가 없어 무방하지만, 특수한 경우에는 속도 차이가 크게 나는 경우가 있기 때문에, 알아두는 게 좋습니다.\n<br><br></p>\n<h3>sys.stdout.write(str)</h3>\n<p><code class=\"language-text\">print()</code>와 기능은 똑같지만, <strong>주의</strong>해야 할 점 두 가지가 있다면, 첫 번째는 <code class=\"language-text\">str</code> 객체로의 <strong>형변환</strong>이 필수라는 것, 두 번째는 <code class=\"language-text\">print()</code> 함수 처럼 자동으로 개행 해주는 것이 아닌, <code class=\"language-text\">&#39;/n&#39;</code>을 이용한 <strong>개행</strong>을 해야 한다는 것입니다. 아래 코드의 두 번째, 세 번째 줄은 똑같은 기능을 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> sys\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\nsys<span class=\"token punctuation\">.</span>stdout<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><em>출력</em> <br>\n<em>1</em> <br>\n<em>1</em> <br><br></p>\n<h2>마치며</h2>\n<p>일단 오늘은 <code class=\"language-text\">Python</code>을 이용한, 데이터의 <strong>빠른 입출력</strong>에 대해서 알아 보았습니다. 다음 시간에는 <code class=\"language-text\">Python</code>으로 알고리즘 문제를 해결 할 때 사용 하기 유용한 <strong>내장 모듈과 내장 함수</strong>들에 대해서 알아 보겠습니다. 다음에 뵙겠습니다!</p>","id":"e19fe602-2f72-5872-b3c1-453adbbe61bf","frontmatter":{"date":"2020-03-21","path":"/python/pygorithm-1","title":"파이썬으로 알고리즘을 풀어보자! - 1. 입문","tags":["Python","Algorithm"],"keyword":"Python, python, 파이썬, Algorithm, algorithm, 알고리즘, Python Algorithm, 파이썬 알고리즘","summary":"Python의 입출력에 대하여","img":"https://miro.medium.com/max/1027/1*Ud_bNdeWPf4iN1EcydaDFA.png","series":"Python Algorithm"}}},"pageContext":{"series":{"data":{"allMarkdownRemark":{"edges":[{"node":{"id":"3f42e43d-c1df-5929-bf44-7dbab0bfa1f2","excerpt":"최단 경로 알고리즘은 지하철 노선도, 네비게이션 등 다방면에 사용되는 알고리즘입니다. 이번 시간에는 Python을 이용해 하나의 시작 정점으로 부터 모든 다른 정점까지의 최단 경로를 찾는 최단 경로 알고리즘인 다익스트라(dijkstra…","frontmatter":{"date":"2020-05-31","tags":["Python","Algorithm"],"path":"/algorithm/python-dijkstra","title":"Python으로 다익스트라(dijkstra) 알고리즘 구현하기","img":"https://ever-line.co.kr/images/use-1-2_img.png","summary":"최단 경로를 찾아보자"}}},{"node":{"id":"90dc1d5c-c9c4-5f32-8680-58ad66638ded","excerpt":"Python, Algorithm, Tips…","frontmatter":{"date":"2020-03-27","tags":["Python","Algorithm"],"path":"/python/pygorithm-3","title":"파이썬으로 알고리즘을 풀어보자! - 3. 팁","img":"https://miro.medium.com/max/1027/1*Ud_bNdeWPf4iN1EcydaDFA.png","summary":"Python, Algorithm, Tips"}}},{"node":{"id":"2785be5e-423f-5687-9250-7910221425fa","excerpt":"Python…","frontmatter":{"date":"2020-03-22","tags":["Python","Algorithm"],"path":"/python/pygorithm-2","title":"파이썬으로 알고리즘을 풀어보자! - 2. 모듈","img":"https://miro.medium.com/max/1027/1*Ud_bNdeWPf4iN1EcydaDFA.png","summary":"Python의 내장 함수와 모듈"}}},{"node":{"id":"e19fe602-2f72-5872-b3c1-453adbbe61bf","excerpt":"Python…","frontmatter":{"date":"2020-03-21","tags":["Python","Algorithm"],"path":"/python/pygorithm-1","title":"파이썬으로 알고리즘을 풀어보자! - 1. 입문","img":"https://miro.medium.com/max/1027/1*Ud_bNdeWPf4iN1EcydaDFA.png","summary":"Python의 입출력에 대하여"}}}]}}},"categoryPosts":{"data":{"allMarkdownRemark":{"edges":[{"node":{"id":"003792ad-8b6f-54a2-b695-a83c358d53dd","excerpt":"…","frontmatter":{"date":"2020-06-13","tags":["Machine Learning","Python"],"path":"/machine_learning/linear_model","title":"Python으로 알아보는 선형 회귀","img":"https://miro.medium.com/max/683/1*h6PuI6-PdPE8d4dTnhcg3w.png","summary":"scikit-learn으로 알아보는 Linear Regression"}}},{"node":{"id":"3f42e43d-c1df-5929-bf44-7dbab0bfa1f2","excerpt":"최단 경로 알고리즘은 지하철 노선도, 네비게이션 등 다방면에 사용되는 알고리즘입니다. 이번 시간에는 Python을 이용해 하나의 시작 정점으로 부터 모든 다른 정점까지의 최단 경로를 찾는 최단 경로 알고리즘인 다익스트라(dijkstra…","frontmatter":{"date":"2020-05-31","tags":["Python","Algorithm"],"path":"/algorithm/python-dijkstra","title":"Python으로 다익스트라(dijkstra) 알고리즘 구현하기","img":"https://ever-line.co.kr/images/use-1-2_img.png","summary":"최단 경로를 찾아보자"}}},{"node":{"id":"29546be3-1a03-54d6-9b13-9d89593d3d63","excerpt":"우리가 가공한 데이터들을  객체에 녹여 내는 것을 성공 했다고 치겠습니다! 이를 바로  등으로 변환하여 학습을 시도 하면 어떻게 될까요? 만약 feature마다 범위가 1-100, 0-1000…","frontmatter":{"date":"2020-05-03","tags":["Data-Science","Python"],"path":"/data-science/pandas-normalization","title":"Pandas에서 데이터 정규화 하기","img":"https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcTQU34oEynvWRbC1FvDCWj8Rn16cCqypKf8q9LKbI0i1SLWtU9e&usqp=CAU","summary":"데이터 전처리 방법 중 하나인 정규화"}}},{"node":{"id":"3e5a78d9-ea4d-5a77-a082-281403358a61","excerpt":"에서 모델의 가중치를 저장하기 위해선 3가지 함수만 알면 충분 합니다. : 객체를 디스크에 저장합니다.  모듈을 이용하여 객체를 직렬화 하며, 이 함수를 사용하여 모든 종류의 모델, Tensor 등을 저장할 수 있습니다. :  모듈을 이용하여 객체를 역직렬화하여 메모리에 할당합니다. : 역직렬화된 state_dict를 사용, 모델의 매개변수들을 불러옵니다. state_dict는 간단히 말해 각 체층을 매개변수 Tensor로 매핑한 Python…","frontmatter":{"date":"2020-04-26","tags":["Deep-Learning","Python"],"path":"/deep-learning/pytorch-save","title":"Pytorch에서 학습한 모델 저장 및 불러오기","img":"/post_image/pytorch-save.png","summary":"Pytorch 모델을 저장하고, 불러와 보기"}}}]}}}}}}