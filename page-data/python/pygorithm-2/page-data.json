{"componentChunkName":"component---src-layouts-post-layout-tsx","path":"/python/pygorithm-2","result":{"data":{"markdownRemark":{"html":"<h1>Python의 내장 함수, 모듈들.</h1>\n<p><code class=\"language-text\">Python</code>에는 많은 <strong>내장 함수들과 모듈</strong>들이 있습니다. 이는 많은 경우에 사용자가 직접 만든 것들보다 빠르며, 사용도 간편합니다. 특히 알고리즘 문제를 해결할 때에도 매우 유용합니다. 많은 <strong>자료 구조들</strong>을 제공하며, 문제를 해결하는데 최소한의 시간 복잡도로 문제들을 해결 해 줍니다. <code class=\"language-text\">C++</code>의 <code class=\"language-text\">STL(Standard Template Library)</code> 같은 느낌으로 생각하면 되겠습니다. 또한, 자료 구조 뿐만 아니라, 최대 공약수, 최댓값, 최솟값, 팩토리얼 값들을 구해주는 <strong>여러 가지 함수</strong>들을 제공 해 줍니다. <br><br></p>\n<h2>Data Structure</h2>\n<p>알고리즘 문제를 해결 하는데 <strong>자료 구조</strong>는 매우 중요한 역할을 합니다. 어떤 문제에 어떤 자료 구조를 쓰느냐에 따라 <strong>시간 복잡도</strong>는 천차 만별이기 때문입니다. 그 뿐만 아니라, 특정 알고리즘 문제는 <strong>특정 자료 구조</strong> 로만 시간 내에 해결 할 수 있기 때문에, <code class=\"language-text\">Python</code>에 있는 여러 가지 자료 구조들에 대한 이해는 알고리즘 문제를 해결 하는데에 <strong>필수적</strong>입니다. <br><br></p>\n<h3>deque</h3>\n<p><code class=\"language-text\">deque</code>는 양방향 큐로, <strong>큐</strong>로도 사용 가능하고, <strong>스택</strong>으로도 사용 가능하고, <strong>양방향 큐</strong>로도 사용 가능합니다. <code class=\"language-text\">collections</code> 모듈에 있으며, <code class=\"language-text\">deque</code> 객체의 더 많은 <code class=\"language-text\">method</code>들이 궁금하면 해당 <a href=\"https://docs.python.org/3.7/library/collections.html#collections.deque\">Python Document</a>에서 확인 해 주시기 바랍니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> collections <span class=\"token keyword\">import</span> deque\n\nd <span class=\"token operator\">=</span> deque<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\nd<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\t\t\t\t\t<span class=\"token comment\"># deque의 오른쪽에 4를 더함.</span>\nd<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\t\t\t\t\t<span class=\"token comment\"># deque의 왼쪽에 0을 더함.</span>\nd<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\t\t\t\t\t\t<span class=\"token comment\"># deque의 가장 오른쪽 값을 지우고 반환함.</span>\nd<span class=\"token punctuation\">.</span>popleft<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\t\t\t\t\t<span class=\"token comment\"># deque의 가장 왼쪽 값을 지우고 반환함.</span>\nd<span class=\"token punctuation\">.</span>extend<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\t\t\t<span class=\"token comment\"># deque의 오른쪽에 iterable 한 객체의 원소들을 더함.</span>\nd<span class=\"token punctuation\">.</span>extendleft<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\t<span class=\"token comment\"># deque의 왼쪽에 iterable 한 객체의 원소들을 더함.</span>\nd<span class=\"token punctuation\">.</span>reverse<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\t\t\t\t\t<span class=\"token comment\"># deque의 원소들의 순서를 뒤집음.</span>\nd<span class=\"token punctuation\">.</span>rotate<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\t\t\t\t\t<span class=\"token comment\"># deque의 원소들의 순서를 한 칸씩 회전 시킴.</span>\nd<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\t\t\t\t\t\t<span class=\"token comment\"># deque의 3번째 원소를 반환함.</span>\nd<span class=\"token punctuation\">.</span>clear<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\t\t\t\t\t<span class=\"token comment\"># deque의 값을 비움.</span></code></pre></div>\n<p><br><br></p>\n<h3>heapq</h3>\n<p><code class=\"language-text\">heapq</code> 모듈은 일반 <code class=\"language-text\">list</code>를 <code class=\"language-text\">heap</code>처럼 사용할 수 있도록 도와주는 모듈입니다. 기본적으로 <code class=\"language-text\">Python</code>에 내장 되어 있는 <code class=\"language-text\">heapq</code> 모듈은 <strong>최소 힙</strong>을 위해 만들어 졌기 때문에 <strong>최대 힙</strong>을 만들기 위해서는 데이터의 처리가 필요합니다. (숫자라면 -를 붙이는 방볍이 대표적입니다.) <strong>우선순위 큐</strong>를 만드는 데에 주로 사용합니다. 삽입, 제거의 시간 복잡도는 <strong>O(log n)</strong> 입니다.<br><br></p>\n<ul>\n<li>아무 것도 없는 <code class=\"language-text\">list</code> 객체에서 <code class=\"language-text\">heap</code> 사용하기.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> heapq\n\nh <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\nheapq<span class=\"token punctuation\">.</span>heappush<span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\t<span class=\"token comment\"># 첫 번째 파라미터에는 list 객체가</span>\nheapq<span class=\"token punctuation\">.</span>heappush<span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">)</span>\t<span class=\"token comment\"># 두 번째 파라미터에는 삽입하려는 객체가 들어간다.</span>\nheapq<span class=\"token punctuation\">.</span>heappush<span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span>\nheapq<span class=\"token punctuation\">.</span>heappush<span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span>\nheapq<span class=\"token punctuation\">.</span>heappush<span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\nheapq<span class=\"token punctuation\">.</span>heappush<span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>heapq<span class=\"token punctuation\">.</span>heappop<span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\t<span class=\"token comment\"># 작은 값부터 출력된다.</span></code></pre></div>\n<br>\n<ul>\n<li><strong>최대 힙</strong> 만들기</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> heapq\n\nh <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\nheapq<span class=\"token punctuation\">.</span>heappush<span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\t<span class=\"token comment\"># 첫 번째 파라미터에는 list 객체가</span>\nheapq<span class=\"token punctuation\">.</span>heappush<span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">9</span><span class=\"token punctuation\">)</span>\t<span class=\"token comment\"># 두 번째 파라미터에는 삽입하려는 객체가 들어간다.</span>\nheapq<span class=\"token punctuation\">.</span>heappush<span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span>\t<span class=\"token comment\"># 단, 원래 넣으려는 값에 -를 붙여주고</span>\nheapq<span class=\"token punctuation\">.</span>heappush<span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span>\t<span class=\"token comment\"># 출력시에도 -을 붙여준다.</span>\nheapq<span class=\"token punctuation\">.</span>heappush<span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\nheapq<span class=\"token punctuation\">.</span>heappush<span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span>heapq<span class=\"token punctuation\">.</span>heappop<span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\t<span class=\"token comment\"># 큰 값부터 출력된다.</span></code></pre></div>\n<br>\n<ul>\n<li>기존에 있는 list 객체로 <strong>힙 정렬</strong> 만들기</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> heapq\n\nh <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span>\nheapq<span class=\"token punctuation\">.</span>heapify<span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">)</span>\t<span class=\"token comment\"># 파라미터로 list 객체를 받는다.</span>\n\n<span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span>heapq<span class=\"token punctuation\">.</span>heappop<span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\t<span class=\"token comment\"># 작은 값부터 출력된다.</span></code></pre></div>\n<p><strong>더 자세한 사용법</strong>은 해당 <a href=\"https://docs.python.org/3.7/library/heapq.html?highlight=heapq#module-heapq\">Python Document</a>에서 확인해 주시기 바랍니다.<br><br></p>\n<h3>Other Data Structure In Python?</h3>\n<p>아쉽게도 <code class=\"language-text\">Python</code> 내장 모듈 중에는 <code class=\"language-text\">Tree</code>, <code class=\"language-text\">Linked List</code>를 구현한 구현체는 없습니다. <strong>직접 만들어야 하죠</strong>.</p>\n<ul>\n<li>파이썬을 사용한 이진 트리 구현 : <a href=\"http://ejklike.github.io/2018/01/09/traversing-a-binary-tree-1.html\">http://ejklike.github.io/2018/01/09/traversing-a-binary-tree-1.html</a></li>\n<li>Python으로 구현하는 자료구조 (Singly Linked List) : <a href=\"https://daimhada.tistory.com/72?category=820522\">https://daimhada.tistory.com/72?category=820522</a></li>\n<li>Python으로 구현하는 자료구조 (Doubly Linked List) : <a href=\"https://daimhada.tistory.com/99?category=820522\">https://daimhada.tistory.com/99?category=820522</a><br><br></li>\n</ul>\n<p>또한, 여러 가지 자료 구조들의 <strong>시간 복잡도</strong>를 궁금해 하시는 분들은 <a href=\"https://wiki.python.org/moin/TimeComplexity\">Time Complexity</a> 문서를 참고 해 주세요!</p>\n<h2>Functions</h2>\n<p><code class=\"language-text\">Python</code> 내부에는 <strong>탐색, 계산, 삽입</strong> 등을 위한 여러 가지 함수들이 있습니다. 알고리즘 문제를 풀 때 필요한 몇 개의 것들만 예시로 보여 드리겠습니다.<br><br></p>\n<h3>bisect</h3>\n<p><code class=\"language-text\">bisect</code> 모듈은 <strong>이미 정렬되어 있는 <code class=\"language-text\">list</code>의 정렬 상태를 유지하기 위해</strong> 사용되는 모듈입니다. 이를 이용해서, 기존에 있는 <code class=\"language-text\">list</code>의 정렬 상태를 유지 할 수 있고, 이를 응용해서 <code class=\"language-text\">Binary Search</code> 또한 구현할 수 있습니다.<br><br></p>\n<ul>\n<li>삽입 되어야 하는 <code class=\"language-text\">index</code> 찾기</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> bisect\narr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>bisect<span class=\"token punctuation\">.</span>bisect_left<span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\"># 6이 들어가야 하는 Index인 6을 반환</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>bisect<span class=\"token punctuation\">.</span>bisect_right<span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># arr에 6이 없기 때문에 위와 똑같은 값을 반환한다.</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>bisect<span class=\"token punctuation\">.</span>bisect_left<span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\"># 중복 되는 값 제일 왼쪽, 2를 반환한다.</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>bisect<span class=\"token punctuation\">.</span>bisect_right<span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 중복 되는 값 제일 오른쪽 + 1, 4를 반환한다.</span>\n\nbisect<span class=\"token punctuation\">.</span>insort_left<span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 중복 되는 값 왼쪽에 삽입</span>\nbisect<span class=\"token punctuation\">.</span>insort_right<span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 중복 되는 값 오른쪽에 삽입</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span></code></pre></div>\n<br>\n<ul>\n<li><code class=\"language-text\">Binary Search</code> 구현</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> bisect <span class=\"token keyword\">import</span> bisect_left \narr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span>\n  \n<span class=\"token keyword\">def</span> <span class=\"token function\">bs</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> \n    i <span class=\"token operator\">=</span> bisect_left<span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span>             <span class=\"token comment\"># 들어가야 하는 '제일 왼쪽' index 반환</span>\n    <span class=\"token keyword\">if</span> i <span class=\"token operator\">!=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span> <span class=\"token keyword\">and</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> x<span class=\"token punctuation\">:</span>   <span class=\"token comment\"># 들어가야 하는 index가</span>\n        <span class=\"token keyword\">return</span> i                        <span class=\"token comment\"># 마지막 index + 1 이라면, arr에 x가 없는 것</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>                               <span class=\"token comment\"># arr[i] == x가 아니라면, arr에 x가 없는 것</span>\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\n  \na  <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">]</span> \nx <span class=\"token operator\">=</span> <span class=\"token number\">4</span>\nres <span class=\"token operator\">=</span> bs<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">if</span> res <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span> \n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token string\">\"는 없습니다!\"</span><span class=\"token punctuation\">)</span> \n<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span> \n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"첫번째\"</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> <span class=\"token string\">\"가 등장한 위치는\"</span><span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span> </code></pre></div>\n<br>\n<p><strong>더 자세한 사용법</strong>은 해당 <a href=\"https://docs.python.org/ko/3/library/bisect.html\">Python Document</a>에서 확인해 주시기 바랍니다.<br><br></p>\n<h3>math</h3>\n<p><code class=\"language-text\">math</code> 모듈은 많은 <strong>수학 계산과 관련</strong>된 함수들을 가지고 있습니다.<br><br></p>\n<ul>\n<li>많은 예시들</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> math\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>math<span class=\"token punctuation\">.</span>factorial<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\"># 5! = 120 반환</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>math<span class=\"token punctuation\">.</span>gcd<span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>     <span class=\"token comment\"># 40과 30의 공약수 반환</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>math<span class=\"token punctuation\">.</span>floor<span class=\"token punctuation\">(</span><span class=\"token number\">2.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\t\t<span class=\"token comment\"># 2.5의 내림 반환 (2)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>math<span class=\"token punctuation\">.</span>ceil<span class=\"token punctuation\">(</span><span class=\"token number\">2.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\t\t<span class=\"token comment\"># 2.5의 올림 반환 (3)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>math<span class=\"token punctuation\">.</span>fabs<span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\t\t<span class=\"token comment\"># -5의 절댓값 반환 (5)</span></code></pre></div>\n<br>\n<p>더 자세한 사용법은 해당 <a href=\"https://docs.python.org/ko/3/library/math.html\">Python Document</a>에서 확인해 주시기 바랍니다.<br><br></p>\n<h2>마치며</h2>\n<p>사실, 이 글의 분량으로 담을 수 없는 내용들이 많습니다. 예를 들어 <code class=\"language-text\">collections</code> 모듈에는 이 글에서 설명하지 않은 구현 상에 도움을 주는 구조체들이 많다던지, <code class=\"language-text\">math</code> 모듈에 <code class=\"language-text\">Python 3.8</code> 버전에 업데이트 된 함수들 이라던지.. 딱히 몰라도 알고리즘 문제를 푸는데 문제는 없지만, 한 번쯤은 알아 보는 것도 괜찮은 것 같습니다!</p>\n<p>다음 시간에는 <code class=\"language-text\">Python</code>으로 여러 가지 유형의 알고리즘 문제를 풀 때 필요한 간단한 <strong>팁</strong>들로 돌아 오겠습니다!</p>","id":"e85439f7-d3c5-570f-9475-4194a0d6254f","frontmatter":{"date":"2020-03-22","path":"/python/pygorithm-2","title":"파이썬으로 알고리즘을 풀어보자! - 2. 모듈","tags":["Python","Algorithm"],"keyword":"Python, python, 파이썬, Algorithm, algorithm, 알고리즘, Python Algorithm, 파이썬 알고리즘","summary":"Python의 내장 함수와 모듈","img":"https://miro.medium.com/max/1027/1*Ud_bNdeWPf4iN1EcydaDFA.png","series":"Python Algorithm"}}},"pageContext":{"series":{"data":{"allMarkdownRemark":{"edges":[{"node":{"id":"287c8638-584e-5b23-b45c-839c8d22f061","excerpt":"최단 경로 알고리즘은 지하철 노선도, 네비게이션 등 다방면에 사용되는 알고리즘입니다. 이번 시간에는 Python을 이용해 하나의 시작 정점으로 부터 모든 다른 정점까지의 최단 경로를 찾는 최단 경로 알고리즘인 다익스트라(dijkstra…","frontmatter":{"date":"2020-05-31","tags":["Python","Algorithm"],"path":"/algorithm/python-dijkstra","title":"Python으로 다익스트라(dijkstra) 알고리즘 구현하기","img":"https://ever-line.co.kr/images/use-1-2_img.png","summary":"최단 경로를 찾아보자"}}},{"node":{"id":"65226bf5-4e04-5a81-8cf9-eb711dd38fa5","excerpt":"Python, Algorithm, Tips…","frontmatter":{"date":"2020-03-27","tags":["Python","Algorithm"],"path":"/python/pygorithm-3","title":"파이썬으로 알고리즘을 풀어보자! - 3. 팁","img":"https://miro.medium.com/max/1027/1*Ud_bNdeWPf4iN1EcydaDFA.png","summary":"Python, Algorithm, Tips"}}},{"node":{"id":"e85439f7-d3c5-570f-9475-4194a0d6254f","excerpt":"Python…","frontmatter":{"date":"2020-03-22","tags":["Python","Algorithm"],"path":"/python/pygorithm-2","title":"파이썬으로 알고리즘을 풀어보자! - 2. 모듈","img":"https://miro.medium.com/max/1027/1*Ud_bNdeWPf4iN1EcydaDFA.png","summary":"Python의 내장 함수와 모듈"}}},{"node":{"id":"911eb0f6-2845-5ed5-9a1c-77d39db9664d","excerpt":"Python…","frontmatter":{"date":"2020-03-21","tags":["Python","Algorithm"],"path":"/python/pygorithm-1","title":"파이썬으로 알고리즘을 풀어보자! - 1. 입문","img":"https://miro.medium.com/max/1027/1*Ud_bNdeWPf4iN1EcydaDFA.png","summary":"Python의 입출력에 대하여"}}}]}}},"categoryPosts":{"data":{"allMarkdownRemark":{"edges":[{"node":{"id":"72999af7-d2c7-5f95-8d6c-eb8d5219cd76","excerpt":"Matplotlib 안녕하세요? Justkode 입니다. 오늘은 Matplotlib에 대해서 알아보는 시간을 가져보도록 하겠습니다. Matplotlib는 데이터 분석을 위해 만들어진 라이브러리로 Numpy, Pandas…","frontmatter":{"date":"2021-07-08","tags":["Data-Science","Python"],"path":"/data-science/just-data-science-3","title":"[찍먹 Data Science] 3. Matplotlib","img":"/post_image/thumbnail/just-data-science-3.jpeg","summary":"데이터 시각화 모듈, Matplotlib을 알아보자."}}},{"node":{"id":"05ccbb5b-48d4-57d0-9f3b-ca1dae54ed34","excerpt":"Pandas 안녕하세요? Justkode 입니다. 오늘은 Pandas에 대해서 심층있게 알아보는 시간을 가져보도록 하겠습니다. Pandas는 데이터 분석을 위해 만들어진 라이브러리로 Numpy와 함께 많이 사용 됩니다. 주로 사용하는 데이터 구조는 Dataframe과 Series로, Table 정보와 같은 데이터를 처리 하는데 이점이 있습니다. Series and DataFrame 첫 번째로 Series입니다. Series는…","frontmatter":{"date":"2021-07-04","tags":["Data-Science","Python"],"path":"/data-science/just-data-science-2","title":"[찍먹 Data Science] 2. Pandas","img":"/post_image/thumbnail/just-data-science-2.jpg","summary":"데이터 분석에 쓰이는 Pandas를 알아보자."}}},{"node":{"id":"c29d290f-1001-5de9-8997-cb6fe729221b","excerpt":"Data Science And Math 안녕하세요? Justkode 입니다. 많은 Machine Learning과 Deep Learning…","frontmatter":{"date":"2021-06-30","tags":["Data-Science","Python"],"path":"/data-science/just-data-science-1","title":"[찍먹 Data Science] 1. Math, Numpy","img":"/post_image/thumbnail/just-data-science-1.jpg","summary":"간단한 수학 식을 Numpy로 구현해 보자"}}},{"node":{"id":"a612c5a7-1022-5193-b619-2ebc9ecc252c","excerpt":"REST API를 사용 하게 된다면, 사용자 인증 방법으로 제일 많이 사용하는 것이 JWT (JSON Web Token) 입니다. JWT에 대해 더 알고 싶다면. Velopert 님의 게시글을 참고 해 주세요! 우선 설치해야 할 것 일단 와 를 설치 하여야 합니다. bcrypt 사용법 의 사용법은 두 가지로 나뉩니다. 암호화와 암호 일치 확인입니다. 우선 암호화 방법에 대해서 알아 보겠습니다. 암호화 방법 다음 코드를 보시겠습니다. In Out…","frontmatter":{"date":"2020-07-18","tags":["Python"],"path":"/python/flask-restapi-3","title":"Flask로 REST API 구현하기 - 3. JWT로 사용자 인증하기","img":"https://media.vlpt.us/images/dnjscksdn98/post/46839202-0ee0-4585-ac24-ec4e3152c012/jwt_logo.png?w=768","summary":"PyJWT와 bcrypt를 이용한 사용자 인증"}}}]}}}}},"staticQueryHashes":["234633779","63159454"]}