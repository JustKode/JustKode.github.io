{"componentChunkName":"component---src-layouts-post-layout-tsx","path":"/python/flask-restapi-3","result":{"data":{"markdownRemark":{"html":"<p><strong>REST API</strong>를 사용 하게 된다면, 사용자 인증 방법으로 제일 많이 사용하는 것이 <strong>JWT (JSON Web Token)</strong> 입니다. <strong>JWT</strong>에 대해 더 알고 싶다면. <a href=\"https://velopert.com/2389\">Velopert 님의 게시글</a>을 참고 해 주세요!</p>\n<h2>우선 설치해야 할 것</h2>\n<p>일단 <code class=\"language-text\">bcrypt</code>와 <code class=\"language-text\">PyJWT</code>를 설치 하여야 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"terminal\"><pre class=\"language-terminal\"><code class=\"language-terminal\">pip install bcrypt\npip install PyJWT</code></pre></div>\n<h2>bcrypt 사용법</h2>\n<p><code class=\"language-text\">bcrypt</code>의 사용법은 두 가지로 나뉩니다. 암호화와 암호 일치 확인입니다. 우선 암호화 방법에 대해서 알아 보겠습니다.</p>\n<h3>암호화 방법</h3>\n<p>다음 코드를 보시겠습니다.</p>\n<ul>\n<li><strong>In</strong></li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> bcrypt\npassword <span class=\"token operator\">=</span> <span class=\"token string\">\"password\"</span>\nencrypted_password <span class=\"token operator\">=</span> bcrypt<span class=\"token punctuation\">.</span>hashpw<span class=\"token punctuation\">(</span>password<span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token string\">\"utf-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> bcrypt<span class=\"token punctuation\">.</span>gensalt<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># str 객체, bytes로 인코드, salt를 이용하여 암호화</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>encrypted_password<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># bytes-string</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>encrypted_password<span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token string\">\"utf-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># str 객체  </span></code></pre></div>\n<ul>\n<li><strong>Out</strong></li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"terminal\"><pre class=\"language-terminal\"><code class=\"language-terminal\">b&#39;$2b$12$6XEOimJ6msiHK7w/r7ayoO5W14cOVPLl8BPvmjhPJTWuo5RGRR.W6&#39;\n$2b$12$6XEOimJ6msiHK7w/r7ayoO5W14cOVPLl8BPvmjhPJTWuo5RGRR.W6</code></pre></div>\n<p>코드 설명은 다음과 같습니다. 일단 <code class=\"language-text\">bcrypt.hashpw()</code>를 이용 하여, <strong>인코딩</strong>을 실시 합니다. 첫 번째 파라미터로는 <code class=\"language-text\">bytes-string</code>이 필요 합니다. 고로. <code class=\"language-text\">str</code> 객체 내의 메소드인 <code class=\"language-text\">encode()</code>를 이용하여, <strong>UTF-8</strong> 방식으로 인코딩을 해준 값을 넣어 줍니다. 두 번째 파라미터로, <code class=\"language-text\">bcrypt.gensalt()</code>를 삽입 하여, <strong>salt</strong> 값을 설정합니다. <strong>bcrypt</strong>에 대한 내용을 더 알고 싶다면 <a href=\"https://jusths.tistory.com/158\">해당 링크</a>를 참고 해 주세요!</p>\n<p>이렇게 <code class=\"language-text\">encrypted_password</code>는 <strong>bcrypt</strong> 암호화 방식으로 암호화된 <code class=\"language-text\">bytes-string</code> 객체가 되었습니다. 이를 또 <strong>UTF-8</strong> 방식으로 디코딩하여, <code class=\"language-text\">str</code> 객체로 데이터 베이스에 저장 하여 주면 됩니다!</p>\n<h3>암호 일치 확인 방법</h3>\n<p>암호 일치 확인 방법입니다. <code class=\"language-text\">bcrypt.checkpw()</code> 함수를 사용 합니다. 첫 번째 파라미터와, 두 번째 파라미터로 비교하고자 하는 <code class=\"language-text\">bytes-string</code>을 넣어 주면 됩니다.</p>\n<ul>\n<li><strong>In</strong></li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> bcrypt\nencrypted_password <span class=\"token operator\">=</span> bcrypt<span class=\"token punctuation\">.</span>hashpw<span class=\"token punctuation\">(</span><span class=\"token string\">\"password\"</span><span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token string\">\"utf-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> bcrypt<span class=\"token punctuation\">.</span>gensalt<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>bcrypt<span class=\"token punctuation\">.</span>checkpw<span class=\"token punctuation\">(</span><span class=\"token string\">\"password\"</span><span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token string\">\"utf-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> encrypted_password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>bcrypt<span class=\"token punctuation\">.</span>checkpw<span class=\"token punctuation\">(</span><span class=\"token string\">\"pessword\"</span><span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token string\">\"utf-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> encrypted_password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li><strong>Out</strong></li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"terminal\"><pre class=\"language-terminal\"><code class=\"language-terminal\">True\nFalse</code></pre></div>\n<h2>PyJWT</h2>\n<p><strong>PyJWT</strong>는 <strong>Python</strong>으로 <strong>JWT</strong>를 생성하는 데에 도움을 주는 모듈입니다. 이의 사용법은 암호화와, 복호화로 나뉩니다.</p>\n<p>다음 예시를 보겠습니다.</p>\n<ul>\n<li><strong>In</strong></li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> jwt\n\njson <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"id\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"justkode\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"password\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"password\"</span>\n<span class=\"token punctuation\">}</span>\nencoded <span class=\"token operator\">=</span> jwt<span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">,</span> <span class=\"token string\">\"secret\"</span><span class=\"token punctuation\">,</span> algorithm<span class=\"token operator\">=</span><span class=\"token string\">\"HS256\"</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># byte-string</span>\ndecoded <span class=\"token operator\">=</span> jwt<span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span>encoded<span class=\"token punctuation\">,</span> <span class=\"token string\">\"secret\"</span><span class=\"token punctuation\">,</span> algorithm<span class=\"token operator\">=</span><span class=\"token string\">\"HS256\"</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># dict</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>encoded<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>decoded<span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li><strong>Out</strong></li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"terminal\"><pre class=\"language-terminal\"><code class=\"language-terminal\">b&#39;eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6Imp1c3Rrb2RlIiwicGFzc3dvcmQiOiJwYXNzd29yZCJ9.TKGlCElSgGthalfeTlbN_giphG9AC5y5HwCbz93N0cs&#39;\n{&#39;id&#39;: &#39;justkode&#39;, &#39;password&#39;: &#39;password&#39;}</code></pre></div>\n<p><code class=\"language-text\">jwt.encode()</code>로 우선 jwt 인코딩을 실시합니다. 첫 번째 파라미터로는 인코딩 하고자 하는 <code class=\"language-text\">dict</code> 객체, 두 번째 파라미터로는 <strong>시크릿 키</strong>, 세 번째 파라미터로는 <strong>알고리즘 방식</strong>을 삽입 합니다.</p>\n<p><code class=\"language-text\">jwt.decode()</code>는 <code class=\"language-text\">jwt.encode()</code>로 인코딩한 <strong>JWT</strong>의 디코딩을 실시합니다. 첫 번째 파라미터로는 디코딩 하고자 하는 <code class=\"language-text\">bytes-string</code> 객체, 두 번째 파라미터로는 <strong>시크릿 키(단, 이는 jwt.encode() 에 넣은 시크릿 코드와 일치 하여야 합니다)</strong>, 세 번째 파라미터로는 <strong>알고리즘 방식</strong>을 삽입 합니다.</p>\n<h2>Flask에 적용 하기</h2>\n<p>한번, 이를 <strong>Flask</strong> 어플리케이션에 적용 해 보겠습니다.</p>\n<blockquote>\n<p>app.py</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> flask <span class=\"token keyword\">import</span> Flask\n<span class=\"token keyword\">from</span> flask_restx <span class=\"token keyword\">import</span> Resource<span class=\"token punctuation\">,</span> Api\n<span class=\"token keyword\">from</span> auth <span class=\"token keyword\">import</span> Auth\n\napp <span class=\"token operator\">=</span> Flask<span class=\"token punctuation\">(</span>__name__<span class=\"token punctuation\">)</span>\napi <span class=\"token operator\">=</span> Api<span class=\"token punctuation\">(</span>\n    app<span class=\"token punctuation\">,</span>\n    version<span class=\"token operator\">=</span><span class=\"token string\">'0.1'</span><span class=\"token punctuation\">,</span>\n    title<span class=\"token operator\">=</span><span class=\"token string\">\"JustKode's API Server\"</span><span class=\"token punctuation\">,</span>\n    description<span class=\"token operator\">=</span><span class=\"token string\">\"JustKode's Todo API Server!\"</span><span class=\"token punctuation\">,</span>\n    terms_url<span class=\"token operator\">=</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span>\n    contact<span class=\"token operator\">=</span><span class=\"token string\">\"justkode@kakao.com\"</span><span class=\"token punctuation\">,</span>\n    license<span class=\"token operator\">=</span><span class=\"token string\">\"MIT\"</span>\n<span class=\"token punctuation\">)</span>\n\napi<span class=\"token punctuation\">.</span>add_namespace<span class=\"token punctuation\">(</span>Auth<span class=\"token punctuation\">,</span> <span class=\"token string\">'/auth'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\"__main__\"</span><span class=\"token punctuation\">:</span>\n    app<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span>debug<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> host<span class=\"token operator\">=</span><span class=\"token string\">'0.0.0.0'</span><span class=\"token punctuation\">,</span> port<span class=\"token operator\">=</span><span class=\"token number\">80</span><span class=\"token punctuation\">)</span></code></pre></div>\n<blockquote>\n<p>auth.py</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> jwt\n<span class=\"token keyword\">import</span> bcrypt\n<span class=\"token keyword\">from</span> flask <span class=\"token keyword\">import</span> request\n<span class=\"token keyword\">from</span> flask_restx <span class=\"token keyword\">import</span> Resource<span class=\"token punctuation\">,</span> Api<span class=\"token punctuation\">,</span> Namespace<span class=\"token punctuation\">,</span> fields\n\nusers <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\nAuth <span class=\"token operator\">=</span> Namespace<span class=\"token punctuation\">(</span>\n    name<span class=\"token operator\">=</span><span class=\"token string\">\"Auth\"</span><span class=\"token punctuation\">,</span>\n    description<span class=\"token operator\">=</span><span class=\"token string\">\"사용자 인증을 위한 API\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span>\n\nuser_fields <span class=\"token operator\">=</span> Auth<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">(</span><span class=\"token string\">'User'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>  <span class=\"token comment\"># Model 객체 생성</span>\n    <span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span> fields<span class=\"token punctuation\">.</span>String<span class=\"token punctuation\">(</span>description<span class=\"token operator\">=</span><span class=\"token string\">'a User Name'</span><span class=\"token punctuation\">,</span> required<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> example<span class=\"token operator\">=</span><span class=\"token string\">\"justkode\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nuser_fields_auth <span class=\"token operator\">=</span> Auth<span class=\"token punctuation\">.</span>inherit<span class=\"token punctuation\">(</span><span class=\"token string\">'User Auth'</span><span class=\"token punctuation\">,</span> user_fields<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'password'</span><span class=\"token punctuation\">:</span> fields<span class=\"token punctuation\">.</span>String<span class=\"token punctuation\">(</span>description<span class=\"token operator\">=</span><span class=\"token string\">'Password'</span><span class=\"token punctuation\">,</span> required<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> example<span class=\"token operator\">=</span><span class=\"token string\">\"password\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\njwt_fields <span class=\"token operator\">=</span> Auth<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">(</span><span class=\"token string\">'JWT'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'Authorization'</span><span class=\"token punctuation\">:</span> fields<span class=\"token punctuation\">.</span>String<span class=\"token punctuation\">(</span>description<span class=\"token operator\">=</span><span class=\"token string\">'Authorization which you must inclued in header'</span><span class=\"token punctuation\">,</span> required<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> example<span class=\"token operator\">=</span><span class=\"token string\">\"eyJ0e~~~~~~~~~\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token decorator annotation punctuation\">@Auth<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/register'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">AuthRegister</span><span class=\"token punctuation\">(</span>Resource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token decorator annotation punctuation\">@Auth<span class=\"token punctuation\">.</span>expect</span><span class=\"token punctuation\">(</span>user_fields_auth<span class=\"token punctuation\">)</span>\n    <span class=\"token decorator annotation punctuation\">@Auth<span class=\"token punctuation\">.</span>doc</span><span class=\"token punctuation\">(</span>responses<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">200</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'Success'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token decorator annotation punctuation\">@Auth<span class=\"token punctuation\">.</span>doc</span><span class=\"token punctuation\">(</span>responses<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">500</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'Register Failed'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">post</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        name <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>json<span class=\"token punctuation\">[</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">]</span>\n        password <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>json<span class=\"token punctuation\">[</span><span class=\"token string\">'password'</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">if</span> name <span class=\"token keyword\">in</span> users<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token string\">\"message\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Register Failed\"</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">500</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            users<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> bcrypt<span class=\"token punctuation\">.</span>hashpw<span class=\"token punctuation\">(</span>password<span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token string\">\"utf-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> bcrypt<span class=\"token punctuation\">.</span>gensalt<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 비밀번호 저장</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token string\">'Authorization'</span><span class=\"token punctuation\">:</span> jwt<span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span> name<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"secret\"</span><span class=\"token punctuation\">,</span> algorithm<span class=\"token operator\">=</span><span class=\"token string\">\"HS256\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token string\">\"UTF-8\"</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># str으로 반환하여 return</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span>\n\n<span class=\"token decorator annotation punctuation\">@Auth<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/login'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">AuthLogin</span><span class=\"token punctuation\">(</span>Resource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token decorator annotation punctuation\">@Auth<span class=\"token punctuation\">.</span>expect</span><span class=\"token punctuation\">(</span>user_fields_auth<span class=\"token punctuation\">)</span>\n    <span class=\"token decorator annotation punctuation\">@Auth<span class=\"token punctuation\">.</span>doc</span><span class=\"token punctuation\">(</span>responses<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">200</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'Success'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token decorator annotation punctuation\">@Auth<span class=\"token punctuation\">.</span>doc</span><span class=\"token punctuation\">(</span>responses<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">404</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'User Not Found'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token decorator annotation punctuation\">@Auth<span class=\"token punctuation\">.</span>doc</span><span class=\"token punctuation\">(</span>responses<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">500</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'Auth Failed'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">post</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        name <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>json<span class=\"token punctuation\">[</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">]</span>\n        password <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>json<span class=\"token punctuation\">[</span><span class=\"token string\">'password'</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">if</span> name <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> users<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token string\">\"message\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"User Not Found\"</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">404</span>\n        <span class=\"token keyword\">elif</span> <span class=\"token keyword\">not</span> bcrypt<span class=\"token punctuation\">.</span>checkpw<span class=\"token punctuation\">(</span>password<span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> users<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 비밀번호 일치 확인</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token string\">\"message\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Auth Failed\"</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">500</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token string\">'Authorization'</span><span class=\"token punctuation\">:</span> jwt<span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span> name<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"secret\"</span><span class=\"token punctuation\">,</span> algorithm<span class=\"token operator\">=</span><span class=\"token string\">\"HS256\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token string\">\"UTF-8\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># str으로 반환하여 return</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span>\n\n<span class=\"token decorator annotation punctuation\">@Auth<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/get'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">AuthGet</span><span class=\"token punctuation\">(</span>Resource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token decorator annotation punctuation\">@Auth<span class=\"token punctuation\">.</span>doc</span><span class=\"token punctuation\">(</span>responses<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">200</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'Success'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token decorator annotation punctuation\">@Auth<span class=\"token punctuation\">.</span>doc</span><span class=\"token punctuation\">(</span>responses<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">404</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'Login Failed'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        header <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'Authorization'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># Authorization 헤더로 담음</span>\n        <span class=\"token keyword\">if</span> header <span class=\"token operator\">==</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"message\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Please Login\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">404</span>\n        data <span class=\"token operator\">=</span> jwt<span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span>header<span class=\"token punctuation\">,</span> <span class=\"token string\">\"secret\"</span><span class=\"token punctuation\">,</span> algorithm<span class=\"token operator\">=</span><span class=\"token string\">\"HS256\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> data<span class=\"token punctuation\">,</span> <span class=\"token number\">200</span></code></pre></div>\n<p>일단 <code class=\"language-text\">/register</code> 를 먼저 실험 해 보겠습니다. 한 번 <code class=\"language-text\">POST</code> 방식으로 <code class=\"language-text\">JSON</code>을 통해 아이디와 비밀번호를 보내 계정을 등록 해 보겠습니다.</p>\n<p align=\"center\">\n\t<img src=\"/post_image/flask-restful/3-1.PNG\" width=\"80%\"/>\n\t<p align=\"center\" style=\"color:#888888; font-size: 12px;\">\n\t\tJWT가 반환 된 모습\n\t</p>\n</p>\n<p>그 다음, <code class=\"language-text\">/login</code> 을 테스트 해 보겠습니다. 아까와 같이 <code class=\"language-text\">POST</code> 방식으로 아까 등록했던 아이디와 비밀번호를 보내 보겠습니다.</p>\n<p align=\"center\">\n\t<img src=\"/post_image/flask-restful/3-2.PNG\" width=\"80%\"/>\n\t<p align=\"center\" style=\"color:#888888; font-size: 12px;\">\n\t\tJWT가 반환 된 모습\n\t</p>\n</p>\n<p>다른 비밀번호를 보내 보면, 비밀 번호가 틀렸다고 하며 성공적으로 요청을 거부하는 모습니다.</p>\n<p align=\"center\">\n\t<img src=\"/post_image/flask-restful/3-3.PNG\" width=\"80%\"/>\n\t<p align=\"center\" style=\"color:#888888; font-size: 12px;\">\n\t\t로그인 실패!\n\t</p>\n</p>\n<p>그리고, <code class=\"language-text\">/get</code> 을 테스트 해 보겠습니다. 이번에는 아까 반환 받았던 <strong>JWT</strong>를 <strong>Header</strong>에 넣습니다. <strong>Header</strong>의 <code class=\"language-text\">Authorization</code>이라는 키에 <strong>JWT</strong>를 담아서 보내면, 성공적으로 요청을 반환하는 모습을 볼 수 있습니다.</p>\n<p align=\"center\">\n\t<img src=\"/post_image/flask-restful/3-4.PNG\" width=\"80%\"/>\n\t<p align=\"center\" style=\"color:#888888; font-size: 12px;\">\n\t\t성공!\n\t</p>\n</p>","id":"a612c5a7-1022-5193-b619-2ebc9ecc252c","frontmatter":{"date":"2020-07-18","path":"/python/flask-restapi-3","title":"Flask로 REST API 구현하기 - 3. JWT로 사용자 인증하기","tags":["Python"],"keyword":"Python, python, 파이썬, Flask, restful, restapi, RESTX, flask restx, jwt, flask jwt, bcrypt","summary":"PyJWT와 bcrypt를 이용한 사용자 인증","img":"https://media.vlpt.us/images/dnjscksdn98/post/46839202-0ee0-4585-ac24-ec4e3152c012/jwt_logo.png?w=768","series":"Flask"}}},"pageContext":{"series":{"data":{"allMarkdownRemark":{"edges":[{"node":{"id":"a612c5a7-1022-5193-b619-2ebc9ecc252c","excerpt":"REST API를 사용 하게 된다면, 사용자 인증 방법으로 제일 많이 사용하는 것이 JWT (JSON Web Token) 입니다. JWT에 대해 더 알고 싶다면. Velopert 님의 게시글을 참고 해 주세요! 우선 설치해야 할 것 일단 와 를 설치 하여야 합니다. bcrypt 사용법 의 사용법은 두 가지로 나뉩니다. 암호화와 암호 일치 확인입니다. 우선 암호화 방법에 대해서 알아 보겠습니다. 암호화 방법 다음 코드를 보시겠습니다. In Out…","frontmatter":{"date":"2020-07-18","tags":["Python"],"path":"/python/flask-restapi-3","title":"Flask로 REST API 구현하기 - 3. JWT로 사용자 인증하기","img":"https://media.vlpt.us/images/dnjscksdn98/post/46839202-0ee0-4585-ac24-ec4e3152c012/jwt_logo.png?w=768","summary":"PyJWT와 bcrypt를 이용한 사용자 인증"}}},{"node":{"id":"d9f9df89-b52d-5ce7-9f4c-ea68a62c90b6","excerpt":"저번 시간에는 Flask-RESTX 에 대한 기본적인 사용 법을 알아보고, 이를 이용하여 간단한 API Server를 만들어 보았습니다. 모두가 스파게티 코드를 원하지 않잖아요. 여러분은 당신의 코드가 스파게티 코드가 되는 것을 원치 않을 것 입니다. 그러므로 파일 분리는 우리가 무슨 어플리케이션을 만들던 필수적인 과정입니다. 저번 시간에 구현한 간단한 API…","frontmatter":{"date":"2020-07-09","tags":["Python"],"path":"/python/flask-restapi-2","title":"Flask로 REST API 구현하기 - 2. 파일 분리, 문서화","img":"https://dailylolpics.com/wp-content/uploads/2017/11/spaghetti-code.jpg","summary":"flask-restx의 파일 분리와 문서화"}}},{"node":{"id":"9f6b6f2d-1644-5757-b754-afc05aeaa57c","excerpt":"이번 시간에는 Flask로 간단히 REST API를 주고 받는 API Server를 만들어 보겠습니다. Flask란? Flask는 Python 기반의 Micro Web Framework 입니다. 배우기 쉽고, 간단한 코드 구현과 자유도가 높다는 점이 장점입니다. 왜 Flask로 API Server를 구현하나요? Flask는 현실적으로 서버의 Application단을 구현 한다기 보단 API Server…","frontmatter":{"date":"2020-07-06","tags":["Python"],"path":"/python/flask-restapi-1","title":"Flask로 REST API 구현하기 - 1. Flask-RESTX","img":"https://cdn-images-1.medium.com/proxy/1*3UaLDKs6bJRMtYoPDCIWBw.png","summary":"Flask로 쉽게 REST API 만들기"}}}]}}},"categoryPosts":{"data":{"allMarkdownRemark":{"edges":[{"node":{"id":"26cf793d-aefa-5dbf-97d1-7dea7275eba7","excerpt":"AWS S3 안녕하세요? Justkode 입니다. 이번 시간에는 AWS S3에 대해서 알아 보고, AWS S3 버킷 생성, 파일 접근 권한 설정, Python 코드 상에서의 접근을 해 보도록 하겠습니다. 일단 AWS S3에 대해서 간단하게 설명 드리겠습니다. AWS S…","frontmatter":{"date":"2021-07-16","tags":["Cloud-Computing","Python"],"path":"/data-science/just-cloud-computing-2","title":"[찍먹 Cloud Computing] 2. AWS S3","img":"/post_image/thumbnail/just-cloud-computing-2.jpg","summary":"AWS S3와 boto3를 사용 해 보자"}}},{"node":{"id":"67ae44e3-5a48-57d9-87ea-fd77d9876c34","excerpt":"SQL 안녕하세요? Justkode 입니다. 오늘은 SQL에 대해서 간단하게 알아보는 시간을 가져보도록 하겠습니다. SQL은 Structured Query Language의 약자로, RDBMS의 데이터베이스를 주로 조회 하는데에 사용이 되는, 데이터베이스 관리 시스템(RDBMS)의 데이터를 관리하기 위해 설계된 특수 목적의 프로그래밍 언어입니다. 여기서 설명 하는 문법들은 많은 내용을 담지 않고, SQL…","frontmatter":{"date":"2021-07-11","tags":["Data-Science","Python"],"path":"/data-science/just-data-science-4","title":"[찍먹 Data Science] 4. SQL","img":"/post_image/thumbnail/just-data-science-4.jpg","summary":"SQL의 기본 문법에 대해 알아보자."}}},{"node":{"id":"72999af7-d2c7-5f95-8d6c-eb8d5219cd76","excerpt":"Matplotlib 안녕하세요? Justkode 입니다. 오늘은 Matplotlib에 대해서 알아보는 시간을 가져보도록 하겠습니다. Matplotlib는 데이터 분석을 위해 만들어진 라이브러리로 Numpy, Pandas…","frontmatter":{"date":"2021-07-08","tags":["Data-Science","Python"],"path":"/data-science/just-data-science-3","title":"[찍먹 Data Science] 3. Matplotlib","img":"/post_image/thumbnail/just-data-science-3.jpeg","summary":"데이터 시각화 모듈, Matplotlib을 알아보자."}}},{"node":{"id":"05ccbb5b-48d4-57d0-9f3b-ca1dae54ed34","excerpt":"Pandas 안녕하세요? Justkode 입니다. 오늘은 Pandas에 대해서 심층있게 알아보는 시간을 가져보도록 하겠습니다. Pandas는 데이터 분석을 위해 만들어진 라이브러리로 Numpy와 함께 많이 사용 됩니다. 주로 사용하는 데이터 구조는 Dataframe과 Series로, Table 정보와 같은 데이터를 처리 하는데 이점이 있습니다. Series and DataFrame 첫 번째로 Series입니다. Series는…","frontmatter":{"date":"2021-07-04","tags":["Data-Science","Python"],"path":"/data-science/just-data-science-2","title":"[찍먹 Data Science] 2. Pandas","img":"/post_image/thumbnail/just-data-science-2.jpg","summary":"데이터 분석에 쓰이는 Pandas를 알아보자."}}}]}}}}},"staticQueryHashes":["234633779","63159454"]}