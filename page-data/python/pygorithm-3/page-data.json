{"componentChunkName":"component---src-layouts-post-layout-tsx","path":"/python/pygorithm-3","result":{"data":{"markdownRemark":{"html":"<h1>Python, Algorithm, Tips</h1>\n<p><code class=\"language-text\">Python</code>은 알고리즘 문제를 해결 하는데에 <strong>강력한</strong> 언어 입니다. 하지만, <code class=\"language-text\">Python</code>으로 문제를 해결 하는 데에 익숙치 않다면, 많은 <strong>시행착오</strong>를 겪게 됩니다. 우리가 대부분 원래 사용 했던 <code class=\"language-text\">C++</code>은 <strong>컴파일 언어</strong> 입니다. 하지만, <code class=\"language-text\">Python</code>은 <strong>스크립트 언어</strong>이다 보니, 여러 가지 <strong>컴파일 에러</strong>를 겪을 수 있고, <strong>타입리스 언어</strong>기 때문에, 타입 체킹이 제대로 되지 않아, 어려움을 겪을 수도 있습니다. 하지만, 우리는 이러한 <strong>타입리스 언어, 스크립트 언어</strong>의 장점을 잘 이용해야 합니다. 타입리스 언어이자 스크립트 언어이기 때문에, 빠르게 무언가를 구현 할 수 있도록 우리에게 제공된 구현체들을 잘 이용하여야 합니다. 이제 시작하겠습니다.</p>\n<br>\n<h2>백트래킹, 브루트 포스 문제를 해결하는 도중 컴파일 에러, 혹은 <code class=\"language-text\">RuntimeError: maximum recursion depth exceeded</code> 에러가 발생합니다.</h2>\n<p><code class=\"language-text\">Python</code>에는 <strong>함수 호출 스택</strong>이라는 것이 존재합니다. A 라는 함수에서 B 라는 함수를 호출하면, B 함수가 종료 될 때 까지 A 함수를 종료 하지 않는 것이죠. 아마 <strong>백트래킹 문제</strong>, <strong>브루트 포스 문제</strong>를 해결하는 중이라면, <strong>재귀 함수</strong>를 사용 하고 있을 가능성이 높습니다. 그럼 아마 높은 확률로 두 가지 경우의 수로 해결이 가능합니다.</p>\n<ol>\n<li>재귀 함수의 종료 조건을 계속 충족하지 못하고 있다.\n이런 경우에는 <code class=\"language-text\">print()</code> 함수를 이용하여, 재귀 함수가 어떻게 돌아가는지 확인 하고, 일차적으로 문제의 접근 방법이 잘못 되었는지 체크 해 봐야 합니다.</li>\n<li>그냥 재귀 과정에서 중간에 끊겨 버리는데요...?\n기본적으로 <code class=\"language-text\">Python</code> 에서 재귀 함수가 무한정 실행 되었을 때 문제가 발생 할 것을 대비하여, <strong>최대 재귀 호출 횟수를 1000회</strong>로 제한 했습니다. 사용자가 임의적으로 최대 재귀 호출 횟수를 늘리고 싶다면 <code class=\"language-text\">sys</code> 모듈의 <code class=\"language-text\">setrecursionlimit()</code> 함수를 이용하여 조정 할 수 있습니다.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> sys\nsys<span class=\"token punctuation\">.</span>setrecursionlimit<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token operator\">**</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 10^6 만큼 최대 재귀 호출 횟수 늘림</span></code></pre></div>\n<p>그래도 안된다면... 1번으로 돌아가고, 그래도 안되면 다른 방법 찾는게 정신 건강에 좋습니다.</p>\n<br>\n<h2>특정 키 값을 이용 해서 <code class=\"language-text\">list</code>를 정렬 하고 싶어요!</h2>\n<p><code class=\"language-text\">list.sort()</code> 의 <code class=\"language-text\">key</code> 파라미터로 <code class=\"language-text\">lambda</code> 함수를 넘겨 주어, <code class=\"language-text\">element</code>의 정렬 조건을 설정 할 수 있습니다. <code class=\"language-text\">lambda</code>로 구현이 힘들다면 함수를 구현하고, <code class=\"language-text\">key</code> 파라미터로 <code class=\"language-text\">functools.cmp_to_key(함수명)</code>을 넘겨주면 됩니다. 내림차순 정렬을 원하면, <code class=\"language-text\">reverse</code> 파라미터로 <code class=\"language-text\">True</code>를 넘겨 주면 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> functools <span class=\"token keyword\">import</span> cmp_to_key  <span class=\"token comment\"># cmp_to_key가 필요한 경우 import</span>\n\narr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\narr<span class=\"token punctuation\">.</span>sort<span class=\"token punctuation\">(</span>key<span class=\"token operator\">=</span><span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> x<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> reverse<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 튜플 1번째 값으로 정렬</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>                 <span class=\"token comment\"># 튜플 1번째 값으로 정렬</span>\n    <span class=\"token keyword\">if</span> x<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> y<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>            <span class=\"token comment\"># 만약 1번째 값이 같다면, 0번째 값 내림차순으로 정렬</span>\n        <span class=\"token keyword\">return</span> x<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> y<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> y<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> x<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n        \narr<span class=\"token punctuation\">.</span>sort<span class=\"token punctuation\">(</span>key<span class=\"token operator\">=</span>cmp_to_key<span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span></code></pre></div>\n<p>여담으로 알려드리자면, <code class=\"language-text\">sort()</code>의 알고리즘은 <a href=\"https://en.wikipedia.org/wiki/Timsort\">Tim Sort</a> 를 사용하며, 시간 복잡도는 <strong>O(n log n)</strong> 입니다.</p>\n<br>\n<h2><code class=\"language-text\">dict</code>의 시간 복잡도</h2>\n<p><code class=\"language-text\">dict</code>는 <strong>해시 테이블</strong>을 사용 하는 자료 구조이기 때문에, 시간 복잡도가 매우 작습니다. <strong>삽입, 삭제</strong> 등의 평균 시간 복잡도가 <strong>O(1)</strong> 입니다. 하지만, <strong>데이터의 용량이 비대하게 클 경우</strong>에는 <strong>해시 테이블</strong>의 수행 속도가 급격히 낮아지고, 공간 복잡도 또한 안 좋아 지기 때문에, 신중하게 사용해 주세요.</p>\n<br>\n<h2>collections 모듈</h2>\n<p><code class=\"language-text\">collections</code> 모듈은 당신의 손목과 손가락을 보호해 줄 좋은 친구 입니다. <code class=\"language-text\">Python</code> 기본 라이브러리 이기 때문에, 속도 또한 검증 되었습니다. 구현 상의 편안함을 위한 친구이니, 굳이 찾아 보지 않아도 됩니다. 하지만, <strong>뜨거운 프로그래머들에겐 그딴거 필요없습니다.</strong> (<code class=\"language-text\">deque</code>는 필요 합니다... 하하...)</p>\n<ul>\n<li><a href=\"https://docs.python.org/3.7/library/collections.html\">collections Document</a></li>\n</ul>\n<br>\n<h2>마치며</h2>\n<p><code class=\"language-text\">Python</code>으로 문제를 푸는게 속도가 느릴 수 있다고 생각 할 수 있지만, 대부분의 대회에서는 <code class=\"language-text\">Python</code> 같은 경우 프로그램 실행 시간 제한을 조금 늘려 주는 경우도 많고, 일단, 구현체를 구현 함에 있어서 <strong>코드의 가독성</strong> 이 높기 때문에, <strong>디버깅 및 논리적 오류</strong>를 발견 하는데에 강력합니다. 알고리즘 문제를 해결 하는데에 <strong>파이썬... 한 뚝배기 어떻습니까...?</strong></p>","id":"65226bf5-4e04-5a81-8cf9-eb711dd38fa5","frontmatter":{"date":"2020-03-27","path":"/python/pygorithm-3","title":"파이썬으로 알고리즘을 풀어보자! - 3. 팁","tags":["Python","Algorithm"],"keyword":"Python, python, 파이썬, Algorithm, algorithm, 알고리즘, Python Algorithm, 파이썬 알고리즘","summary":"Python, Algorithm, Tips","img":"https://miro.medium.com/max/1027/1*Ud_bNdeWPf4iN1EcydaDFA.png","series":"Python Algorithm"}}},"pageContext":{"series":{"data":{"allMarkdownRemark":{"edges":[{"node":{"id":"287c8638-584e-5b23-b45c-839c8d22f061","excerpt":"최단 경로 알고리즘은 지하철 노선도, 네비게이션 등 다방면에 사용되는 알고리즘입니다. 이번 시간에는 Python을 이용해 하나의 시작 정점으로 부터 모든 다른 정점까지의 최단 경로를 찾는 최단 경로 알고리즘인 다익스트라(dijkstra…","frontmatter":{"date":"2020-05-31","tags":["Python","Algorithm"],"path":"/algorithm/python-dijkstra","title":"Python으로 다익스트라(dijkstra) 알고리즘 구현하기","img":"https://ever-line.co.kr/images/use-1-2_img.png","summary":"최단 경로를 찾아보자"}}},{"node":{"id":"65226bf5-4e04-5a81-8cf9-eb711dd38fa5","excerpt":"Python, Algorithm, Tips…","frontmatter":{"date":"2020-03-27","tags":["Python","Algorithm"],"path":"/python/pygorithm-3","title":"파이썬으로 알고리즘을 풀어보자! - 3. 팁","img":"https://miro.medium.com/max/1027/1*Ud_bNdeWPf4iN1EcydaDFA.png","summary":"Python, Algorithm, Tips"}}},{"node":{"id":"e85439f7-d3c5-570f-9475-4194a0d6254f","excerpt":"Python…","frontmatter":{"date":"2020-03-22","tags":["Python","Algorithm"],"path":"/python/pygorithm-2","title":"파이썬으로 알고리즘을 풀어보자! - 2. 모듈","img":"https://miro.medium.com/max/1027/1*Ud_bNdeWPf4iN1EcydaDFA.png","summary":"Python의 내장 함수와 모듈"}}},{"node":{"id":"911eb0f6-2845-5ed5-9a1c-77d39db9664d","excerpt":"Python…","frontmatter":{"date":"2020-03-21","tags":["Python","Algorithm"],"path":"/python/pygorithm-1","title":"파이썬으로 알고리즘을 풀어보자! - 1. 입문","img":"https://miro.medium.com/max/1027/1*Ud_bNdeWPf4iN1EcydaDFA.png","summary":"Python의 입출력에 대하여"}}}]}}},"categoryPosts":{"data":{"allMarkdownRemark":{"edges":[{"node":{"id":"a612c5a7-1022-5193-b619-2ebc9ecc252c","excerpt":"REST API를 사용 하게 된다면, 사용자 인증 방법으로 제일 많이 사용하는 것이 JWT (JSON Web Token) 입니다. JWT에 대해 더 알고 싶다면. Velopert 님의 게시글을 참고 해 주세요! 우선 설치해야 할 것 일단 와 를 설치 하여야 합니다. bcrypt 사용법 의 사용법은 두 가지로 나뉩니다. 암호화와 암호 일치 확인입니다. 우선 암호화 방법에 대해서 알아 보겠습니다. 암호화 방법 다음 코드를 보시겠습니다. In Out…","frontmatter":{"date":"2020-07-18","tags":["Python"],"path":"/python/flask-restapi-3","title":"Flask로 REST API 구현하기 - 3. JWT로 사용자 인증하기","img":"https://media.vlpt.us/images/dnjscksdn98/post/46839202-0ee0-4585-ac24-ec4e3152c012/jwt_logo.png?w=768","summary":"PyJWT와 bcrypt를 이용한 사용자 인증"}}},{"node":{"id":"d8ce5f6a-8189-5355-8550-00649acaaa99","excerpt":"저번 시간에는 선형 회귀에 대해서 배워 보았습니다. 선형 회귀는 차원의 벡터 독립 변수 가 존재한다고 가정 하면, 그에 따른 종속 변수  가 있다고 가정하여, 선형 상관 관계를 모델링 하는 것이라고 배웠습니다. 예시 코드를 보겠습니다. 하지만, 범주형 변수에 대해서 생각을 해 보겠습니다. 예를 들어, 50점 이상이면 합격, 이하면 불합격이고, 이를 합격일 시 1로, 불합격일 시…","frontmatter":{"date":"2020-07-16","tags":["Machine-Learning","Python"],"path":"/machine-learning/logistic-regression","title":"수식과 코드로 알아보는 로지스틱 회귀","img":"https://memegenerator.net/img/instances/73789366.jpg","summary":"수식과 코드로 통해 보는 Logistic Regression"}}},{"node":{"id":"a897bc7a-a9b4-5dfb-9d59-e1282207e2ab","excerpt":"이번 시간에는 Python 시각화 라이브러리인 matplotlib을 이용해, 간단하게 데이터를 시각화 하는 예제 코드를 알아보는 시간을 가져 보겠습니다. 해당 포스트는 ratsgo님의 게시글를 참고하여, 데이터 및 주석 등을 재구성한 포스트임을 알립니다. 가장 먼저 와 을 import 합니다. 꺾은 선 그래프 막대 그래프 히스토그램 선 그래프 산점도 히트맵 마치며 지금까지 matplotlib…","frontmatter":{"date":"2020-07-11","tags":["Data-Science","Python"],"path":"/data-science/matplotlib-summary","title":"matplotlib으로 하는 데이터 시각화 예제 정리","img":"/post_image/thumbnail/matplotlib-summary.PNG","summary":"데이터 분석에 필수적인 데이터 시각화"}}},{"node":{"id":"d9f9df89-b52d-5ce7-9f4c-ea68a62c90b6","excerpt":"저번 시간에는 Flask-RESTX 에 대한 기본적인 사용 법을 알아보고, 이를 이용하여 간단한 API Server를 만들어 보았습니다. 모두가 스파게티 코드를 원하지 않잖아요. 여러분은 당신의 코드가 스파게티 코드가 되는 것을 원치 않을 것 입니다. 그러므로 파일 분리는 우리가 무슨 어플리케이션을 만들던 필수적인 과정입니다. 저번 시간에 구현한 간단한 API…","frontmatter":{"date":"2020-07-09","tags":["Python"],"path":"/python/flask-restapi-2","title":"Flask로 REST API 구현하기 - 2. 파일 분리, 문서화","img":"https://dailylolpics.com/wp-content/uploads/2017/11/spaghetti-code.jpg","summary":"flask-restx의 파일 분리와 문서화"}}}]}}}}},"staticQueryHashes":["234633779","63159454"]}