{"componentChunkName":"component---src-layouts-post-layout-tsx","path":"/python/flask-restapi-1","result":{"data":{"markdownRemark":{"html":"<p>이번 시간에는 <strong>Flask</strong>로 간단히 <strong>REST API</strong>를 주고 받는 <strong>API Server</strong>를 만들어 보겠습니다.</p>\n<h2>Flask란?</h2>\n<p><strong>Flask</strong>는 <strong>Python</strong> 기반의 <strong>Micro Web Framework</strong> 입니다. 배우기 쉽고, 간단한 코드 구현과 자유도가 높다는 점이 장점입니다.</p>\n<p align=\"center\">\n\t<img src=\"http://flask.palletsprojects.com/en/1.1.x/_images/flask-logo.png\" width=\"300px\"/>\n\t<p align=\"center\" style=\"color:#888888; font-size: 12px;\">\n\t\t자유도가 높은 만큼, 간단한 코드 구현을 권장합니다.\n\t</p>\n</p>\n<h2>왜 Flask로 API Server를 구현하나요?</h2>\n<p><strong>Flask</strong>는 현실적으로 서버의 <strong>Application</strong>단을 구현 한다기 보단 <strong>API Server</strong>의 역할을 더 많이 합니다. 애초에 이 친구는 <strong>Micro Web Framework</strong> 입니다. <strong>미니멀리즘</strong>을 표방하고 나온 친구죠. 그래서 사람들이 <strong>Flask</strong>로 <strong>API Server</strong>를 구현 하고, 이를 <strong>Docker</strong>나 <strong>Kubernetes</strong>를 이용해 스케쥴링을 하며 서버 자원을 유연하게 활용 하는 경우가 많습니다.</p>\n<p>즉, 요약해보면 장점은 세 가지 입니다.</p>\n<ol>\n<li><strong>API Server</strong>를 <strong>가볍게</strong> 구현 할 수 있습니다.</li>\n<li><strong>Docker</strong>나 <strong>Kubernetes</strong>를 이용해 여러 개의 컨테이너를 이용하여 스케쥴링이 용이 합니다.</li>\n<li>일단 <strong>쉽고, 코드가 짧습니다.</strong> (매우 중요)</li>\n</ol>\n<h2>Installation</h2>\n<p><code class=\"language-text\">flask</code>와 <strong>Flask</strong>의 <strong>Extension</strong>인 <code class=\"language-text\">flask-restx</code> <code class=\"language-text\">pip</code>을 이용하여 설치합니다. </p>\n<div class=\"gatsby-highlight\" data-language=\"terminal\"><pre class=\"language-terminal\"><code class=\"language-terminal\">$ pip install flask\n$ pip install flask-restx</code></pre></div>\n<h2>첫 번째 Flask Server</h2>\n<p>다음 코드를 통해서 첫 번째 <strong>Flask Server</strong>를 만들어 보겠습니다.</p>\n<blockquote>\n<p>app.py</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> flask <span class=\"token keyword\">import</span> Flask  <span class=\"token comment\"># 서버 구현을 위한 Flask 객체 import</span>\n<span class=\"token keyword\">from</span> flask_restx <span class=\"token keyword\">import</span> Api<span class=\"token punctuation\">,</span> Resource  <span class=\"token comment\"># Api 구현을 위한 Api 객체 import</span>\n\napp <span class=\"token operator\">=</span> Flask<span class=\"token punctuation\">(</span>__name__<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># Flask 객체 선언, 파라미터로 어플리케이션 패키지의 이름을 넣어줌.</span>\napi <span class=\"token operator\">=</span> Api<span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># Flask 객체에 Api 객체 등록</span>\n\n\n<span class=\"token decorator annotation punctuation\">@api<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/hello'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 데코레이터 이용, '/hello' 경로에 클래스 등록</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">HelloWorld</span><span class=\"token punctuation\">(</span>Resource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># GET 요청시 리턴 값에 해당 하는 dict를 JSON 형태로 반환</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"world!\"</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\"__main__\"</span><span class=\"token punctuation\">:</span>\n    app<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span>debug<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> host<span class=\"token operator\">=</span><span class=\"token string\">'0.0.0.0'</span><span class=\"token punctuation\">,</span> port<span class=\"token operator\">=</span><span class=\"token number\">80</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>그 다음 터미널에서 실행시켜 봅니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"terminal\"><pre class=\"language-terminal\"><code class=\"language-terminal\">python app.py</code></pre></div>\n<p>그리고 <strong>'<a href=\"http://localhost/hello\">http://localhost/hello</a>'</strong> 에 들어가 봅시다. 저는 구글 크롬의 확장 앱인, <a href=\"https://chrome.google.com/webstore/detail/advanced-rest-client/hgmloofddffdnphfgcellkdfbfbjeloo?hl=ko\">Advanced REST client</a>를 이용하여 테스트 했습니다.</p>\n<p>실행 결과는 다음과 같습니다. (저 같은 경우는 구름 IDE 환경에서 실행하여, 구름 IDE에서 제공하는 도메인으로 서버에 접속 하였습니다.)</p>\n<p align=\"center\">\n\t<img src=\"/post_image/flask-restful/1-1.PNG\" width=\"75%\"/>\n\t<p align=\"center\" style=\"color:#888888; font-size: 12px;\">\n\t\t정상적으로 API 요청이 된 모습.\n\t</p>\n</p>\n<h2>다양한 Resourceful Routing</h2>\n<p>route의 url에 query string이 아닌 <strong>url pattern</strong>을 이용할 수 있습니다. url 자체에 변수를 삽입하는 방법으로 가능 하며, <code class=\"language-text\">&lt;타입명:변수명&gt;</code> 형태로 작성하면 됩니다. 그 변수는 class의 멤버 함수의 파라미터로 삽입하여 사용 합니다.</p>\n<blockquote>\n<p>app.py</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> flask <span class=\"token keyword\">import</span> Flask\n<span class=\"token keyword\">from</span> flask_restx <span class=\"token keyword\">import</span> Resource<span class=\"token punctuation\">,</span> Api\n\napp <span class=\"token operator\">=</span> Flask<span class=\"token punctuation\">(</span>__name__<span class=\"token punctuation\">)</span>\napi <span class=\"token operator\">=</span> Api<span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">)</span>\n\n\n<span class=\"token decorator annotation punctuation\">@api<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/hello/&lt;string:name>'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># url pattern으로 name 설정</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Hello</span><span class=\"token punctuation\">(</span>Resource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 멤버 함수의 파라미터로 name 설정</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"message\"</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">\"Welcome, %s!\"</span> <span class=\"token operator\">%</span> name<span class=\"token punctuation\">}</span>\n    \n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\"__main__\"</span><span class=\"token punctuation\">:</span>\n    app<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span>debug<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> host<span class=\"token operator\">=</span><span class=\"token string\">'0.0.0.0'</span><span class=\"token punctuation\">,</span> port<span class=\"token operator\">=</span><span class=\"token number\">80</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p align=\"center\">\n\t<img src=\"/post_image/flask-restful/1-2.PNG\" width=\"75%\"/>\n\t<p align=\"center\" style=\"color:#888888; font-size: 12px;\">\n\t\turl pattern으로 파라미터를 인식, 값이 잘 들어간 것을 볼 수 있습니다.\n\t</p>\n</p>\n<h2>Status Code와 Header 설정</h2>\n<p>반환 하고자 하는 <strong>리턴 값</strong>으로 <strong>iterable</strong> 하게 값을 넣으면 됩니다. 순서는 다음과 같습니다.</p>\n<ol>\n<li>반환 하고자 하는 <strong>dict 객체</strong></li>\n<li>반환 하고자 하는 <strong>Status Code</strong></li>\n<li>반환 하고자 하는 <strong>Header</strong></li>\n</ol>\n<blockquote>\n<p>app.py</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> flask <span class=\"token keyword\">import</span> Flask\n<span class=\"token keyword\">from</span> flask_restx <span class=\"token keyword\">import</span> Resource<span class=\"token punctuation\">,</span> Api\n\napp <span class=\"token operator\">=</span> Flask<span class=\"token punctuation\">(</span>__name__<span class=\"token punctuation\">)</span>\napi <span class=\"token operator\">=</span> Api<span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">)</span>\n\n\n<span class=\"token decorator annotation punctuation\">@api<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/hello/&lt;string:name>'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Hello</span><span class=\"token punctuation\">(</span>Resource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"message\"</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">\"Welcome, %s!\"</span> <span class=\"token operator\">%</span> name<span class=\"token punctuation\">}</span>\n    \n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\"__main__\"</span><span class=\"token punctuation\">:</span>\n    app<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span>debug<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> host<span class=\"token operator\">=</span><span class=\"token string\">'0.0.0.0'</span><span class=\"token punctuation\">,</span> port<span class=\"token operator\">=</span><span class=\"token number\">80</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p align=\"center\">\n\t<img src=\"/post_image/flask-restful/1-3.PNG\" width=\"75%\"/>\n\t<p align=\"center\" style=\"color:#888888; font-size: 12px;\">\n\t\tStatus Code와 Header값이 잘 들어간 것을 확인 할 수 있습니다.\n\t</p>\n</p>\n<h2>GET, POST, PUT, DELETE</h2>\n<p><strong>GET, POST, PUT, DELETE</strong> 방식을 처리하는 방법은 단순합니다. <code class=\"language-text\">get</code>, <code class=\"language-text\">post</code>, <code class=\"language-text\">put</code>, <code class=\"language-text\">delete</code> 멤버 함수를 오버라이딩 하여 구현 해 주면 됩니다. <strong>body</strong>에 있는 데이터를 가져오기 위해서, 취하는 방법은 간단합니다. <code class=\"language-text\">flask</code> 모듈 내의 <code class=\"language-text\">request</code> 내의 <code class=\"language-text\">json</code> 객체를 이용하여, <strong>request body</strong>로 들어온 <strong>json</strong>값을 파싱하면 됩니다. <code class=\"language-text\">json</code> 객체는 <code class=\"language-text\">dict</code> 객체 입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> flask <span class=\"token keyword\">import</span> Flask<span class=\"token punctuation\">,</span> request\n<span class=\"token keyword\">from</span> flask_restx <span class=\"token keyword\">import</span> Resource<span class=\"token punctuation\">,</span> Api\n\napp <span class=\"token operator\">=</span> Flask<span class=\"token punctuation\">(</span>__name__<span class=\"token punctuation\">)</span>\napi <span class=\"token operator\">=</span> Api<span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">)</span>\n\ntodos <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\ncount <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n\n<span class=\"token decorator annotation punctuation\">@api<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/todos'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">TodoPost</span><span class=\"token punctuation\">(</span>Resource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">post</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">global</span> count\n        <span class=\"token keyword\">global</span> todos\n        \n        idx <span class=\"token operator\">=</span> count\n        count <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n        todos<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>json<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'data'</span><span class=\"token punctuation\">)</span>\n        \n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token string\">'todo_id'</span><span class=\"token punctuation\">:</span> idx<span class=\"token punctuation\">,</span>\n            <span class=\"token string\">'data'</span><span class=\"token punctuation\">:</span> todos<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">}</span>\n\n\n<span class=\"token decorator annotation punctuation\">@api<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/todos/&lt;int:todo_id>'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">TodoSimple</span><span class=\"token punctuation\">(</span>Resource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> todo_id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token string\">'todo_id'</span><span class=\"token punctuation\">:</span> todo_id<span class=\"token punctuation\">,</span>\n            <span class=\"token string\">'data'</span><span class=\"token punctuation\">:</span> todos<span class=\"token punctuation\">[</span>todo_id<span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">put</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> todo_id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        todos<span class=\"token punctuation\">[</span>todo_id<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>json<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'data'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token string\">'todo_id'</span><span class=\"token punctuation\">:</span> todo_id<span class=\"token punctuation\">,</span>\n            <span class=\"token string\">'data'</span><span class=\"token punctuation\">:</span> todos<span class=\"token punctuation\">[</span>todo_id<span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">def</span> <span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> todo_id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">del</span> todos<span class=\"token punctuation\">[</span>todo_id<span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token string\">\"delete\"</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">\"success\"</span>\n        <span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\"__main__\"</span><span class=\"token punctuation\">:</span>\n    app<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span>debug<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> host<span class=\"token operator\">=</span><span class=\"token string\">'0.0.0.0'</span><span class=\"token punctuation\">,</span> port<span class=\"token operator\">=</span><span class=\"token number\">80</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p align=\"center\">\n\t<img src=\"/post_image/flask-restful/1-4.PNG\" width=\"75%\"/>\n\t<p align=\"center\" style=\"color:#888888; font-size: 12px;\">\n\t\tPOST 요청\n\t</p>\n</p>\n<p align=\"center\">\n\t<img src=\"/post_image/flask-restful/1-5.PNG\" width=\"75%\"/>\n\t<p align=\"center\" style=\"color:#888888; font-size: 12px;\">\n\t\tGET 요청\n\t</p>\n</p>\n<p align=\"center\">\n\t<img src=\"/post_image/flask-restful/1-6.PNG\" width=\"75%\"/>\n\t<p align=\"center\" style=\"color:#888888; font-size: 12px;\">\n\t\tPUT 요청\n\t</p>\n</p>\n<h2>마치며</h2>\n<p>만약 우리가 한 10개 이상의 REST API를 구현 해야 한다면 어떻게 해야 할까요? <strong>파일 분리</strong>는? <strong>API의 문서화</strong>는? 상당히 피곤 한 주제이지만, <strong>Flask-RESTX</strong>로 쉽게 해결 할 수 있습니다. 다음 시간에는 <strong>파일 분리</strong>와, <strong>문서화</strong>에 대해서 알아 보도록 하겠습니다!</p>","id":"f53007d2-9010-5610-99a4-c3945a264f69","frontmatter":{"date":"2020-07-06","path":"/python/flask-restapi-1","title":"Flask로 REST API 구현하기 - 1. Flask-RESTX","tags":["Python"],"keyword":"Python, python, 파이썬, Flask, restful, restapi, RESTX, flask restx","summary":"Flask로 쉽게 REST API 만들기","img":"https://cdn-images-1.medium.com/proxy/1*3UaLDKs6bJRMtYoPDCIWBw.png","series":"Flask"}}},"pageContext":{"series":{"data":{"allMarkdownRemark":{"edges":[{"node":{"id":"7d3d5ec9-4e8c-5145-9af6-9ac978b1a773","excerpt":"REST API를 사용 하게 된다면, 사용자 인증 방법으로 제일 많이 사용하는 것이 JWT (JSON Web Token) 입니다. JWT에 대해 더 알고 싶다면. Velopert 님의 게시글을 참고 해 주세요! 우선 설치해야 할 것 일단 와 를 설치 하여야 합니다. bcrypt 사용법 의 사용법은 두 가지로 나뉩니다. 암호화와 암호 일치 확인입니다. 우선 암호화 방법에 대해서 알아 보겠습니다. 암호화 방법 다음 코드를 보시겠습니다. In Out…","frontmatter":{"date":"2020-07-18","tags":["Python"],"path":"/python/flask-restapi-3","title":"Flask로 REST API 구현하기 - 3. JWT로 사용자 인증하기","img":"https://media.vlpt.us/images/dnjscksdn98/post/46839202-0ee0-4585-ac24-ec4e3152c012/jwt_logo.png?w=768","summary":"PyJWT와 bcrypt를 이용한 사용자 인증"}}},{"node":{"id":"8181ee01-cfb7-519b-869e-643ae402791f","excerpt":"저번 시간에는 Flask-RESTX 에 대한 기본적인 사용 법을 알아보고, 이를 이용하여 간단한 API Server를 만들어 보았습니다. 모두가 스파게티 코드를 원하지 않잖아요. 여러분은 당신의 코드가 스파게티 코드가 되는 것을 원치 않을 것 입니다. 그러므로 파일 분리는 우리가 무슨 어플리케이션을 만들던 필수적인 과정입니다. 저번 시간에 구현한 간단한 API…","frontmatter":{"date":"2020-07-09","tags":["Python"],"path":"/python/flask-restapi-2","title":"Flask로 REST API 구현하기 - 2. 파일 분리, 문서화","img":"https://dailylolpics.com/wp-content/uploads/2017/11/spaghetti-code.jpg","summary":"flask-restx의 파일 분리와 문서화"}}},{"node":{"id":"f53007d2-9010-5610-99a4-c3945a264f69","excerpt":"이번 시간에는 Flask로 간단히 REST API를 주고 받는 API Server를 만들어 보겠습니다. Flask란? Flask는 Python 기반의 Micro Web Framework 입니다. 배우기 쉽고, 간단한 코드 구현과 자유도가 높다는 점이 장점입니다. 왜 Flask로 API Server를 구현하나요? Flask는 현실적으로 서버의 Application단을 구현 한다기 보단 API Server…","frontmatter":{"date":"2020-07-06","tags":["Python"],"path":"/python/flask-restapi-1","title":"Flask로 REST API 구현하기 - 1. Flask-RESTX","img":"https://cdn-images-1.medium.com/proxy/1*3UaLDKs6bJRMtYoPDCIWBw.png","summary":"Flask로 쉽게 REST API 만들기"}}}]}}},"categoryPosts":{"data":{"allMarkdownRemark":{"edges":[{"node":{"id":"27b9e4bf-c724-5907-a2e1-753419005e3f","excerpt":"AWS S3 안녕하세요? Justkode 입니다. 이번 시간에는 AWS S3에 대해서 알아 보고, AWS S3 버킷 생성, 파일 접근 권한 설정, Python 코드 상에서의 접근을 해 보도록 하겠습니다. 일단 AWS S3에 대해서 간단하게 설명 드리겠습니다. AWS S…","frontmatter":{"date":"2021-07-16","tags":["Cloud-Computing","Python"],"path":"/data-science/just-cloud-computing-2","title":"[찍먹 Cloud Computing] 2. AWS S3","img":"/post_image/thumbnail/just-cloud-computing-2.jpg","summary":"AWS S3와 boto3를 사용 해 보자"}}},{"node":{"id":"10fd14b6-5b5d-5cae-919a-39c49bf86765","excerpt":"SQL 안녕하세요? Justkode 입니다. 오늘은 SQL에 대해서 간단하게 알아보는 시간을 가져보도록 하겠습니다. SQL은 Structured Query Language의 약자로, RDBMS의 데이터베이스를 주로 조회 하는데에 사용이 되는, 데이터베이스 관리 시스템(RDBMS)의 데이터를 관리하기 위해 설계된 특수 목적의 프로그래밍 언어입니다. 여기서 설명 하는 문법들은 많은 내용을 담지 않고, SQL…","frontmatter":{"date":"2021-07-11","tags":["Data-Science","Python"],"path":"/data-science/just-data-science-4","title":"[찍먹 Data Science] 4. SQL","img":"/post_image/thumbnail/just-data-science-4.jpg","summary":"SQL의 기본 문법에 대해 알아보자."}}},{"node":{"id":"7f7acc41-571e-5c31-8d50-6731f246b7b0","excerpt":"Matplotlib 안녕하세요? Justkode 입니다. 오늘은 Matplotlib에 대해서 알아보는 시간을 가져보도록 하겠습니다. Matplotlib는 데이터 분석을 위해 만들어진 라이브러리로 Numpy, Pandas…","frontmatter":{"date":"2021-07-08","tags":["Data-Science","Python"],"path":"/data-science/just-data-science-3","title":"[찍먹 Data Science] 3. Matplotlib","img":"/post_image/thumbnail/just-data-science-3.jpeg","summary":"데이터 시각화 모듈, Matplotlib을 알아보자."}}},{"node":{"id":"2c6f3c2b-da44-5e60-9334-2c126617710c","excerpt":"Pandas 안녕하세요? Justkode 입니다. 오늘은 Pandas에 대해서 심층있게 알아보는 시간을 가져보도록 하겠습니다. Pandas는 데이터 분석을 위해 만들어진 라이브러리로 Numpy와 함께 많이 사용 됩니다. 주로 사용하는 데이터 구조는 Dataframe과 Series로, Table 정보와 같은 데이터를 처리 하는데 이점이 있습니다. Series and DataFrame 첫 번째로 Series입니다. Series는…","frontmatter":{"date":"2021-07-04","tags":["Data-Science","Python"],"path":"/data-science/just-data-science-2","title":"[찍먹 Data Science] 2. Pandas","img":"/post_image/thumbnail/just-data-science-2.jpg","summary":"데이터 분석에 쓰이는 Pandas를 알아보자."}}}]}}}}},"staticQueryHashes":["234633779","63159454"]}