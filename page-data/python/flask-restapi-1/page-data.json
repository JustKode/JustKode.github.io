{"componentChunkName":"component---src-layouts-post-layout-tsx","path":"/python/flask-restapi-1","result":{"data":{"markdownRemark":{"html":"<p>이번 시간에는 <strong>Flask</strong>로 간단히 <strong>REST API</strong>를 주고 받는 <strong>API Server</strong>를 만들어 보겠습니다.</p>\n<h2>Flask란?</h2>\n<p><strong>Flask</strong>는 <strong>Python</strong> 기반의 <strong>Micro Web Framework</strong> 입니다. 배우기 쉽고, 간단한 코드 구현과 자유도가 높다는 점이 장점입니다.</p>\n<p align=\"center\">\n\t<img src=\"http://flask.palletsprojects.com/en/1.1.x/_images/flask-logo.png\" width=\"300px\"/>\n\t<p align=\"center\" style=\"color:#888888; font-size: 12px;\">\n\t\t자유도가 높은 만큼, 간단한 코드 구현을 권장합니다.\n\t</p>\n</p>\n<h2>왜 Flask로 API Server를 구현하나요?</h2>\n<p><strong>Flask</strong>는 현실적으로 서버의 <strong>Application</strong>단을 구현 한다기 보단 <strong>API Server</strong>의 역할을 더 많이 합니다. 애초에 이 친구는 <strong>Micro Web Framework</strong> 입니다. <strong>미니멀리즘</strong>을 표방하고 나온 친구죠. 그래서 사람들이 <strong>Flask</strong>로 <strong>API Server</strong>를 구현 하고, 이를 <strong>Docker</strong>나 <strong>Kubernetes</strong>를 이용해 스케쥴링을 하며 서버 자원을 유연하게 활용 하는 경우가 많습니다.</p>\n<p>즉, 요약해보면 장점은 세 가지 입니다.</p>\n<ol>\n<li><strong>API Server</strong>를 <strong>가볍게</strong> 구현 할 수 있습니다.</li>\n<li><strong>Docker</strong>나 <strong>Kubernetes</strong>를 이용해 여러 개의 컨테이너를 이용하여 스케쥴링이 용이 합니다.</li>\n<li>일단 <strong>쉽고, 코드가 짧습니다.</strong> (매우 중요)</li>\n</ol>\n<h2>Installation</h2>\n<p><code class=\"language-text\">flask</code>와 <strong>Flask</strong>의 <strong>Extension</strong>인 <code class=\"language-text\">flask-restx</code> <code class=\"language-text\">pip</code>을 이용하여 설치합니다. </p>\n<div class=\"gatsby-highlight\" data-language=\"terminal\"><pre class=\"language-terminal\"><code class=\"language-terminal\">$ pip install flask\n$ pip install flask-restx</code></pre></div>\n<h2>첫 번째 Flask Server</h2>\n<p>다음 코드를 통해서 첫 번째 <strong>Flask Server</strong>를 만들어 보겠습니다.</p>\n<blockquote>\n<p>app.py</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> flask <span class=\"token keyword\">import</span> Flask  <span class=\"token comment\"># 서버 구현을 위한 Flask 객체 import</span>\n<span class=\"token keyword\">from</span> flask_restx <span class=\"token keyword\">import</span> Api<span class=\"token punctuation\">,</span> Resource  <span class=\"token comment\"># Api 구현을 위한 Api 객체 import</span>\n\napp <span class=\"token operator\">=</span> Flask<span class=\"token punctuation\">(</span>__name__<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># Flask 객체 선언, 파라미터로 어플리케이션 패키지의 이름을 넣어줌.</span>\napi <span class=\"token operator\">=</span> Api<span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># Flask 객체에 Api 객체 등록</span>\n\n\n<span class=\"token decorator annotation punctuation\">@api<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/hello'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 데코레이터 이용, '/hello' 경로에 클래스 등록</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">HelloWorld</span><span class=\"token punctuation\">(</span>Resource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># GET 요청시 리턴 값에 해당 하는 dict를 JSON 형태로 반환</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"world!\"</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\"__main__\"</span><span class=\"token punctuation\">:</span>\n    app<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span>debug<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> host<span class=\"token operator\">=</span><span class=\"token string\">'0.0.0.0'</span><span class=\"token punctuation\">,</span> port<span class=\"token operator\">=</span><span class=\"token number\">80</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>그 다음 터미널에서 실행시켜 봅니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"terminal\"><pre class=\"language-terminal\"><code class=\"language-terminal\">python app.py</code></pre></div>\n<p>그리고 <strong>'<a href=\"http://localhost/hello\">http://localhost/hello</a>'</strong> 에 들어가 봅시다. 저는 구글 크롬의 확장 앱인, <a href=\"Advanced%20REST%20client\">https://chrome.google.com/webstore/detail/advanced-rest-client/hgmloofddffdnphfgcellkdfbfbjeloo?hl=ko</a>를 이용하여 테스트 했습니다.</p>\n<p>실행 결과는 다음과 같습니다. (저 같은 경우는 구름 IDE 환경에서 실행하여, 구름 IDE에서 제공하는 도메인으로 서버에 접속 하였습니다.)</p>\n<p align=\"center\">\n\t<img src=\"/post_image/flask-restful/1-1.PNG\" width=\"75%\"/>\n\t<p align=\"center\" style=\"color:#888888; font-size: 12px;\">\n\t\t정상적으로 API 요청이 된 모습.\n\t</p>\n</p>\n<h2>다양한 Resourceful Routing</h2>\n<p>route의 url에 query string이 아닌 <strong>url pattern</strong>을 이용할 수 있습니다. url 자체에 변수를 삽입하는 방법으로 가능 하며, <code class=\"language-text\">&lt;타입명:변수명&gt;</code> 형태로 작성하면 됩니다. 그 변수는 class의 멤버 함수의 파라미터로 삽입하여 사용 합니다.</p>\n<blockquote>\n<p>app.py</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> flask <span class=\"token keyword\">import</span> Flask\n<span class=\"token keyword\">from</span> flask_restx <span class=\"token keyword\">import</span> Resource<span class=\"token punctuation\">,</span> Api\n\napp <span class=\"token operator\">=</span> Flask<span class=\"token punctuation\">(</span>__name__<span class=\"token punctuation\">)</span>\napi <span class=\"token operator\">=</span> Api<span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">)</span>\n\n\n<span class=\"token decorator annotation punctuation\">@api<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/hello/&lt;string:name>'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># url pattern으로 name 설정</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Hello</span><span class=\"token punctuation\">(</span>Resource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 멤버 함수의 파라미터로 name 설정</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"message\"</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">\"Welcome, %s!\"</span> <span class=\"token operator\">%</span> name<span class=\"token punctuation\">}</span>\n    \n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\"__main__\"</span><span class=\"token punctuation\">:</span>\n    app<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span>debug<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> host<span class=\"token operator\">=</span><span class=\"token string\">'0.0.0.0'</span><span class=\"token punctuation\">,</span> port<span class=\"token operator\">=</span><span class=\"token number\">80</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p align=\"center\">\n\t<img src=\"/post_image/flask-restful/1-2.PNG\" width=\"75%\"/>\n\t<p align=\"center\" style=\"color:#888888; font-size: 12px;\">\n\t\turl pattern으로 파라미터를 인식, 값이 잘 들어간 것을 볼 수 있습니다.\n\t</p>\n</p>\n<h2>Status Code와 Header 설정</h2>\n<p>반환 하고자 하는 <strong>리턴 값</strong>으로 <strong>iterable</strong> 하게 값을 넣으면 됩니다. 순서는 다음과 같습니다.</p>\n<ol>\n<li>반환 하고자 하는 <strong>dict 객체</strong></li>\n<li>반환 하고자 하는 <strong>Status Code</strong></li>\n<li>반환 하고자 하는 <strong>Header</strong></li>\n</ol>\n<blockquote>\n<p>app.py</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> flask <span class=\"token keyword\">import</span> Flask\n<span class=\"token keyword\">from</span> flask_restx <span class=\"token keyword\">import</span> Resource<span class=\"token punctuation\">,</span> Api\n\napp <span class=\"token operator\">=</span> Flask<span class=\"token punctuation\">(</span>__name__<span class=\"token punctuation\">)</span>\napi <span class=\"token operator\">=</span> Api<span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">)</span>\n\n\n<span class=\"token decorator annotation punctuation\">@api<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/hello/&lt;string:name>'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Hello</span><span class=\"token punctuation\">(</span>Resource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"message\"</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">\"Welcome, %s!\"</span> <span class=\"token operator\">%</span> name<span class=\"token punctuation\">}</span>\n    \n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\"__main__\"</span><span class=\"token punctuation\">:</span>\n    app<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span>debug<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> host<span class=\"token operator\">=</span><span class=\"token string\">'0.0.0.0'</span><span class=\"token punctuation\">,</span> port<span class=\"token operator\">=</span><span class=\"token number\">80</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p align=\"center\">\n\t<img src=\"/post_image/flask-restful/1-3.PNG\" width=\"75%\"/>\n\t<p align=\"center\" style=\"color:#888888; font-size: 12px;\">\n\t\tStatus Code와 Header값이 잘 들어간 것을 확인 할 수 있습니다.\n\t</p>\n</p>\n<h2>GET, POST, PUT, DELETE</h2>\n<p><strong>GET, POST, PUT, DELETE</strong> 방식을 처리하는 방법은 단순합니다. <code class=\"language-text\">get</code>, <code class=\"language-text\">post</code>, <code class=\"language-text\">put</code>, <code class=\"language-text\">delete</code> 멤버 함수를 오버라이딩 하여 구현 해 주면 됩니다. <strong>body</strong>에 있는 데이터를 가져오기 위해서, 취하는 방법은 간단합니다. <code class=\"language-text\">flask</code> 모듈 내의 <code class=\"language-text\">request</code> 내의 <code class=\"language-text\">json</code> 객체를 이용하여, <strong>request body</strong>로 들어온 <strong>json</strong>값을 파싱하면 됩니다. <code class=\"language-text\">json</code> 객체는 <code class=\"language-text\">dict</code> 객체 입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> flask <span class=\"token keyword\">import</span> Flask<span class=\"token punctuation\">,</span> request\n<span class=\"token keyword\">from</span> flask_restx <span class=\"token keyword\">import</span> Resource<span class=\"token punctuation\">,</span> Api\n\napp <span class=\"token operator\">=</span> Flask<span class=\"token punctuation\">(</span>__name__<span class=\"token punctuation\">)</span>\napi <span class=\"token operator\">=</span> Api<span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">)</span>\n\ntodos <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\ncount <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n\n<span class=\"token decorator annotation punctuation\">@api<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/todos'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">TodoPost</span><span class=\"token punctuation\">(</span>Resource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">post</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">global</span> count\n        <span class=\"token keyword\">global</span> todos\n        \n        idx <span class=\"token operator\">=</span> count\n        count <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n        todos<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>json<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'data'</span><span class=\"token punctuation\">)</span>\n        \n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token string\">'todo_id'</span><span class=\"token punctuation\">:</span> idx<span class=\"token punctuation\">,</span>\n            <span class=\"token string\">'data'</span><span class=\"token punctuation\">:</span> todos<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">}</span>\n\n\n<span class=\"token decorator annotation punctuation\">@api<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/todos/&lt;int:todo_id>'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">TodoSimple</span><span class=\"token punctuation\">(</span>Resource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> todo_id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token string\">'todo_id'</span><span class=\"token punctuation\">:</span> todo_id<span class=\"token punctuation\">,</span>\n            <span class=\"token string\">'data'</span><span class=\"token punctuation\">:</span> todos<span class=\"token punctuation\">[</span>todo_id<span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">put</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> todo_id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        todos<span class=\"token punctuation\">[</span>todo_id<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>json<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'data'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token string\">'todo_id'</span><span class=\"token punctuation\">:</span> todo_id<span class=\"token punctuation\">,</span>\n            <span class=\"token string\">'data'</span><span class=\"token punctuation\">:</span> todos<span class=\"token punctuation\">[</span>todo_id<span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">def</span> <span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> todo_id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">del</span> todos<span class=\"token punctuation\">[</span>todo_id<span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token string\">\"delete\"</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">\"success\"</span>\n        <span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\"__main__\"</span><span class=\"token punctuation\">:</span>\n    app<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span>debug<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> host<span class=\"token operator\">=</span><span class=\"token string\">'0.0.0.0'</span><span class=\"token punctuation\">,</span> port<span class=\"token operator\">=</span><span class=\"token number\">80</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p align=\"center\">\n\t<img src=\"/post_image/flask-restful/1-4.PNG\" width=\"75%\"/>\n\t<p align=\"center\" style=\"color:#888888; font-size: 12px;\">\n\t\tPOST 요청\n\t</p>\n</p>\n<p align=\"center\">\n\t<img src=\"/post_image/flask-restful/1-5.PNG\" width=\"75%\"/>\n\t<p align=\"center\" style=\"color:#888888; font-size: 12px;\">\n\t\tGET 요청\n\t</p>\n</p>\n<p align=\"center\">\n\t<img src=\"/post_image/flask-restful/1-6.PNG\" width=\"75%\"/>\n\t<p align=\"center\" style=\"color:#888888; font-size: 12px;\">\n\t\tPUT 요청\n\t</p>\n</p>\n<h2>마치며</h2>\n<p>만약 우리가 한 10개 이상의 REST API를 구현 해야 한다면 어떻게 해야 할까요? <strong>파일 분리</strong>는? <strong>API의 문서화</strong>는? 상당히 피곤 한 주제이지만, <strong>Flast-RESTX</strong>로 쉽게 해결 할 수 있습니다. 다음 시간에는 <strong>파일 분리</strong>와, <strong>문서화</strong>에 대해서 알아 보도록 하겠습니다!</p>","id":"d2b53a1c-4786-5a53-80e0-ecf9640347e6","frontmatter":{"date":"2020-07-06","path":"/python/flask-restapi-1","title":"Flask로 REST API 구현하기 - 1. Flask-RESTX","tags":["Python"],"keyword":"Python, python, 파이썬, Flask, restful, restapi, RESTX, flask restx","summary":"Flask로 쉽게 REST API 만들기","img":"https://lh3.googleusercontent.com/proxy/Zwjb7511DhhU8VF4ytUYFU0D-RYDs9AaXjXDnGHnul2Arwl3WeA_y4VBP-ebSRl9AOPu-xEC1TWV3tJuII5aJtC48bN44KoxDANBtwu-3dvG7x3AKmKX_8E4VPfMka7ISzFSCItulQ","series":"Flask"}}},"pageContext":{"series":{"data":{"allMarkdownRemark":{"edges":[{"node":{"id":"d2b53a1c-4786-5a53-80e0-ecf9640347e6","excerpt":"이번 시간에는 Flask로 간단히 REST API를 주고 받는 API Server를 만들어 보겠습니다. Flask란? Flask는 Python 기반의 Micro Web Framework 입니다. 배우기 쉽고, 간단한 코드 구현과 자유도가 높다는 점이 장점입니다. 왜 Flask로 API Server를 구현하나요? Flask는 현실적으로 서버의 Application단을 구현 한다기 보단 API Server…","frontmatter":{"date":"2020-07-06","tags":["Python"],"path":"/python/flask-restapi-1","title":"Flask로 REST API 구현하기 - 1. Flask-RESTX","img":"https://lh3.googleusercontent.com/proxy/Zwjb7511DhhU8VF4ytUYFU0D-RYDs9AaXjXDnGHnul2Arwl3WeA_y4VBP-ebSRl9AOPu-xEC1TWV3tJuII5aJtC48bN44KoxDANBtwu-3dvG7x3AKmKX_8E4VPfMka7ISzFSCItulQ","summary":"Flask로 쉽게 REST API 만들기"}}}]}}},"categoryPosts":{"data":{"allMarkdownRemark":{"edges":[{"node":{"id":"d2b53a1c-4786-5a53-80e0-ecf9640347e6","excerpt":"이번 시간에는 Flask로 간단히 REST API를 주고 받는 API Server를 만들어 보겠습니다. Flask란? Flask는 Python 기반의 Micro Web Framework 입니다. 배우기 쉽고, 간단한 코드 구현과 자유도가 높다는 점이 장점입니다. 왜 Flask로 API Server를 구현하나요? Flask는 현실적으로 서버의 Application단을 구현 한다기 보단 API Server…","frontmatter":{"date":"2020-07-06","tags":["Python"],"path":"/python/flask-restapi-1","title":"Flask로 REST API 구현하기 - 1. Flask-RESTX","img":"https://lh3.googleusercontent.com/proxy/Zwjb7511DhhU8VF4ytUYFU0D-RYDs9AaXjXDnGHnul2Arwl3WeA_y4VBP-ebSRl9AOPu-xEC1TWV3tJuII5aJtC48bN44KoxDANBtwu-3dvG7x3AKmKX_8E4VPfMka7ISzFSCItulQ","summary":"Flask로 쉽게 REST API 만들기"}}},{"node":{"id":"003792ad-8b6f-54a2-b695-a83c358d53dd","excerpt":"…","frontmatter":{"date":"2020-06-13","tags":["Machine-Learning","Python"],"path":"/machine-learning/linear_model","title":"Python으로 알아보는 선형 회귀","img":"https://miro.medium.com/max/683/1*h6PuI6-PdPE8d4dTnhcg3w.png","summary":"scikit-learn으로 알아보는 Linear Regression"}}},{"node":{"id":"3f42e43d-c1df-5929-bf44-7dbab0bfa1f2","excerpt":"최단 경로 알고리즘은 지하철 노선도, 네비게이션 등 다방면에 사용되는 알고리즘입니다. 이번 시간에는 Python을 이용해 하나의 시작 정점으로 부터 모든 다른 정점까지의 최단 경로를 찾는 최단 경로 알고리즘인 다익스트라(dijkstra…","frontmatter":{"date":"2020-05-31","tags":["Python","Algorithm"],"path":"/algorithm/python-dijkstra","title":"Python으로 다익스트라(dijkstra) 알고리즘 구현하기","img":"https://ever-line.co.kr/images/use-1-2_img.png","summary":"최단 경로를 찾아보자"}}},{"node":{"id":"29546be3-1a03-54d6-9b13-9d89593d3d63","excerpt":"우리가 가공한 데이터들을  객체에 녹여 내는 것을 성공 했다고 치겠습니다! 이를 바로  등으로 변환하여 학습을 시도 하면 어떻게 될까요? 만약 feature마다 범위가 1-100, 0-1000…","frontmatter":{"date":"2020-05-03","tags":["Data-Science","Python"],"path":"/data-science/pandas-normalization","title":"Pandas에서 데이터 정규화 하기","img":"https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcTQU34oEynvWRbC1FvDCWj8Rn16cCqypKf8q9LKbI0i1SLWtU9e&usqp=CAU","summary":"데이터 전처리 방법 중 하나인 정규화"}}}]}}}}}}