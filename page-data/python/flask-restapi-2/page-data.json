{"componentChunkName":"component---src-layouts-post-layout-tsx","path":"/python/flask-restapi-2","result":{"data":{"markdownRemark":{"html":"<p>저번 시간에는 <strong>Flask-RESTX</strong> 에 대한 기본적인 사용 법을 알아보고, 이를 이용하여 간단한 <strong>API Server</strong>를 만들어 보았습니다.</p>\n<h2>모두가 스파게티 코드를 원하지 않잖아요.</h2>\n<p>여러분은 당신의 코드가 <strong>스파게티 코드</strong>가 되는 것을 원치 않을 것 입니다. 그러므로 <strong>파일 분리</strong>는 우리가 무슨 어플리케이션을 만들던 필수적인 과정입니다.</p>\n<p>저번 시간에 구현한 간단한 <strong>API 서버</strong>가 여러 가지 기능을 동시에 구현 한다고 가정 해 보겠습니다. 간단한 게시판을 위해 <strong>API 서버</strong>를 만든다고 했을 때, <strong>로그인, 회원 가입, 게시글, 댓글, 대댓글, 사용자 수정</strong> 등등... 대충 어림잡아 몇 백줄을 넘길 것 입니다. 코드 하나에 문제가 발생했을 때 대처 하기도 어려울 뿐더러, 가독성도 매우 떨어집니다. 그럼 <strong>Flask RESTX</strong> 에서는 파일 분리를 어떻게 실시 할까요?</p>\n<h3>add_namespace()</h3>\n<p><code class=\"language-text\">flask-restx</code>내부의 <code class=\"language-text\">Api</code> 객체의 <code class=\"language-text\">add_namespace()</code> 는 <code class=\"language-text\">flask-restx.Namespace</code> 객체를 특정 경로에 등록 할 수 있게 해줍니다. 그러면 <code class=\"language-text\">flask-restx.Namespace</code>는 무엇이냐? 어떻게 보면 <code class=\"language-text\">Flask</code> 객체에 <code class=\"language-text\">Blueprint</code>가 있다면, <code class=\"language-text\">Api</code> 객체에는 <code class=\"language-text\">Namespace</code>가 있는 격입니다. <code class=\"language-text\">Blueprint</code>를 모른다고요?  백문이 불여일견, 코드로 보시겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">namespace <span class=\"token operator\">=</span> Namespace<span class=\"token punctuation\">(</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 첫 번째</span>\n\n<span class=\"token decorator annotation punctuation\">@namespace<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">HelloWorld</span><span class=\"token punctuation\">(</span>Resource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  \n    <span class=\"token keyword\">def</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"hello\"</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">\"world!\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">201</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"hi\"</span><span class=\"token punctuation\">:</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">}</span>\n\t\t\napi<span class=\"token punctuation\">.</span>add_namespace<span class=\"token punctuation\">(</span>namespace<span class=\"token punctuation\">,</span> <span class=\"token string\">'/hello'</span><span class=\"token punctuation\">)</span>  \n\n\n<span class=\"token decorator annotation punctuation\">@api<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/hello'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 두 번째</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">HelloWorld</span><span class=\"token punctuation\">(</span>Resource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"hello\"</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">\"world!\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">201</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"hi\"</span><span class=\"token punctuation\">:</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>그럼 이야기는 간단해 졌습니다! 외부에서 <strong>클래스</strong>를 구현하고, 이를 import 한 다음 <code class=\"language-text\">add_resource()</code>를 통해 <strong>클래스</strong>를 등록 해 주면 됩니다.</p>\n<p>다음은 <a href=\"/python/flask-restapi-1\">Flask로 REST API 구현하기 - 1. Flask-RESTX</a> 에서 구현한 <strong>Todo API Server</strong> 와 같은 기능을 합니다. </p>\n<blockquote>\n<p>app.py</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> flask <span class=\"token keyword\">import</span> Flask\n<span class=\"token keyword\">from</span> flask_restx <span class=\"token keyword\">import</span> Resource<span class=\"token punctuation\">,</span> Api\n<span class=\"token keyword\">from</span> todo <span class=\"token keyword\">import</span> Todo\n\napp <span class=\"token operator\">=</span> Flask<span class=\"token punctuation\">(</span>__name__<span class=\"token punctuation\">)</span>\napi <span class=\"token operator\">=</span> Api<span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">)</span>\n\napi<span class=\"token punctuation\">.</span>add_namespace<span class=\"token punctuation\">(</span>Todo<span class=\"token punctuation\">,</span> <span class=\"token string\">'/todos'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\"__main__\"</span><span class=\"token punctuation\">:</span>\n    app<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span>debug<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> host<span class=\"token operator\">=</span><span class=\"token string\">'0.0.0.0'</span><span class=\"token punctuation\">,</span> port<span class=\"token operator\">=</span><span class=\"token number\">80</span><span class=\"token punctuation\">)</span></code></pre></div>\n<blockquote>\n<p>todo.py</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> flask <span class=\"token keyword\">import</span> request\n<span class=\"token keyword\">from</span> flask_restx <span class=\"token keyword\">import</span> Resource<span class=\"token punctuation\">,</span> Api<span class=\"token punctuation\">,</span> Namespace\n\n\ntodos <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\ncount <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n\n\nTodo <span class=\"token operator\">=</span> Namespace<span class=\"token punctuation\">(</span><span class=\"token string\">'Todo'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token decorator annotation punctuation\">@Todo<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">TodoPost</span><span class=\"token punctuation\">(</span>Resource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">post</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">global</span> count\n        <span class=\"token keyword\">global</span> todos\n        \n        idx <span class=\"token operator\">=</span> count\n        count <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n        todos<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>json<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'data'</span><span class=\"token punctuation\">)</span>\n        \n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token string\">'todo_id'</span><span class=\"token punctuation\">:</span> idx<span class=\"token punctuation\">,</span>\n            <span class=\"token string\">'data'</span><span class=\"token punctuation\">:</span> todos<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">}</span>\n\n\n<span class=\"token decorator annotation punctuation\">@Todo<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/&lt;int:todo_id>'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">TodoSimple</span><span class=\"token punctuation\">(</span>Resource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> todo_id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token string\">'todo_id'</span><span class=\"token punctuation\">:</span> todo_id<span class=\"token punctuation\">,</span>\n            <span class=\"token string\">'data'</span><span class=\"token punctuation\">:</span> todos<span class=\"token punctuation\">[</span>todo_id<span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">put</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> todo_id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        todos<span class=\"token punctuation\">[</span>todo_id<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>json<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'data'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token string\">'todo_id'</span><span class=\"token punctuation\">:</span> todo_id<span class=\"token punctuation\">,</span>\n            <span class=\"token string\">'data'</span><span class=\"token punctuation\">:</span> todos<span class=\"token punctuation\">[</span>todo_id<span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">def</span> <span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> todo_id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">del</span> todos<span class=\"token punctuation\">[</span>todo_id<span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token string\">\"delete\"</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">\"success\"</span>\n        <span class=\"token punctuation\">}</span></code></pre></div>\n<h2>또 다른 문제, 문서화.</h2>\n<p>자! 대충 파일 분리도 하고, 유지 보수 문제도 조금은 해결 했습니다. 문제는 무엇이냐면, 우리가 만든 API들을 어떻게 프론트앤드 개발자에게 전달 할 수 있을까요? 정답은 <strong>문서화</strong> 입니다. 한번, 방금 짠 API 서버를 실행 한 후, <strong>'<a href=\"http://localhost/\">http://localhost/</a>'</strong> 에 들어가 볼까요?</p>\n<p align=\"center\">\n\t<img src=\"/post_image/flask-restful/2-1.PNG\" width=\"75%\"/>\n\t<p align=\"center\" style=\"color:#888888; font-size: 12px;\">\n\t\t우리가 몰랐던 API 문서\n\t</p>\n</p>\n<p>우리는 이런 홈페이지를 만든 기억이 없습니다. 그렇습니다. 이는 <code class=\"language-text\">flask-RESTX</code> 의 기본 기능으로 제공하는 <a href=\"https://swagger.io/\">Swagger</a> 기반의 홈페이지 입니다.</p>\n<p>이를 제대로 활용 하면, <strong>죽여주는 API 웹 문서</strong>를 만들어 줄 수 있을 것 같습니다. 지금은 API에 대한 <strong>설명, 예시, 데이터 타입</strong> 아무것도 명시 되어 있지 않는 상황입니다. 우리는 어떻게 하면 좋을까요?</p>\n<h3>Api()</h3>\n<p>일단 가장 위에 있는 설명부터 만지는 게 좋아 보입니다. 위 설명은 <code class=\"language-text\">Api</code> 객체의 생성자를 호출 할 때, 해당하는 파라미터로 값을 넣어 주면 수정 가능합니다. 파라미터는 다음과 같습니다.</p>\n<ul>\n<li><code class=\"language-text\">version</code>: API Server의 <strong>버전</strong>을 명시합니다.</li>\n<li><code class=\"language-text\">title</code>: API Server의 <strong>이름</strong>을 명시합니다.</li>\n<li><code class=\"language-text\">description</code>: API Server의 <strong>설명</strong>을 명시합니다.</li>\n<li><code class=\"language-text\">terms_url</code>: API Server의 <strong>Base Url</strong>을 명시합니다. </li>\n<li><code class=\"language-text\">contact</code>: 제작자 <strong>E-Mail</strong> 등을 삽입합니다.</li>\n<li><code class=\"language-text\">license</code>: API Server의 <strong>라이센스</strong>를 명시 합니다. </li>\n<li><code class=\"language-text\">license_url</code>: API Server의 <strong>라이센스 링크</strong>를 명시 합니다.</li>\n</ul>\n<p>한번 <code class=\"language-text\">app.py</code> 에 있는 <code class=\"language-text\">Api</code> 객체의 생성자 파라미터를 수정 해 볼까요?</p>\n<blockquote>\n<p>app.py</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\napi <span class=\"token operator\">=</span> Api<span class=\"token punctuation\">(</span>\n    app<span class=\"token punctuation\">,</span>\n    version<span class=\"token operator\">=</span><span class=\"token string\">'0.1'</span><span class=\"token punctuation\">,</span>\n    title<span class=\"token operator\">=</span><span class=\"token string\">\"JustKode's API Server\"</span><span class=\"token punctuation\">,</span>\n    description<span class=\"token operator\">=</span><span class=\"token string\">\"JustKode's Todo API Server!\"</span><span class=\"token punctuation\">,</span>\n    terms_url<span class=\"token operator\">=</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span>\n    contact<span class=\"token operator\">=</span><span class=\"token string\">\"justkode@kakao.com\"</span><span class=\"token punctuation\">,</span>\n    license<span class=\"token operator\">=</span><span class=\"token string\">\"MIT\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></code></pre></div>\n<p align=\"center\">\n\t<img src=\"/post_image/flask-restful/2-2.PNG\" width=\"75%\"/>\n\t<p align=\"center\" style=\"color:#888888; font-size: 12px;\">\n\t\t전보다 조금 괜찮아졌어요!\n\t</p>\n</p>\n<h3>Namespace()</h3>\n<p><code class=\"language-text\">Namespace</code> 객체도 생성자 파라미터를 조정하여, 내용을 수정 할 수 있습니다. 한 번 볼까요?</p>\n<ul>\n<li><code class=\"language-text\">title</code>: Namespace의 <strong>이름</strong>을 명시합니다.</li>\n<li><code class=\"language-text\">description</code>: Namespace의 <strong>설명</strong>을 명시합니다.</li>\n</ul>\n<p>한번 <code class=\"language-text\">todo.py</code> 에 있는 <code class=\"language-text\">Namespace</code> 객체의 생성자 파라미터를 수정 해 볼까요?</p>\n<blockquote>\n<p>todo.py</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\nTodo <span class=\"token operator\">=</span> Namespace<span class=\"token punctuation\">(</span>\n    name<span class=\"token operator\">=</span><span class=\"token string\">\"Todos\"</span><span class=\"token punctuation\">,</span>\n    description<span class=\"token operator\">=</span><span class=\"token string\">\"Todo 리스트를 작성하기 위해 사용하는 API.\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></code></pre></div>\n<p align=\"center\">\n\t<img src=\"/post_image/flask-restful/2-3.PNG\" width=\"75%\"/>\n\t<p align=\"center\" style=\"color:#888888; font-size: 12px;\">\n\t\tTodos 옆에 설명이 추가 되었어요!\n\t</p>\n</p>\n<h3>\"\"\"설명\"\"\"</h3>\n<p><strong>Python</strong>의 <strong>Comment</strong>를 이용하여 Document에 설명을 추가 할 수 있습니다.</p>\n<blockquote>\n<p>todo.py</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token decorator annotation punctuation\">@Todo<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">TodoPost</span><span class=\"token punctuation\">(</span>Resource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">post</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"Todo 리스트에 할 일을 등록 합니다.\"\"\"</span>\n        <span class=\"token keyword\">global</span> count\n        <span class=\"token keyword\">global</span> todos\n        \n        idx <span class=\"token operator\">=</span> count\n        count <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n        todos<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>json<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'data'</span><span class=\"token punctuation\">)</span>\n        \n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token string\">'todo_id'</span><span class=\"token punctuation\">:</span> idx<span class=\"token punctuation\">,</span>\n            <span class=\"token string\">'data'</span><span class=\"token punctuation\">:</span> todos<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">}</span>\n\n\n<span class=\"token decorator annotation punctuation\">@Todo<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/&lt;int:todo_id>'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">TodoSimple</span><span class=\"token punctuation\">(</span>Resource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> todo_id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"Todo 리스트에 todo_id와 일치하는 ID를 가진 할 일을 가져옵니다.\"\"\"</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token string\">'todo_id'</span><span class=\"token punctuation\">:</span> todo_id<span class=\"token punctuation\">,</span>\n            <span class=\"token string\">'data'</span><span class=\"token punctuation\">:</span> todos<span class=\"token punctuation\">[</span>todo_id<span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">def</span> <span class=\"token function\">put</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> todo_id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"Todo 리스트에 todo_id와 일치하는 ID를 가진 할 일을 수정합니다.\"\"\"</span>\n        todos<span class=\"token punctuation\">[</span>todo_id<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>json<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'data'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token string\">'todo_id'</span><span class=\"token punctuation\">:</span> todo_id<span class=\"token punctuation\">,</span>\n            <span class=\"token string\">'data'</span><span class=\"token punctuation\">:</span> todos<span class=\"token punctuation\">[</span>todo_id<span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">def</span> <span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> todo_id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"Todo 리스트에 todo_id와 일치하는 ID를 가진 할 일을 삭제합니다.\"\"\"</span>\n        <span class=\"token keyword\">del</span> todos<span class=\"token punctuation\">[</span>todo_id<span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token string\">\"delete\"</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">\"success\"</span>\n        <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></code></pre></div>\n<p align=\"center\">\n\t<img src=\"/post_image/flask-restful/2-4.PNG\" width=\"75%\"/>\n\t<p align=\"center\" style=\"color:#888888; font-size: 12px;\">\n\t\t각 API 옆에 설명이 추가 되었어요!\n\t</p>\n</p>\n<h3>Namespace.doc(), Namespace.expect(), Namespace.response()</h3>\n<p><strong>참고: <code class=\"language-text\">Namespace</code> 객체가 아닌 <code class=\"language-text\">Api</code> 객체에서도 작동합니다.</strong></p>\n<p>일단 많은 것들을 설명 하기 전에 <code class=\"language-text\">Namespace.model()</code>에 대해 설명 하고자 합니다. <code class=\"language-text\">Namespace.model()</code>은 <strong>입력, 출력에 대한 스키마</strong>를 나타내는 객체 입니다. <code class=\"language-text\">flask_restx</code> 내의 <code class=\"language-text\">field</code> 클래스를 이용하여, 설명, 필수 여부, 예시를 넣을 수 있습니다.</p>\n<p>또한 <code class=\"language-text\">Namespace.inherit()</code>을 이용하여, <code class=\"language-text\">Namespace.model()</code> 을 상속 받을 수 있습니다.</p>\n<blockquote>\n<p>todo.py</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\ntodo_fields <span class=\"token operator\">=</span> Todo<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">(</span><span class=\"token string\">'Todo'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>  <span class=\"token comment\"># Model 객체 생성</span>\n    <span class=\"token string\">'data'</span><span class=\"token punctuation\">:</span> fields<span class=\"token punctuation\">.</span>String<span class=\"token punctuation\">(</span>description<span class=\"token operator\">=</span><span class=\"token string\">'a Todo'</span><span class=\"token punctuation\">,</span> required<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> example<span class=\"token operator\">=</span><span class=\"token string\">\"what to do\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\ntodo_fields_with_id <span class=\"token operator\">=</span> Todo<span class=\"token punctuation\">.</span>inherit<span class=\"token punctuation\">(</span><span class=\"token string\">'Todo With ID'</span><span class=\"token punctuation\">,</span> todo_fields<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>  <span class=\"token comment\"># todo_fields 상속 받음</span>\n    <span class=\"token string\">'todo_id'</span><span class=\"token punctuation\">:</span> fields<span class=\"token punctuation\">.</span>Integer<span class=\"token punctuation\">(</span>description<span class=\"token operator\">=</span><span class=\"token string\">'a Todo ID'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></code></pre></div>\n<p align=\"center\">\n\t<img src=\"/post_image/flask-restful/2-5.PNG\" width=\"75%\"/>\n\t<p align=\"center\" style=\"color:#888888; font-size: 12px;\">\n\t\t스키마 모델이 추가 됐어요!\n\t</p>\n</p>\n<h3>Namespace.doc()</h3>\n<p><code class=\"language-text\">Namespace.doc()</code> 데코레이터를 이용하여, <strong>Status Code</strong> 마다 설명을 추가하거나, <strong>쿼리 파라미터</strong>에 대한 설명을 추가 할 수 있습니다.</p>\n<ul>\n<li><code class=\"language-text\">params</code>: <code class=\"language-text\">dict</code> 객체를 받으며, 키로는 파라미터 변수명, 값으로는 설명을 적을 수 있습니다.</li>\n<li><code class=\"language-text\">responses</code>: <code class=\"language-text\">dict</code> 객체를 받으며, 키로는 Status Code, 값으로는 설멍을 적을 수 있습니다.</li>\n</ul>\n<blockquote>\n<p>todo.py</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token decorator annotation punctuation\">@Todo<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/&lt;int:todo_id>'</span><span class=\"token punctuation\">)</span>\n<span class=\"token decorator annotation punctuation\">@Todo<span class=\"token punctuation\">.</span>doc</span><span class=\"token punctuation\">(</span>params<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">'todo_id'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'An ID'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">TodoSimple</span><span class=\"token punctuation\">(</span>Resource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n\t<span class=\"token punctuation\">[</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">]</span>\n\t\n\t<span class=\"token decorator annotation punctuation\">@Todo<span class=\"token punctuation\">.</span>doc</span><span class=\"token punctuation\">(</span>responses<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">202</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'Success'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token decorator annotation punctuation\">@Todo<span class=\"token punctuation\">.</span>doc</span><span class=\"token punctuation\">(</span>responses<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">500</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'Failed'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> todo_id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"Todo 리스트에 todo_id와 일치하는 ID를 가진 할 일을 삭제합니다.\"\"\"</span>\n        <span class=\"token keyword\">del</span> todos<span class=\"token punctuation\">[</span>todo_id<span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token string\">\"delete\"</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">\"success\"</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">202</span>\n\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></code></pre></div>\n<p align=\"center\">\n\t<img src=\"/post_image/flask-restful/2-6.PNG\" width=\"75%\"/>\n\t<p align=\"center\" style=\"color:#888888; font-size: 12px;\">\n\t\t파라미터와 Status Code에 대한 설명이 추가 됐어요!\n\t</p>\n</p>\n<h3>Namespace.expect()</h3>\n<p>말 그대로, <strong>특정 스키마가 들어 올것을 기대 한다.</strong> 라고 보면 됩니다. <strong>Namespace.Model</strong> 객체를 등록하면 됩니다.</p>\n<h3>Namespace.response()</h3>\n<p>말 그대로, <strong>특정 스키마가 반환 된다.</strong> 라는 것을 알려 준다고 보면 됩니다.</p>\n<p>첫 번째 파라미터로 <strong>Status Code</strong>, 두 번째 파라미터로 <strong>설명</strong>, 세 번째 파라미터로 <strong><code class=\"language-text\">Namespace.Model</code> 객체</strong>가 들어 갑니다.</p>\n<blockquote>\n<p>todo.py</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">TodoPost</span><span class=\"token punctuation\">(</span>Resource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token decorator annotation punctuation\">@Todo<span class=\"token punctuation\">.</span>expect</span><span class=\"token punctuation\">(</span>todo_fields<span class=\"token punctuation\">)</span>\n    <span class=\"token decorator annotation punctuation\">@Todo<span class=\"token punctuation\">.</span>response</span><span class=\"token punctuation\">(</span><span class=\"token number\">201</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Success'</span><span class=\"token punctuation\">,</span> todo_fields_with_id<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">post</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"Todo 리스트에 할 일을 등록 합니다.\"\"\"</span>\n        <span class=\"token keyword\">global</span> count\n        <span class=\"token keyword\">global</span> todos\n        \n        idx <span class=\"token operator\">=</span> count\n        count <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n        todos<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>json<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'data'</span><span class=\"token punctuation\">)</span>\n        \n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token string\">'todo_id'</span><span class=\"token punctuation\">:</span> idx<span class=\"token punctuation\">,</span>\n            <span class=\"token string\">'data'</span><span class=\"token punctuation\">:</span> todos<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">201</span>\n\t\t\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></code></pre></div>\n<p align=\"center\">\n\t<img src=\"/post_image/flask-restful/2-7.PNG\" width=\"75%\"/>\n\t<p align=\"center\" style=\"color:#888888; font-size: 12px;\">\n\t\tParameters와 Responses에 대한 설명이 추가 됐어요!\n\t</p>\n</p>\n<h3>전체 코드</h3>\n<blockquote>\n<p>app.py</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> flask <span class=\"token keyword\">import</span> Flask\n<span class=\"token keyword\">from</span> flask_restx <span class=\"token keyword\">import</span> Resource<span class=\"token punctuation\">,</span> Api\n<span class=\"token keyword\">from</span> todo <span class=\"token keyword\">import</span> Todo\n\napp <span class=\"token operator\">=</span> Flask<span class=\"token punctuation\">(</span>__name__<span class=\"token punctuation\">)</span>\napi <span class=\"token operator\">=</span> Api<span class=\"token punctuation\">(</span>\n    app<span class=\"token punctuation\">,</span>\n    version<span class=\"token operator\">=</span><span class=\"token string\">'0.1'</span><span class=\"token punctuation\">,</span>\n    title<span class=\"token operator\">=</span><span class=\"token string\">\"JustKode's API Server\"</span><span class=\"token punctuation\">,</span>\n    description<span class=\"token operator\">=</span><span class=\"token string\">\"JustKode's Todo API Server!\"</span><span class=\"token punctuation\">,</span>\n    terms_url<span class=\"token operator\">=</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span>\n    contact<span class=\"token operator\">=</span><span class=\"token string\">\"justkode@kakao.com\"</span><span class=\"token punctuation\">,</span>\n    license<span class=\"token operator\">=</span><span class=\"token string\">\"MIT\"</span>\n<span class=\"token punctuation\">)</span>\n\napi<span class=\"token punctuation\">.</span>add_namespace<span class=\"token punctuation\">(</span>Todo<span class=\"token punctuation\">,</span> <span class=\"token string\">'/todos'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\"__main__\"</span><span class=\"token punctuation\">:</span>\n    app<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span>debug<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> host<span class=\"token operator\">=</span><span class=\"token string\">'0.0.0.0'</span><span class=\"token punctuation\">,</span> port<span class=\"token operator\">=</span><span class=\"token number\">80</span><span class=\"token punctuation\">)</span></code></pre></div>\n<blockquote>\n<p>todo.py</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> flask <span class=\"token keyword\">import</span> request\n<span class=\"token keyword\">from</span> flask_restx <span class=\"token keyword\">import</span> Resource<span class=\"token punctuation\">,</span> Api<span class=\"token punctuation\">,</span> Namespace<span class=\"token punctuation\">,</span> fields\n\n\ntodos <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\ncount <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n\n\nTodo <span class=\"token operator\">=</span> Namespace<span class=\"token punctuation\">(</span>\n    name<span class=\"token operator\">=</span><span class=\"token string\">\"Todos\"</span><span class=\"token punctuation\">,</span>\n    description<span class=\"token operator\">=</span><span class=\"token string\">\"Todo 리스트를 작성하기 위해 사용하는 API.\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span>\n\ntodo_fields <span class=\"token operator\">=</span> Todo<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">(</span><span class=\"token string\">'Todo'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>  <span class=\"token comment\"># Model 객체 생성</span>\n    <span class=\"token string\">'data'</span><span class=\"token punctuation\">:</span> fields<span class=\"token punctuation\">.</span>String<span class=\"token punctuation\">(</span>description<span class=\"token operator\">=</span><span class=\"token string\">'a Todo'</span><span class=\"token punctuation\">,</span> required<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> example<span class=\"token operator\">=</span><span class=\"token string\">\"what to do\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\ntodo_fields_with_id <span class=\"token operator\">=</span> Todo<span class=\"token punctuation\">.</span>inherit<span class=\"token punctuation\">(</span><span class=\"token string\">'Todo With ID'</span><span class=\"token punctuation\">,</span> todo_fields<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'todo_id'</span><span class=\"token punctuation\">:</span> fields<span class=\"token punctuation\">.</span>Integer<span class=\"token punctuation\">(</span>description<span class=\"token operator\">=</span><span class=\"token string\">'a Todo ID'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token decorator annotation punctuation\">@Todo<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">TodoPost</span><span class=\"token punctuation\">(</span>Resource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token decorator annotation punctuation\">@Todo<span class=\"token punctuation\">.</span>expect</span><span class=\"token punctuation\">(</span>todo_fields<span class=\"token punctuation\">)</span>\n    <span class=\"token decorator annotation punctuation\">@Todo<span class=\"token punctuation\">.</span>response</span><span class=\"token punctuation\">(</span><span class=\"token number\">201</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Success'</span><span class=\"token punctuation\">,</span> todo_fields_with_id<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">post</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"Todo 리스트에 할 일을 등록 합니다.\"\"\"</span>\n        <span class=\"token keyword\">global</span> count\n        <span class=\"token keyword\">global</span> todos\n        \n        idx <span class=\"token operator\">=</span> count\n        count <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n        todos<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>json<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'data'</span><span class=\"token punctuation\">)</span>\n        \n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token string\">'todo_id'</span><span class=\"token punctuation\">:</span> idx<span class=\"token punctuation\">,</span>\n            <span class=\"token string\">'data'</span><span class=\"token punctuation\">:</span> todos<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">201</span>\n\n<span class=\"token decorator annotation punctuation\">@Todo<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/&lt;int:todo_id>'</span><span class=\"token punctuation\">)</span>\n<span class=\"token decorator annotation punctuation\">@Todo<span class=\"token punctuation\">.</span>doc</span><span class=\"token punctuation\">(</span>params<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">'todo_id'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'An ID'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">TodoSimple</span><span class=\"token punctuation\">(</span>Resource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token decorator annotation punctuation\">@Todo<span class=\"token punctuation\">.</span>response</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Success'</span><span class=\"token punctuation\">,</span> todo_fields_with_id<span class=\"token punctuation\">)</span>\n    <span class=\"token decorator annotation punctuation\">@Todo<span class=\"token punctuation\">.</span>response</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Failed'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> todo_id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"Todo 리스트에 todo_id와 일치하는 ID를 가진 할 일을 가져옵니다.\"\"\"</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token string\">'todo_id'</span><span class=\"token punctuation\">:</span> todo_id<span class=\"token punctuation\">,</span>\n            <span class=\"token string\">'data'</span><span class=\"token punctuation\">:</span> todos<span class=\"token punctuation\">[</span>todo_id<span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token decorator annotation punctuation\">@Todo<span class=\"token punctuation\">.</span>response</span><span class=\"token punctuation\">(</span><span class=\"token number\">202</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Success'</span><span class=\"token punctuation\">,</span> todo_fields_with_id<span class=\"token punctuation\">)</span>\n    <span class=\"token decorator annotation punctuation\">@Todo<span class=\"token punctuation\">.</span>response</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Failed'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">put</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> todo_id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"Todo 리스트에 todo_id와 일치하는 ID를 가진 할 일을 수정합니다.\"\"\"</span>\n        todos<span class=\"token punctuation\">[</span>todo_id<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>json<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'data'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token string\">'todo_id'</span><span class=\"token punctuation\">:</span> todo_id<span class=\"token punctuation\">,</span>\n            <span class=\"token string\">'data'</span><span class=\"token punctuation\">:</span> todos<span class=\"token punctuation\">[</span>todo_id<span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">202</span>\n    \n    <span class=\"token decorator annotation punctuation\">@Todo<span class=\"token punctuation\">.</span>doc</span><span class=\"token punctuation\">(</span>responses<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">202</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'Success'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token decorator annotation punctuation\">@Todo<span class=\"token punctuation\">.</span>doc</span><span class=\"token punctuation\">(</span>responses<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">500</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'Failed'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> todo_id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"Todo 리스트에 todo_id와 일치하는 ID를 가진 할 일을 삭제합니다.\"\"\"</span>\n        <span class=\"token keyword\">del</span> todos<span class=\"token punctuation\">[</span>todo_id<span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token string\">\"delete\"</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">\"success\"</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">202</span></code></pre></div>\n<h2>다음 시간에는...</h2>\n<p>다음 시간에는 <strong>Flask</strong>를 통해 <strong>사용자 인증</strong>을 해보는 방법을 알아 보겠습니다. 혹시, 이 포스트의 설명이 부족하다면, 댓글을 달아 주시거나, <a href=\"https://flask-restx.readthedocs.io/en/latest/index.html\">Flask-RESTX Document</a>를 참고 해 주세요!</p>","id":"6b8034b8-5cf2-5df3-a1f4-15a77648a9f2","frontmatter":{"date":"2020-07-09","path":"/python/flask-restapi-2","title":"Flask로 REST API 구현하기 - 2. 파일 분리, 문서화","tags":["Python"],"keyword":"Python, python, 파이썬, Flask, restful, restapi, RESTX, flask restx","summary":"flask-restx의 파일 분리와 문서화","img":"https://dailylolpics.com/wp-content/uploads/2017/11/spaghetti-code.jpg","series":"Flask"}}},"pageContext":{"series":{"data":{"allMarkdownRemark":{"edges":[{"node":{"id":"4eaf0a99-5f7d-575f-bdeb-cd5d5de6bc3d","excerpt":"2021-12-15 수정 PyJWT 2.x.x 버전으로 아래 게시물을 수정 하였습니다. REST API를 사용 하게 된다면, 사용자 인증 방법으로 제일 많이 사용하는 것이 JWT (JSON Web Token) 입니다. JWT에 대해 더 알고 싶다면. Velopert 님의 게시글을 참고 해 주세요! 우선 설치해야 할 것 일단 와 를 설치 하여야 합니다. bcrypt…","frontmatter":{"date":"2020-07-18","tags":["Python"],"path":"/python/flask-restapi-3","title":"Flask로 REST API 구현하기 - 3. JWT로 사용자 인증하기","img":"https://media.vlpt.us/images/dnjscksdn98/post/46839202-0ee0-4585-ac24-ec4e3152c012/jwt_logo.png?w=768","summary":"PyJWT와 bcrypt를 이용한 사용자 인증"}}},{"node":{"id":"6b8034b8-5cf2-5df3-a1f4-15a77648a9f2","excerpt":"저번 시간에는 Flask-RESTX 에 대한 기본적인 사용 법을 알아보고, 이를 이용하여 간단한 API Server를 만들어 보았습니다. 모두가 스파게티 코드를 원하지 않잖아요. 여러분은 당신의 코드가 스파게티 코드가 되는 것을 원치 않을 것 입니다. 그러므로 파일 분리는 우리가 무슨 어플리케이션을 만들던 필수적인 과정입니다. 저번 시간에 구현한 간단한 API…","frontmatter":{"date":"2020-07-09","tags":["Python"],"path":"/python/flask-restapi-2","title":"Flask로 REST API 구현하기 - 2. 파일 분리, 문서화","img":"https://dailylolpics.com/wp-content/uploads/2017/11/spaghetti-code.jpg","summary":"flask-restx의 파일 분리와 문서화"}}},{"node":{"id":"a64b75ff-dbea-53b6-8b5a-980b300ad8f6","excerpt":"이번 시간에는 Flask로 간단히 REST API를 주고 받는 API Server를 만들어 보겠습니다. Flask란? Flask는 Python 기반의 Micro Web Framework 입니다. 배우기 쉽고, 간단한 코드 구현과 자유도가 높다는 점이 장점입니다. 왜 Flask로 API Server를 구현하나요? Flask는 현실적으로 서버의 Application단을 구현 한다기 보단 API Server…","frontmatter":{"date":"2020-07-06","tags":["Python"],"path":"/python/flask-restapi-1","title":"Flask로 REST API 구현하기 - 1. Flask-RESTX","img":"https://cdn-images-1.medium.com/proxy/1*3UaLDKs6bJRMtYoPDCIWBw.png","summary":"Flask로 쉽게 REST API 만들기"}}}]}}},"categoryPosts":{"data":{"allMarkdownRemark":{"edges":[{"node":{"id":"f3e43e6f-5d36-5239-b7ec-ee45747150bd","excerpt":"AWS S3 안녕하세요? Justkode 입니다. 이번 시간에는 AWS S3에 대해서 알아 보고, AWS S3 버킷 생성, 파일 접근 권한 설정, Python 코드 상에서의 접근을 해 보도록 하겠습니다. 일단 AWS S3에 대해서 간단하게 설명 드리겠습니다. AWS S…","frontmatter":{"date":"2021-07-16","tags":["Cloud-Computing","Python"],"path":"/data-science/just-cloud-computing-2","title":"[찍먹 Cloud Computing] 2. AWS S3","img":"/post_image/thumbnail/just-cloud-computing-2.jpg","summary":"AWS S3와 boto3를 사용 해 보자"}}},{"node":{"id":"34bde66e-39b6-5ac2-952f-abfac8af008b","excerpt":"SQL 안녕하세요? Justkode 입니다. 오늘은 SQL에 대해서 간단하게 알아보는 시간을 가져보도록 하겠습니다. SQL은 Structured Query Language의 약자로, RDBMS의 데이터베이스를 주로 조회 하는데에 사용이 되는, 데이터베이스 관리 시스템(RDBMS)의 데이터를 관리하기 위해 설계된 특수 목적의 프로그래밍 언어입니다. 여기서 설명 하는 문법들은 많은 내용을 담지 않고, SQL…","frontmatter":{"date":"2021-07-11","tags":["Data-Science","Python"],"path":"/data-science/just-data-science-4","title":"[찍먹 Data Science] 4. SQL","img":"/post_image/thumbnail/just-data-science-4.jpg","summary":"SQL의 기본 문법에 대해 알아보자."}}},{"node":{"id":"a665dba1-d8d4-5bbe-98cd-1b8e95514c3d","excerpt":"Matplotlib 안녕하세요? Justkode 입니다. 오늘은 Matplotlib에 대해서 알아보는 시간을 가져보도록 하겠습니다. Matplotlib는 데이터 분석을 위해 만들어진 라이브러리로 Numpy, Pandas…","frontmatter":{"date":"2021-07-08","tags":["Data-Science","Python"],"path":"/data-science/just-data-science-3","title":"[찍먹 Data Science] 3. Matplotlib","img":"/post_image/thumbnail/just-data-science-3.jpeg","summary":"데이터 시각화 모듈, Matplotlib을 알아보자."}}},{"node":{"id":"9862b423-afa3-554a-8393-711ad503873f","excerpt":"Pandas 안녕하세요? Justkode 입니다. 오늘은 Pandas에 대해서 심층있게 알아보는 시간을 가져보도록 하겠습니다. Pandas는 데이터 분석을 위해 만들어진 라이브러리로 Numpy와 함께 많이 사용 됩니다. 주로 사용하는 데이터 구조는 Dataframe과 Series로, Table 정보와 같은 데이터를 처리 하는데 이점이 있습니다. Series and DataFrame 첫 번째로 Series입니다. Series는…","frontmatter":{"date":"2021-07-04","tags":["Data-Science","Python"],"path":"/data-science/just-data-science-2","title":"[찍먹 Data Science] 2. Pandas","img":"/post_image/thumbnail/just-data-science-2.jpg","summary":"데이터 분석에 쓰이는 Pandas를 알아보자."}}}]}}}}},"staticQueryHashes":["234633779","63159454"]}