{"componentChunkName":"component---src-layouts-post-layout-tsx","path":"/python/thread","result":{"data":{"markdownRemark":{"html":"<h1>Python Thread</h1>\n<p><code class=\"language-text\">Python</code>에서는 <strong>한 프로세스에서 여러 가지 병렬 처리</strong>를 위해 <code class=\"language-text\">Thread</code>를 구현 할 수 있는 <code class=\"language-text\">API</code>를 제공 합니다.</p>\n<p>프로그램을 여러 개로 나누지 않으며 하는 <code class=\"language-text\">Thread Programming</code>의 <strong>장점</strong>은 다음과 같습니다.</p>\n<ul>\n<li><strong>전역 변수</strong>를 이용한 <strong>메모리 공유</strong>를 통해 <strong>효율적인 메모리 사용</strong>이 가능</li>\n<li><strong>철저한 작업 분리</strong> 가능</li>\n<li><strong>코드 간결성</strong></li>\n</ul>\n<p>하지만, <strong>단점</strong> 또한 존재합니다.</p>\n<ul>\n<li><strong>디버깅 난이도</strong> 상승</li>\n<li><strong>구현 난이도</strong> 상승</li>\n<li><strong>교착 상태</strong>가 발생하지 않도록 주의 하여야 함</li>\n</ul>\n<p align=\"center\">\n\t<img src=\"https://i.pinimg.com/originals/ab/c1/18/abc1186d9ccdc7a49b0567bc499dcccf.png\" />\n\t<p align=\"center\" style=\"color:#888888; font-size: 12px;\">\n\t\t진짜 이렇게 된다니까요?\n\t</p>\n</p>\n<h2>Thread</h2>\n<p>일단 가장 기본적인 <code class=\"language-text\">threading.Thread</code>를 이용하는 방법 입니다. <code class=\"language-text\">threading.Thread(group=None, target=None, name=None, args=(), kwargs={}, *, daemon=None)</code> 객체의 생성자의 파라미터는 다음과 같습니다.</p>\n<ul>\n<li><code class=\"language-text\">target</code>: <code class=\"language-text\">Thread</code>의 <code class=\"language-text\">run()</code> 함수를 통해 돌리고 싶은 함수를 넣는다. <code class=\"language-text\">function</code>을 인자로 받는다.</li>\n<li><code class=\"language-text\">args</code>: <code class=\"language-text\">target</code>으로 넣은 함수의 <strong>args 파라미터</strong> 값을 <code class=\"language-text\">iterable</code> 한 객체로 넣으면 된다.</li>\n<li><code class=\"language-text\">kwargs</code>: <code class=\"language-text\">target</code>으로 넣은 함수의 <strong>kwargs 파라미터</strong> 값을 <code class=\"language-text\">dict</code> 객체로 넣으면 된다.</li>\n<li><code class=\"language-text\">name</code>: <code class=\"language-text\">Thread</code> 객체의 이름을 정한다. 없으면 \"Thread-N\" 이라는 <strong>unique</strong>한 값으로 정해진다. (N은 숫자다.)</li>\n<li><code class=\"language-text\">group</code>: <code class=\"language-text\">Thread</code>를 그룹화 하여 실행할 때 사용 한다.</li>\n<li><code class=\"language-text\">daemon</code>: <code class=\"language-text\">Thread</code>를 <code class=\"language-text\">Daemon Thread</code>로 만들고 싶을 때 사용 한다.</li>\n</ul>\n<p>또한, <code class=\"language-text\">threading.Thread</code> 객체의 내부 <strong>멤버함수</strong> 입니다.</p>\n<ul>\n<li><code class=\"language-text\">run()</code>: <code class=\"language-text\">Thread</code>에 등록 된 함수를 실행합니다.</li>\n<li><code class=\"language-text\">getName(), setName()</code>: 스레드 이름의 <strong>getter/setter</strong> 함수 입니다.</li>\n<li><code class=\"language-text\">is_alive()</code>: <strong>스레드가 실행 중</strong>인지를 반환 합니다.</li>\n<li><code class=\"language-text\">isDaemon(), setDaemon()</code>: 데몬 스레드를 지정하는 <strong>getter/setter</strong> 함수 입니다.</li>\n</ul>\n<h3>Example</h3>\n<p>예시 코드 입니다.</p>\n<ul>\n<li><strong>In</strong></li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> threading<span class=\"token punctuation\">,</span> time\n\nvar <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span>second<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\ttime<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span>second<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"This Thread Used\"</span><span class=\"token punctuation\">,</span> second<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Second\"</span><span class=\"token punctuation\">)</span>\n\nt <span class=\"token operator\">=</span> threading<span class=\"token punctuation\">.</span>Thread<span class=\"token punctuation\">(</span>target<span class=\"token operator\">=</span>func<span class=\"token punctuation\">,</span> args<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nt<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Program end\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<br>\n<ul>\n<li><strong>Out</strong></li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"terminal\"><pre class=\"language-terminal\"><code class=\"language-terminal\">Program end\nThis Thread Used 1 Second</code></pre></div>\n<h3>Daemon Thread</h3>\n<p>만약 <code class=\"language-text\">Thread</code>가 <strong>메인 프로세스</strong>가 종료 되면 같이 종료되는 <code class=\"language-text\">Daemon Thread</code>라면 어떻게 될 까요?</p>\n<ul>\n<li><strong>In</strong></li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> threading<span class=\"token punctuation\">,</span> time\n\nvar <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span>second<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\ttime<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span>second<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"This Thread Used\"</span><span class=\"token punctuation\">,</span> second<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Second\"</span><span class=\"token punctuation\">)</span>\n\nt <span class=\"token operator\">=</span> threading<span class=\"token punctuation\">.</span>Thread<span class=\"token punctuation\">(</span>target<span class=\"token operator\">=</span>func<span class=\"token punctuation\">,</span> args<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> daemon<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\nt<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Program end\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<br>\n<ul>\n<li><strong>Out</strong></li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"terminal\"><pre class=\"language-terminal\"><code class=\"language-terminal\">Program end</code></pre></div>\n<p>이렇게 <strong>메인 프로세스</strong>가 종료 됨에 따라서, <code class=\"language-text\">Daemon Thread</code>는 작동 하지 않게 됩니다.</p>\n<h3>Thread 정보 가져오기</h3>\n<p><code class=\"language-text\">Thread</code> 정보는 해당 스레드에서 <code class=\"language-text\">threading.current_thread()</code>를 통해 <code class=\"language-text\">Thread</code> 객체를 가져오거나, <code class=\"language-text\">threading.enumerate()</code>를 통해 <code class=\"language-text\">Thread</code> 객체 <code class=\"language-text\">list</code>를 가져 올 수 있습니다.</p>\n<ul>\n<li><strong>In</strong></li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> threading<span class=\"token punctuation\">,</span> time\n\nvar <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\ttime<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">0.3</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Current thread: \"</span><span class=\"token punctuation\">,</span> threading<span class=\"token punctuation\">.</span>current_thread<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>getName<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\tt <span class=\"token operator\">=</span> threading<span class=\"token punctuation\">.</span>Thread<span class=\"token punctuation\">(</span>target<span class=\"token operator\">=</span>func<span class=\"token punctuation\">)</span>\n\tt<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>threading<span class=\"token punctuation\">.</span><span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<br>\n<ul>\n<li><strong>Out</strong></li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"terminal\"><pre class=\"language-terminal\"><code class=\"language-terminal\">[&lt;_MainThread(MainThread, started 139696403076928)&gt;, &lt;Thread(Thread-1, started 139696381187840)&gt;, &lt;Thread(Thread-2, started 139696372795136)&gt;, &lt;Thread(Thread-3, started 139696294328064)&gt;, &lt;Threa\nd(Thread-4, started 139696285935360)&gt;, &lt;Thread(Thread-5, started 139696277542656)&gt;, &lt;Thread(Thread-6, started 139696269149952)&gt;, &lt;Thread(Thread-7, started 139696260757248)&gt;, &lt;Thread(Thread-8, st\narted 139696252364544)&gt;, &lt;Thread(Thread-9, started 139696243971840)&gt;, &lt;Thread(Thread-10, started 139695690348288)&gt;]\nCurrent thread:  Thread-1\nCurrent thread:  Thread-2\nCurrent thread:  Thread-3\nCurrent thread:  Thread-4\nCurrent thread:  Thread-5\nCurrent thread:  Thread-7\nCurrent thread:  Thread-8\nCurrent thread:  Thread-6\nCurrent thread:  Thread-9\nCurrent thread:  Thread-10</code></pre></div>\n<h2>마치며</h2>\n<p>훌륭한 프로그래머는 <strong>병렬 프로그래밍</strong>에 대해도 익숙해 져야 합니다. 생각해보면, <strong>스레드</strong>는 가장 가까운 곳에도 있습니다. <strong>서버 프로그래밍</strong>이나, GPU를 이용한 <strong>딥 러닝 학습</strong> 등 많은 곳에서 사용됩니다. 더 쉬운 설명을 원한다면, <a href=\"https://www.youtube.com/watch?v=iks_Xb9DtTM\">해당 링크</a>에서 영상을 시청 해 주세요.</p>","id":"9ab613aa-c8ca-51f3-9420-b83c071d443f","frontmatter":{"date":"2020-04-10","path":"/python/thread","title":"Python으로 Thread 구현하기.","tags":["Python"],"keyword":"Python, python, 파이썬, Thread, thread, 스레드, 스레드, Python Thread, 파이썬 스레드, 파이썬 스레드","summary":"Python에서의 병렬처리 방법","img":"https://i.imgur.com/CRLzESV.png","series":"Python Tips"}}},"pageContext":{"series":{"data":{"allMarkdownRemark":{"edges":[{"node":{"id":"5b3a68c4-e85a-53a8-bfa3-56882e6e8a3a","excerpt":"…","frontmatter":{"date":"2020-04-21","tags":["Python"],"path":"/python/try-except","title":"Python에서 try, except, raise로 예외 처리 하기.","img":"https://media.makeameme.org/created/exceptions-exceptions-everywhere-snh6tb.jpg","summary":"Python에서의 예외 처리 방법"}}},{"node":{"id":"9ab613aa-c8ca-51f3-9420-b83c071d443f","excerpt":"Python Thread 에서는 한 프로세스에서 여러 가지 병렬 처리를 위해 를 구현 할 수 있는 를 제공 합니다. 프로그램을 여러 개로 나누지 않으며 하는 의 장점은 다음과 같습니다. 전역 변수를 이용한 메모리 공유를 통해 효율적인 메모리 사용이 가능 철저한 작업 분리 가능 코드 간결성 하지만, 단점 또한 존재합니다. 디버깅 난이도 상승 구현 난이도 상승 교착 상태가 발생하지 않도록 주의 하여야 함 Thread…","frontmatter":{"date":"2020-04-10","tags":["Python"],"path":"/python/thread","title":"Python으로 Thread 구현하기.","img":"https://i.imgur.com/CRLzESV.png","summary":"Python에서의 병렬처리 방법"}}}]}}},"categoryPosts":{"data":{"allMarkdownRemark":{"edges":[{"node":{"id":"d2b53a1c-4786-5a53-80e0-ecf9640347e6","excerpt":"이번 시간에는 Flask로 간단히 REST API를 주고 받는 API Server를 만들어 보겠습니다. Flask란? Flask는 Python 기반의 Micro Web Framework 입니다. 배우기 쉽고, 간단한 코드 구현과 자유도가 높다는 점이 장점입니다. 왜 Flask로 API Server를 구현하나요? Flask는 현실적으로 서버의 Application단을 구현 한다기 보단 API Server…","frontmatter":{"date":"2020-07-06","tags":["Python"],"path":"/python/flask-restapi-1","title":"Flask로 REST API 구현하기 - 1. Flask-RESTX","img":"https://lh3.googleusercontent.com/proxy/Zwjb7511DhhU8VF4ytUYFU0D-RYDs9AaXjXDnGHnul2Arwl3WeA_y4VBP-ebSRl9AOPu-xEC1TWV3tJuII5aJtC48bN44KoxDANBtwu-3dvG7x3AKmKX_8E4VPfMka7ISzFSCItulQ","summary":"Flask로 쉽게 REST API 만들기"}}},{"node":{"id":"003792ad-8b6f-54a2-b695-a83c358d53dd","excerpt":"…","frontmatter":{"date":"2020-06-13","tags":["Machine-Learning","Python"],"path":"/machine-learning/linear_model","title":"Python으로 알아보는 선형 회귀","img":"https://miro.medium.com/max/683/1*h6PuI6-PdPE8d4dTnhcg3w.png","summary":"scikit-learn으로 알아보는 Linear Regression"}}},{"node":{"id":"3f42e43d-c1df-5929-bf44-7dbab0bfa1f2","excerpt":"최단 경로 알고리즘은 지하철 노선도, 네비게이션 등 다방면에 사용되는 알고리즘입니다. 이번 시간에는 Python을 이용해 하나의 시작 정점으로 부터 모든 다른 정점까지의 최단 경로를 찾는 최단 경로 알고리즘인 다익스트라(dijkstra…","frontmatter":{"date":"2020-05-31","tags":["Python","Algorithm"],"path":"/algorithm/python-dijkstra","title":"Python으로 다익스트라(dijkstra) 알고리즘 구현하기","img":"https://ever-line.co.kr/images/use-1-2_img.png","summary":"최단 경로를 찾아보자"}}},{"node":{"id":"29546be3-1a03-54d6-9b13-9d89593d3d63","excerpt":"우리가 가공한 데이터들을  객체에 녹여 내는 것을 성공 했다고 치겠습니다! 이를 바로  등으로 변환하여 학습을 시도 하면 어떻게 될까요? 만약 feature마다 범위가 1-100, 0-1000…","frontmatter":{"date":"2020-05-03","tags":["Data-Science","Python"],"path":"/data-science/pandas-normalization","title":"Pandas에서 데이터 정규화 하기","img":"https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcTQU34oEynvWRbC1FvDCWj8Rn16cCqypKf8q9LKbI0i1SLWtU9e&usqp=CAU","summary":"데이터 전처리 방법 중 하나인 정규화"}}}]}}}}}}