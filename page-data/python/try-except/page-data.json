{"componentChunkName":"component---src-layouts-post-layout-tsx","path":"/python/try-except","result":{"data":{"markdownRemark":{"html":"<p>항상 프로그램은 사용자의 실수든, 코드를 잘못 작성 했든, 원하지 않는 방향으로 흘러 갈 때가 있습니다. 그걸 방지 하기 위해선, <strong>예외처리</strong> 라는 것이 필요 합니다. <strong>예외처리</strong>는 프로그래밍의 세계에선 상당히 중요합니다. <strong>프로그램의 비정상적인 종료를 방지</strong>하고, 우리의 프로그램 설계 상 <strong>무엇이 잘못되었는지 알 수 있게끔 해주는 척도</strong>이기도 합니다. <code class=\"language-text\">Python</code>도 다른 언어와 마찬가지로, <code class=\"language-text\">try</code>, <code class=\"language-text\">except</code> 키워드를 이용하여, 예외 처리를 실시 할 수 있습니다. 한 번 가볍게 알아 볼까요?</p>\n<h2>try, except의 기본 사용법</h2>\n<p><code class=\"language-text\">Python</code> 에서 사용하는 <code class=\"language-text\">try</code>, <code class=\"language-text\">except</code>도 다른 언어에서 사용하듯 사용 하면 됩니다. <code class=\"language-text\">try</code> 문에서 <strong>예외처리 하고 싶은 코드</strong>를 작성 하고, <code class=\"language-text\">except</code> 문에서 <code class=\"language-text\">try</code> 문에서 작성한 코드가 에러를 발생 시켰을 때, <strong>에러를 어떻게 처리 할 껀지</strong> 코드를 작성 하면 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 코드 작성</span>\n        x <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"숫자를 입력 하세요: \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">break</span>\n    <span class=\"token keyword\">except</span> ValueError<span class=\"token punctuation\">:</span>  <span class=\"token comment\"># ValueError에 대한 특수한 예외 처리</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"이건 숫자가 아닌데... 다시 입력 하세요!\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>일단 여러 가지 <strong>에러 객체</strong>들에 대해서 알아 보겠습니다. 일단... 엄청 많으니 주로 사용하는 에러 객체들을 위주로 설명 하겠습니다.</p>\n<h2>Error List</h2>\n<ul>\n<li><code class=\"language-text\">AssertionError</code>: <a href=\"https://docs.python.org/ko/3/reference/simple_stmts.html#assert\">assert</a> 문이 제대로 작동하지 않을 때 발생합니다.</li>\n<li><code class=\"language-text\">IndexError</code>: 참조 하려는 <strong>인덱스가 범위를 벗어날 때</strong> 발생합니다.</li>\n<li><code class=\"language-text\">KeyError</code>: 참조 하려는 <strong>키가 기존 키 집합에서 찾을 수 없을 때</strong> 발생합니다.</li>\n<li><code class=\"language-text\">KeyboardInterrupt</code>: 사용자가 인터럽트 키(<code class=\"language-text\">Control + C</code>, 혹은 <code class=\"language-text\">Delete</code>)를 누를 때 발생하며, 모든 Exception을 잡는 코드에 의해 인터프리터가 종료하는 것을 막지 못하도록 <code class=\"language-text\">Exception</code> 상위에 있는 <code class=\"language-text\">BaseException</code>을 직접 계승 합니다.</li>\n<li><code class=\"language-text\">MemoryError</code>: 메모리가 부족하지만, 가비지 컬렉터가 일부 객체의 삭제를 함으로써 복구될 수 있는 경우 발생합니다.</li>\n<li><code class=\"language-text\">NameError</code>: 참조하는 지역, 전역 변수 혹은 함수, 클래스 등을 찾을 수 없을 때 발생합니다.</li>\n<li><code class=\"language-text\">OSError</code>: 시스템 함수가 <strong>시스템 관련 에러</strong>를 돌려줄 때 발생합니다. (파일을 찾을 수 없거나, 디스크가 찼거나..)</li>\n<li><code class=\"language-text\">OverflowError</code>: 산술 연산의 <strong>결과가 너무 커서</strong> 표현 할 수 없을 때, 혹은 <strong>정수 범위를 벗어났을 때</strong> 발생합니다.</li>\n<li><code class=\"language-text\">RecursionError</code>: 최대 <strong>재귀 깊이</strong>가 초과하였을 때 발생합니다.</li>\n<li><code class=\"language-text\">TypeError</code>: 연산이나 함수가 <strong>부적절한 데이터 타입</strong>의 객체에 적용 되었을 때 발생합니다.</li>\n<li><code class=\"language-text\">ValueError</code>: 연산이나 함수가 <strong>부적절한 값을 가진</strong> 객체에 적용 되었을 때 발생합니다.</li>\n<li><code class=\"language-text\">ZeroDivisionError</code>: 나누기, 나머지 연산의 <strong>두 번째 인자가 0</strong>일 때 발생합니다.</li>\n</ul>\n<h2>How To Handling Errors?</h2>\n<p>특정 에러만 핸들링하는 방법은, 에러 객체의 이름을 <code class=\"language-text\">except</code> 절 옆에 작성함으로써 가능합니다. <strong>튜플</strong> 형태 또한 작성할 수 있습니다. <code class=\"language-text\">except</code> 절 옆에 아무것도 없다면, 나머지 모든 에러를 제너릭하게 핸들링 합니다. <strong>이 코드를 이용할 때는 주의하여야 합니다. 그 나머지 프로그래밍 에러를 가릴 수도 있기 때문입니다.</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 코드 작성</span>\n        x <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A를 입력 하세요: \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        y <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A를 몇으로 나눌 지 입력하세요: \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">//</span> y<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">break</span>\n    <span class=\"token keyword\">except</span> ValueError<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"이건 숫자나 정수가 아닌데... 다시 입력 하세요!\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">except</span> <span class=\"token punctuation\">(</span>ZeroDivisionError<span class=\"token punctuation\">,</span> OverflowError<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"0으로 나누었거나, 값이 너무 큽니다. 다시 입력하세요!\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">except</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"아 이거 뭔데 이거\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>많은 에러들은 <code class=\"language-text\">Exception</code> 클래스의 파생 클래스입니다. <code class=\"language-text\">Exception</code> 클래스를 받는다고 하고, 제너릭하게 에러를 처리 할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 코드 작성</span>\n        x <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A를 입력 하세요: \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        y <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A를 몇으로 나눌 지 입력하세요: \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">//</span> y<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">break</span>\n    <span class=\"token keyword\">except</span> ValueError<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"이건 숫자나 정수가 아닌데... 다시 입력 하세요!\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">except</span> <span class=\"token punctuation\">(</span>ZeroDivisionError<span class=\"token punctuation\">,</span> OverflowError<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"0으로 나누었거나, 값이 너무 큽니다. 다시 입력하세요!\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">except</span> Exception <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"아 이거 뭔데 이거 : \"</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-text\">try ... except</code> 문은 <code class=\"language-text\">else</code> 절을 가질 수도 있습니다. <code class=\"language-text\">try</code> 문이 에러 발생 없이 정상적으로 실행 되었을 때, <code class=\"language-text\">else</code> 문을 실행 할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 코드 작성</span>\n        x <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A를 입력 하세요: \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        y <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A를 몇으로 나눌 지 입력하세요: \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">except</span> ValueError<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"이건 숫자나 정수가 아닌데... 다시 입력 하세요!\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">except</span> <span class=\"token punctuation\">(</span>ZeroDivisionError<span class=\"token punctuation\">,</span> OverflowError<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"0으로 나누었거나, 값이 너무 큽니다. 다시 입력하세요!\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">except</span> Exception <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"아 이거 뭔데 이거\"</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">//</span> y<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">break</span></code></pre></div>\n<p><code class=\"language-text\">try ... except</code> 문은 <code class=\"language-text\">finally</code> 절을 가질 수도 있습니다. 여기서 <code class=\"language-text\">except</code> 문이 실행 됐든, 안 됐든 상관없이, <code class=\"language-text\">finally</code>문을 실행 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 코드 작성</span>\n        x <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A를 입력 하세요: \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        y <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A를 몇으로 나눌 지 입력하세요: \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">except</span> ValueError<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"이건 숫자나 정수가 아닌데... 다시 입력 하세요!\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">except</span> <span class=\"token punctuation\">(</span>ZeroDivisionError<span class=\"token punctuation\">,</span> OverflowError<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"0으로 나누었거나, 값이 너무 큽니다. 다시 입력하세요!\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">except</span> Exception <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"아 이거 뭔데 이거\"</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">//</span> y<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">break</span>\n    <span class=\"token keyword\">finally</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"에러 처리 끝!\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2>What is raise? (예외 일으키기)</h2>\n<p>프로그래머가 <strong>인위적으로 에러를 발생 시킬 수 있습니다.</strong> 바로, <code class=\"language-text\">raise</code> 문을 통해서 말입니다. 만약 여러분들이 파싱을 해주는 함수를 만들었는데, 이상한 값이 들어 왔다고 알려 주기 위해 에러를 발생 시킬 수도 있습니다. 그렇다면 상위에 존재하는 <code class=\"language-text\">try ... except</code> 문에서 에러를 처리 할 수 있겠죠?</p>\n<ul>\n<li><strong>In</strong></li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">str_to_fraction</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    arr <span class=\"token operator\">=</span> string<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">raise</span> ValueError<span class=\"token punctuation\">(</span><span class=\"token string\">'분수를 입력 해 주세요'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n            numerator <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n            denominator <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token string\">'numerator'</span><span class=\"token punctuation\">:</span> numerator<span class=\"token punctuation\">,</span>\n                <span class=\"token string\">'denominator'</span><span class=\"token punctuation\">:</span> denominator<span class=\"token punctuation\">,</span>\n                <span class=\"token string\">'value'</span><span class=\"token punctuation\">:</span> numerator <span class=\"token operator\">/</span> denominator<span class=\"token punctuation\">,</span>\n                <span class=\"token string\">'string'</span><span class=\"token punctuation\">:</span> string\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">except</span> ValueError<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">raise</span> ValueError<span class=\"token punctuation\">(</span><span class=\"token string\">'정수를 입력 하세요'</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n    str_to_fraction<span class=\"token punctuation\">(</span><span class=\"token string\">'1//2'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">except</span> ValueError <span class=\"token keyword\">as</span> v<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n    str_to_fraction<span class=\"token punctuation\">(</span><span class=\"token string\">'1.1/2'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">except</span> ValueError <span class=\"token keyword\">as</span> v<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n    str_to_fraction<span class=\"token punctuation\">(</span><span class=\"token string\">'1/2'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">except</span> ValueError <span class=\"token keyword\">as</span> v<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li><strong>Out</strong></li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"terminal\"><pre class=\"language-terminal\"><code class=\"language-terminal\">분수를 입력 해 주세요\n정수를 입력 하세요</code></pre></div>\n<h3>주의 사항</h3>\n<p><code class=\"language-text\">Exception</code> 내의 메세지를 확인 하고 싶다면, <code class=\"language-text\">except 에러 as e:</code> 절 작성 후, 해당 절안에 <code class=\"language-text\">e</code>를 출력 해 주면 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n    str_to_fraction<span class=\"token punctuation\">(</span><span class=\"token string\">'1/2'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">except</span> ValueError <span class=\"token keyword\">as</span> v<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span></code></pre></div>\n<h2>Make Error Class</h2>\n<p><code class=\"language-text\">Exception</code> 객체를 직접 상속 받아, <code class=\"language-text\">Error Class</code>를 만들 수 있습니다. 간단하게 클래스 생성 시, <code class=\"language-text\">Exception</code> 클래스를 상속 받으면 됩니다.</p>\n<ul>\n<li><strong>In</strong></li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">FloatError</span><span class=\"token punctuation\">(</span>Exception<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> message<span class=\"token operator\">=</span><span class=\"token string\">'소수 말고 정수를 쓰세요'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>message <span class=\"token operator\">=</span> message\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__str__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">'FloatError: '</span> <span class=\"token operator\">+</span> self<span class=\"token punctuation\">.</span>message\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">StringError</span><span class=\"token punctuation\">(</span>Exception<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> message<span class=\"token operator\">=</span><span class=\"token string\">'문자 말고 정수를 쓰세요'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>message <span class=\"token operator\">=</span> message\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__str__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">'StringError: '</span> <span class=\"token operator\">+</span> self<span class=\"token punctuation\">.</span>message\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">str_to_fraction</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    arr <span class=\"token operator\">=</span> string<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">raise</span> ValueError<span class=\"token punctuation\">(</span><span class=\"token string\">'분수를 입력 해 주세요'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">elif</span> <span class=\"token keyword\">not</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>find<span class=\"token punctuation\">(</span><span class=\"token string\">'.'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token keyword\">and</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>find<span class=\"token punctuation\">(</span><span class=\"token string\">'.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">raise</span> FloatError\n    <span class=\"token keyword\">elif</span> <span class=\"token keyword\">not</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">all</span><span class=\"token punctuation\">(</span>c <span class=\"token keyword\">in</span> <span class=\"token string\">'0123456789'</span> <span class=\"token keyword\">for</span> c <span class=\"token keyword\">in</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">and</span> <span class=\"token builtin\">all</span><span class=\"token punctuation\">(</span>c <span class=\"token keyword\">in</span> <span class=\"token string\">'0123456789'</span> <span class=\"token keyword\">for</span> c <span class=\"token keyword\">in</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">raise</span> StringError\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n            numerator <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n            denominator <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token string\">'numerator'</span><span class=\"token punctuation\">:</span> numerator<span class=\"token punctuation\">,</span>\n                <span class=\"token string\">'denominator'</span><span class=\"token punctuation\">:</span> denominator<span class=\"token punctuation\">,</span>\n                <span class=\"token string\">'value'</span><span class=\"token punctuation\">:</span> numerator <span class=\"token operator\">/</span> denominator<span class=\"token punctuation\">,</span>\n                <span class=\"token string\">'string'</span><span class=\"token punctuation\">:</span> string\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">except</span> ValueError<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">raise</span> ValueError<span class=\"token punctuation\">(</span><span class=\"token string\">'정수를 입력 하세요'</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n    str_to_fraction<span class=\"token punctuation\">(</span><span class=\"token string\">'1//2'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">except</span> ValueError <span class=\"token keyword\">as</span> v<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">except</span> FloatError <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">except</span> StringError <span class=\"token keyword\">as</span> s<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n    str_to_fraction<span class=\"token punctuation\">(</span><span class=\"token string\">'1.1/2'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">except</span> ValueError <span class=\"token keyword\">as</span> v<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">except</span> FloatError <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">except</span> StringError <span class=\"token keyword\">as</span> s<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n    str_to_fraction<span class=\"token punctuation\">(</span><span class=\"token string\">'asbsadf/2'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">except</span> ValueError <span class=\"token keyword\">as</span> v<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">except</span> FloatError <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">except</span> StringError <span class=\"token keyword\">as</span> s<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li><strong>Out</strong></li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"terminal\"><pre class=\"language-terminal\"><code class=\"language-terminal\">분수를 입력 해 주세요\nFloatError: 소수 말고 정수를 쓰세요\nFloatError: 문자 말고 정수를 쓰세요</code></pre></div>\n<h2>마치며</h2>\n<p><strong>예외 처리</strong>는 <strong>보다 안정적이고, 오류에 강한 프로그램을 만들 수 있게 끔 도와줍니다.</strong> 어떻게 보면, 예외 처리는 사용자, 혹은 협업하는 프로그래머 모두를 위한 우리가 할 수 있는 사소한 예의라고도 할 수 있겠습니다. 사용자가 뭘 잘못했는지 알아야 사용자가 프로그래머가 원하는 방향으로 프로그램을 실행 할 수 있고, 다른 협업하는 프로그래머가 해당 에러를 코드상으로 어떻게 처리 해야 하는지 알 수 있으니까요. 좋은 프로그래머가 되기 위해서, 예외 처리를 생활화 합시다! 이번 시간은 여기까지 입니다!</p>","id":"26b445ea-6957-5b77-bb69-87e00219ea5c","frontmatter":{"date":"2020-04-21","path":"/python/try-except","title":"Python에서 try, except, raise로 예외 처리 하기.","tags":["Python"],"keyword":"Python, python, 파이썬, try, except, raise, 예외처리, Python Exception, 파이썬 예외처리","summary":"Python에서의 예외 처리 방법","img":"https://media.makeameme.org/created/exceptions-exceptions-everywhere-snh6tb.jpg","series":"Python Tips"}}},"pageContext":{"series":{"data":{"allMarkdownRemark":{"edges":[{"node":{"id":"26b445ea-6957-5b77-bb69-87e00219ea5c","excerpt":"…","frontmatter":{"date":"2020-04-21","tags":["Python"],"path":"/python/try-except","title":"Python에서 try, except, raise로 예외 처리 하기.","img":"https://media.makeameme.org/created/exceptions-exceptions-everywhere-snh6tb.jpg","summary":"Python에서의 예외 처리 방법"}}},{"node":{"id":"9909fe0f-0b7e-51f1-b3ef-e6f33e9bc147","excerpt":"Python Thread 에서는 한 프로세스에서 여러 가지 병렬 처리를 위해 를 구현 할 수 있는 를 제공 합니다. 프로그램을 여러 개로 나누지 않으며 하는 의 장점은 다음과 같습니다. 전역 변수를 이용한 메모리 공유를 통해 효율적인 메모리 사용이 가능 철저한 작업 분리 가능 코드 간결성 하지만, 단점 또한 존재합니다. 디버깅 난이도 상승 구현 난이도 상승 교착 상태가 발생하지 않도록 주의 하여야 함 Thread…","frontmatter":{"date":"2020-04-10","tags":["Python"],"path":"/python/thread","title":"Python으로 Thread 구현하기.","img":"https://i.imgur.com/CRLzESV.png","summary":"Python에서의 병렬처리 방법"}}}]}}},"categoryPosts":{"data":{"allMarkdownRemark":{"edges":[{"node":{"id":"a970f978-c18b-5e60-9833-49bb2a24e0fa","excerpt":"AWS S3 안녕하세요? Justkode 입니다. 이번 시간에는 AWS S3에 대해서 알아 보고, AWS S3 버킷 생성, 파일 접근 권한 설정, Python 코드 상에서의 접근을 해 보도록 하겠습니다. 일단 AWS S3에 대해서 간단하게 설명 드리겠습니다. AWS S…","frontmatter":{"date":"2021-07-16","tags":["Cloud-Computing","Python"],"path":"/data-science/just-cloud-computing-2","title":"[찍먹 Cloud Computing] 2. AWS S3","img":"/post_image/thumbnail/just-cloud-computing-2.jpg","summary":"AWS S3와 boto3를 사용 해 보자"}}},{"node":{"id":"c9b33c45-4ed5-5df9-8ad6-ae6ea2bd4688","excerpt":"SQL 안녕하세요? Justkode 입니다. 오늘은 SQL에 대해서 간단하게 알아보는 시간을 가져보도록 하겠습니다. SQL은 Structured Query Language의 약자로, RDBMS의 데이터베이스를 주로 조회 하는데에 사용이 되는, 데이터베이스 관리 시스템(RDBMS)의 데이터를 관리하기 위해 설계된 특수 목적의 프로그래밍 언어입니다. 여기서 설명 하는 문법들은 많은 내용을 담지 않고, SQL…","frontmatter":{"date":"2021-07-11","tags":["Data-Science","Python"],"path":"/data-science/just-data-science-4","title":"[찍먹 Data Science] 4. SQL","img":"/post_image/thumbnail/just-data-science-4.jpg","summary":"SQL의 기본 문법에 대해 알아보자."}}},{"node":{"id":"58d447ab-7222-586d-a162-11110f97d6c0","excerpt":"Matplotlib 안녕하세요? Justkode 입니다. 오늘은 Matplotlib에 대해서 알아보는 시간을 가져보도록 하겠습니다. Matplotlib는 데이터 분석을 위해 만들어진 라이브러리로 Numpy, Pandas…","frontmatter":{"date":"2021-07-08","tags":["Data-Science","Python"],"path":"/data-science/just-data-science-3","title":"[찍먹 Data Science] 3. Matplotlib","img":"/post_image/thumbnail/just-data-science-3.jpeg","summary":"데이터 시각화 모듈, Matplotlib을 알아보자."}}},{"node":{"id":"5c9113d4-b741-5b03-8184-feafc536a1e3","excerpt":"Pandas 안녕하세요? Justkode 입니다. 오늘은 Pandas에 대해서 심층있게 알아보는 시간을 가져보도록 하겠습니다. Pandas는 데이터 분석을 위해 만들어진 라이브러리로 Numpy와 함께 많이 사용 됩니다. 주로 사용하는 데이터 구조는 Dataframe과 Series로, Table 정보와 같은 데이터를 처리 하는데 이점이 있습니다. Series and DataFrame 첫 번째로 Series입니다. Series는…","frontmatter":{"date":"2021-07-04","tags":["Data-Science","Python"],"path":"/data-science/just-data-science-2","title":"[찍먹 Data Science] 2. Pandas","img":"/post_image/thumbnail/just-data-science-2.jpg","summary":"데이터 분석에 쓰이는 Pandas를 알아보자."}}}]}}}}},"staticQueryHashes":["234633779","63159454"]}