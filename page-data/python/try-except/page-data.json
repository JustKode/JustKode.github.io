{"componentChunkName":"component---src-layouts-post-layout-tsx","path":"/python/try-except","result":{"data":{"markdownRemark":{"html":"<p>항상 프로그램은 사용자의 실수든, 코드를 잘못 작성 했든, 원하지 않는 방향으로 흘러 갈 때가 있습니다. 그걸 방지 하기 위해선, <strong>예외처리</strong> 라는 것이 필요 합니다. <strong>예외처리</strong>는 프로그래밍의 세계에선 상당히 중요합니다. <strong>프로그램의 비정상적인 종료를 방지</strong>하고, 우리의 프로그램 설계 상 <strong>무엇이 잘못되었는지 알 수 있게끔 해주는 척도</strong>이기도 합니다. <code class=\"language-text\">Python</code>도 다른 언어와 마찬가지로, <code class=\"language-text\">try</code>, <code class=\"language-text\">except</code> 키워드를 이용하여, 예외 처리를 실시 할 수 있습니다. 한 번 가볍게 알아 볼까요?</p>\n<h2>try, except의 기본 사용법</h2>\n<p><code class=\"language-text\">Python</code> 에서 사용하는 <code class=\"language-text\">try</code>, <code class=\"language-text\">except</code>도 다른 언어에서 사용하듯 사용 하면 됩니다. <code class=\"language-text\">try</code> 문에서 <strong>예외처리 하고 싶은 코드</strong>를 작성 하고, <code class=\"language-text\">except</code> 문에서 <code class=\"language-text\">try</code> 문에서 작성한 코드가 에러를 발생 시켰을 때, <strong>에러를 어떻게 처리 할 껀지</strong> 코드를 작성 하면 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 코드 작성</span>\n        x <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"숫자를 입력 하세요: \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">break</span>\n    <span class=\"token keyword\">except</span> ValueError<span class=\"token punctuation\">:</span>  <span class=\"token comment\"># ValueError에 대한 특수한 예외 처리</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"이건 숫자가 아닌데... 다시 입력 하세요!\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>일단 여러 가지 <strong>에러 객체</strong>들에 대해서 알아 보겠습니다. 일단... 엄청 많으니 주로 사용하는 에러 객체들을 위주로 설명 하겠습니다.</p>\n<h2>Error List</h2>\n<ul>\n<li><code class=\"language-text\">AssertionError</code>: <a href=\"https://docs.python.org/ko/3/reference/simple_stmts.html#assert\">assert</a> 문이 제대로 작동하지 않을 때 발생합니다.</li>\n<li><code class=\"language-text\">IndexError</code>: 참조 하려는 <strong>인덱스가 범위를 벗어날 때</strong> 발생합니다.</li>\n<li><code class=\"language-text\">KeyError</code>: 참조 하려는 <strong>키가 기존 키 집합에서 찾을 수 없을 때</strong> 발생합니다.</li>\n<li><code class=\"language-text\">KeyboardInterrupt</code>: 사용자가 인터럽트 키(<code class=\"language-text\">Control + C</code>, 혹은 <code class=\"language-text\">Delete</code>)를 누를 때 발생하며, 모든 Exception을 잡는 코드에 의해 인터프리터가 종료하는 것을 막지 못하도록 <code class=\"language-text\">Exception</code> 상위에 있는 <code class=\"language-text\">BaseException</code>을 직접 계승 합니다.</li>\n<li><code class=\"language-text\">MemoryError</code>: 메모리가 부족하지만, 가비지 컬렉터가 일부 객체의 삭제를 함으로써 복구될 수 있는 경우 발생합니다.</li>\n<li><code class=\"language-text\">NameError</code>: 참조하는 지역, 전역 변수 혹은 함수, 클래스 등을 찾을 수 없을 때 발생합니다.</li>\n<li><code class=\"language-text\">OSError</code>: 시스템 함수가 <strong>시스템 관련 에러</strong>를 돌려줄 때 발생합니다. (파일을 찾을 수 없거나, 디스크가 찼거나..)</li>\n<li><code class=\"language-text\">OverflowError</code>: 산술 연산의 <strong>결과가 너무 커서</strong> 표현 할 수 없을 때, 혹은 <strong>정수 범위를 벗어났을 때</strong> 발생합니다.</li>\n<li><code class=\"language-text\">RecursionError</code>: 최대 <strong>재귀 깊이</strong>가 초과하였을 때 발생합니다.</li>\n<li><code class=\"language-text\">TypeError</code>: 연산이나 함수가 <strong>부적절한 데이터 타입</strong>의 객체에 적용 되었을 때 발생합니다.</li>\n<li><code class=\"language-text\">ValueError</code>: 연산이나 함수가 <strong>부적절한 값을 가진</strong> 객체에 적용 되었을 때 발생합니다.</li>\n<li><code class=\"language-text\">ZeroDivisionError</code>: 나누기, 나머지 연산의 <strong>두 번째 인자가 0</strong>일 때 발생합니다.</li>\n</ul>\n<h2>How To Handling Errors?</h2>\n<p>특정 에러만 핸들링하는 방법은, 에러 객체의 이름을 <code class=\"language-text\">except</code> 절 옆에 작성함으로써 가능합니다. <strong>튜플</strong> 형태 또한 작성할 수 있습니다. <code class=\"language-text\">except</code> 절 옆에 아무것도 없다면, 나머지 모든 에러를 제너릭하게 핸들링 합니다. <strong>이 코드를 이용할 때는 주의하여야 합니다. 그 나머지 프로그래밍 에러를 가릴 수도 있기 때문입니다.</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 코드 작성</span>\n        x <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A를 입력 하세요: \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        y <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A를 몇으로 나눌 지 입력하세요: \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">//</span> y<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">break</span>\n    <span class=\"token keyword\">except</span> ValueError<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"이건 숫자나 정수가 아닌데... 다시 입력 하세요!\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">except</span> <span class=\"token punctuation\">(</span>ZeroDivisionError<span class=\"token punctuation\">,</span> OverflowError<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"0으로 나누었거나, 값이 너무 큽니다. 다시 입력하세요!\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">except</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"아 이거 뭔데 이거\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>많은 에러들은 <code class=\"language-text\">Exception</code> 클래스의 파생 클래스입니다. <code class=\"language-text\">Exception</code> 클래스를 받는다고 하고, 제너릭하게 에러를 처리 할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 코드 작성</span>\n        x <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A를 입력 하세요: \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        y <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A를 몇으로 나눌 지 입력하세요: \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">//</span> y<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">break</span>\n    <span class=\"token keyword\">except</span> ValueError<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"이건 숫자나 정수가 아닌데... 다시 입력 하세요!\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">except</span> <span class=\"token punctuation\">(</span>ZeroDivisionError<span class=\"token punctuation\">,</span> OverflowError<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"0으로 나누었거나, 값이 너무 큽니다. 다시 입력하세요!\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">except</span> Exception <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"아 이거 뭔데 이거 : \"</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-text\">try ... except</code> 문은 <code class=\"language-text\">else</code> 절을 가질 수도 있습니다. <code class=\"language-text\">try</code> 문이 에러 발생 없이 정상적으로 실행 되었을 때, <code class=\"language-text\">else</code> 문을 실행 할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 코드 작성</span>\n        x <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A를 입력 하세요: \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        y <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A를 몇으로 나눌 지 입력하세요: \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">except</span> ValueError<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"이건 숫자나 정수가 아닌데... 다시 입력 하세요!\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">except</span> <span class=\"token punctuation\">(</span>ZeroDivisionError<span class=\"token punctuation\">,</span> OverflowError<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"0으로 나누었거나, 값이 너무 큽니다. 다시 입력하세요!\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">except</span> Exception <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"아 이거 뭔데 이거\"</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">//</span> y<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">break</span></code></pre></div>\n<p><code class=\"language-text\">try ... except</code> 문은 <code class=\"language-text\">finally</code> 절을 가질 수도 있습니다. 여기서 <code class=\"language-text\">except</code> 문이 실행 됐든, 안 됐든 상관없이, <code class=\"language-text\">finally</code>문을 실행 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 코드 작성</span>\n        x <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A를 입력 하세요: \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        y <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A를 몇으로 나눌 지 입력하세요: \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">except</span> ValueError<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"이건 숫자나 정수가 아닌데... 다시 입력 하세요!\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">except</span> <span class=\"token punctuation\">(</span>ZeroDivisionError<span class=\"token punctuation\">,</span> OverflowError<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"0으로 나누었거나, 값이 너무 큽니다. 다시 입력하세요!\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">except</span> Exception <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"아 이거 뭔데 이거\"</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">//</span> y<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">break</span>\n    <span class=\"token keyword\">finally</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"에러 처리 끝!\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2>What is raise? (예외 일으키기)</h2>\n<p>프로그래머가 <strong>인위적으로 에러를 발생 시킬 수 있습니다.</strong> 바로, <code class=\"language-text\">raise</code> 문을 통해서 말입니다. 만약 여러분들이 파싱을 해주는 함수를 만들었는데, 이상한 값이 들어 왔다고 알려 주기 위해 에러를 발생 시킬 수도 있습니다. 그렇다면 상위에 존재하는 <code class=\"language-text\">try ... except</code> 문에서 에러를 처리 할 수 있겠죠?</p>\n<ul>\n<li><strong>In</strong></li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">str_to_fraction</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    arr <span class=\"token operator\">=</span> string<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">raise</span> ValueError<span class=\"token punctuation\">(</span><span class=\"token string\">'분수를 입력 해 주세요'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n            numerator <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n            denominator <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token string\">'numerator'</span><span class=\"token punctuation\">:</span> numerator<span class=\"token punctuation\">,</span>\n                <span class=\"token string\">'denominator'</span><span class=\"token punctuation\">:</span> denominator<span class=\"token punctuation\">,</span>\n                <span class=\"token string\">'value'</span><span class=\"token punctuation\">:</span> numerator <span class=\"token operator\">/</span> denominator<span class=\"token punctuation\">,</span>\n                <span class=\"token string\">'string'</span><span class=\"token punctuation\">:</span> string\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">except</span> ValueError<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">raise</span> ValueError<span class=\"token punctuation\">(</span><span class=\"token string\">'정수를 입력 하세요'</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n    str_to_fraction<span class=\"token punctuation\">(</span><span class=\"token string\">'1//2'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">except</span> ValueError <span class=\"token keyword\">as</span> v<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n    str_to_fraction<span class=\"token punctuation\">(</span><span class=\"token string\">'1.1/2'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">except</span> ValueError <span class=\"token keyword\">as</span> v<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n    str_to_fraction<span class=\"token punctuation\">(</span><span class=\"token string\">'1/2'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">except</span> ValueError <span class=\"token keyword\">as</span> v<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li><strong>Out</strong></li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"terminal\"><pre class=\"language-terminal\"><code class=\"language-terminal\">분수를 입력 해 주세요\n정수를 입력 하세요</code></pre></div>\n<h3>주의 사항</h3>\n<p><code class=\"language-text\">Exception</code> 내의 메세지를 확인 하고 싶다면, <code class=\"language-text\">except 에러 as e:</code> 절 작성 후, 해당 절안에 <code class=\"language-text\">e</code>를 출력 해 주면 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n    str_to_fraction<span class=\"token punctuation\">(</span><span class=\"token string\">'1/2'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">except</span> ValueError <span class=\"token keyword\">as</span> v<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span></code></pre></div>\n<h2>Make Error Class</h2>\n<p><code class=\"language-text\">Exception</code> 객체를 직접 상속 받아, <code class=\"language-text\">Error Class</code>를 만들 수 있습니다. 간단하게 클래스 생성 시, <code class=\"language-text\">Exception</code> 클래스를 상속 받으면 됩니다.</p>\n<ul>\n<li><strong>In</strong></li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">FloatError</span><span class=\"token punctuation\">(</span>Exception<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> message<span class=\"token operator\">=</span><span class=\"token string\">'소수 말고 정수를 쓰세요'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>message <span class=\"token operator\">=</span> message\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__str__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">'FloatError: '</span> <span class=\"token operator\">+</span> self<span class=\"token punctuation\">.</span>message\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">StringError</span><span class=\"token punctuation\">(</span>Exception<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> message<span class=\"token operator\">=</span><span class=\"token string\">'문자 말고 정수를 쓰세요'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>message <span class=\"token operator\">=</span> message\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__str__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">'StringError: '</span> <span class=\"token operator\">+</span> self<span class=\"token punctuation\">.</span>message\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">str_to_fraction</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    arr <span class=\"token operator\">=</span> string<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">raise</span> ValueError<span class=\"token punctuation\">(</span><span class=\"token string\">'분수를 입력 해 주세요'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">elif</span> <span class=\"token keyword\">not</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>find<span class=\"token punctuation\">(</span><span class=\"token string\">'.'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token keyword\">and</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>find<span class=\"token punctuation\">(</span><span class=\"token string\">'.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">raise</span> FloatError\n    <span class=\"token keyword\">elif</span> <span class=\"token keyword\">not</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">all</span><span class=\"token punctuation\">(</span>c <span class=\"token keyword\">in</span> <span class=\"token string\">'0123456789'</span> <span class=\"token keyword\">for</span> c <span class=\"token keyword\">in</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">and</span> <span class=\"token builtin\">all</span><span class=\"token punctuation\">(</span>c <span class=\"token keyword\">in</span> <span class=\"token string\">'0123456789'</span> <span class=\"token keyword\">for</span> c <span class=\"token keyword\">in</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">raise</span> StringError\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n            numerator <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n            denominator <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token string\">'numerator'</span><span class=\"token punctuation\">:</span> numerator<span class=\"token punctuation\">,</span>\n                <span class=\"token string\">'denominator'</span><span class=\"token punctuation\">:</span> denominator<span class=\"token punctuation\">,</span>\n                <span class=\"token string\">'value'</span><span class=\"token punctuation\">:</span> numerator <span class=\"token operator\">/</span> denominator<span class=\"token punctuation\">,</span>\n                <span class=\"token string\">'string'</span><span class=\"token punctuation\">:</span> string\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">except</span> ValueError<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">raise</span> ValueError<span class=\"token punctuation\">(</span><span class=\"token string\">'정수를 입력 하세요'</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n    str_to_fraction<span class=\"token punctuation\">(</span><span class=\"token string\">'1//2'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">except</span> ValueError <span class=\"token keyword\">as</span> v<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">except</span> FloatError <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">except</span> StringError <span class=\"token keyword\">as</span> s<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n    str_to_fraction<span class=\"token punctuation\">(</span><span class=\"token string\">'1.1/2'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">except</span> ValueError <span class=\"token keyword\">as</span> v<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">except</span> FloatError <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">except</span> StringError <span class=\"token keyword\">as</span> s<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n    str_to_fraction<span class=\"token punctuation\">(</span><span class=\"token string\">'asbsadf/2'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">except</span> ValueError <span class=\"token keyword\">as</span> v<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">except</span> FloatError <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">except</span> StringError <span class=\"token keyword\">as</span> s<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li><strong>Out</strong></li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"terminal\"><pre class=\"language-terminal\"><code class=\"language-terminal\">분수를 입력 해 주세요\nFloatError: 소수 말고 정수를 쓰세요\nFloatError: 문자 말고 정수를 쓰세요</code></pre></div>\n<h2>마치며</h2>\n<p><strong>예외 처리</strong>는 <strong>보다 안정적이고, 오류에 강한 프로그램을 만들 수 있게 끔 도와줍니다.</strong> 어떻게 보면, 예외 처리는 사용자, 혹은 협업하는 프로그래머 모두를 위한 우리가 할 수 있는 사소한 예의라고도 할 수 있겠습니다. 사용자가 뭘 잘못했는지 알아야 사용자가 프로그래머가 원하는 방향으로 프로그램을 실행 할 수 있고, 다른 협업하는 프로그래머가 해당 에러를 코드상으로 어떻게 처리 해야 하는지 알 수 있으니까요. 좋은 프로그래머가 되기 위해서, 예외 처리를 생활화 합시다! 이번 시간은 여기까지 입니다!</p>","id":"5b3a68c4-e85a-53a8-bfa3-56882e6e8a3a","frontmatter":{"date":"2020-04-21","path":"/python/try-except","title":"Python에서 try, except, raise로 예외 처리 하기.","tags":["Python"],"keyword":"Python, python, 파이썬, try, except, raise, 예외처리, Python Exception, 파이썬 예외처리","summary":"Python에서의 예외 처리 방법","img":"https://media.makeameme.org/created/exceptions-exceptions-everywhere-snh6tb.jpg","series":"Python Tips"}}},"pageContext":{"series":{"data":{"allMarkdownRemark":{"edges":[{"node":{"id":"5b3a68c4-e85a-53a8-bfa3-56882e6e8a3a","excerpt":"…","frontmatter":{"date":"2020-04-21","tags":["Python"],"path":"/python/try-except","title":"Python에서 try, except, raise로 예외 처리 하기.","img":"https://media.makeameme.org/created/exceptions-exceptions-everywhere-snh6tb.jpg","summary":"Python에서의 예외 처리 방법"}}},{"node":{"id":"9ab613aa-c8ca-51f3-9420-b83c071d443f","excerpt":"Python Thread 에서는 한 프로세스에서 여러 가지 병렬 처리를 위해 를 구현 할 수 있는 를 제공 합니다. 프로그램을 여러 개로 나누지 않으며 하는 의 장점은 다음과 같습니다. 전역 변수를 이용한 메모리 공유를 통해 효율적인 메모리 사용이 가능 철저한 작업 분리 가능 코드 간결성 하지만, 단점 또한 존재합니다. 디버깅 난이도 상승 구현 난이도 상승 교착 상태가 발생하지 않도록 주의 하여야 함 Thread…","frontmatter":{"date":"2020-04-10","tags":["Python"],"path":"/python/thread","title":"Python으로 Thread 구현하기.","img":"https://i.imgur.com/CRLzESV.png","summary":"Python에서의 병렬처리 방법"}}}]}}},"categoryPosts":{"data":{"allMarkdownRemark":{"edges":[{"node":{"id":"3f42e43d-c1df-5929-bf44-7dbab0bfa1f2","excerpt":"최단 경로 알고리즘은 지하철 노선도, 네비게이션 등 다방면에 사용되는 알고리즘입니다. 이번 시간에는 Python을 이용해 하나의 시작 정점으로 부터 모든 다른 정점까지의 최단 경로를 찾는 최단 경로 알고리즘인 다익스트라(dijkstra…","frontmatter":{"date":"2020-05-31","tags":["Python","Algorithm"],"path":"/algorithm/python-dijkstra","title":"Python으로 다익스트라(dijkstra) 알고리즘 구현하기","img":"https://ever-line.co.kr/images/use-1-2_img.png","summary":"최단 경로를 찾아보자"}}},{"node":{"id":"29546be3-1a03-54d6-9b13-9d89593d3d63","excerpt":"우리가 가공한 데이터들을  객체에 녹여 내는 것을 성공 했다고 치겠습니다! 이를 바로  등으로 변환하여 학습을 시도 하면 어떻게 될까요? 만약 feature마다 범위가 1-100, 0-1000…","frontmatter":{"date":"2020-05-03","tags":["Data-Science","Python"],"path":"/data-science/pandas-normalization","title":"Pandas에서 데이터 정규화 하기","img":"https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcTQU34oEynvWRbC1FvDCWj8Rn16cCqypKf8q9LKbI0i1SLWtU9e&usqp=CAU","summary":"데이터 전처리 방법 중 하나인 정규화"}}},{"node":{"id":"3e5a78d9-ea4d-5a77-a082-281403358a61","excerpt":"에서 모델의 가중치를 저장하기 위해선 3가지 함수만 알면 충분 합니다. : 객체를 디스크에 저장합니다.  모듈을 이용하여 객체를 직렬화 하며, 이 함수를 사용하여 모든 종류의 모델, Tensor 등을 저장할 수 있습니다. :  모듈을 이용하여 객체를 역직렬화하여 메모리에 할당합니다. : 역직렬화된 state_dict를 사용, 모델의 매개변수들을 불러옵니다. state_dict는 간단히 말해 각 체층을 매개변수 Tensor로 매핑한 Python…","frontmatter":{"date":"2020-04-26","tags":["Deep-Learning","Python"],"path":"/deep-learning/pytorch-save","title":"Pytorch에서 학습한 모델 저장 및 불러오기","img":"/post_image/pytorch-save.png","summary":"Pytorch 모델을 저장하고, 불러와 보기"}}},{"node":{"id":"5b3a68c4-e85a-53a8-bfa3-56882e6e8a3a","excerpt":"…","frontmatter":{"date":"2020-04-21","tags":["Python"],"path":"/python/try-except","title":"Python에서 try, except, raise로 예외 처리 하기.","img":"https://media.makeameme.org/created/exceptions-exceptions-everywhere-snh6tb.jpg","summary":"Python에서의 예외 처리 방법"}}}]}}}}}}