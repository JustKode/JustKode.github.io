{"componentChunkName":"component---src-layouts-post-layout-tsx","path":"/cloud-computing/k8s-components/","result":{"data":{"markdownRemark":{"html":"<p>안녕하세요? 오늘은 <strong>Kubernetes</strong>를 구동 시키기 위해서 필요한 <strong>기본적인 Components</strong>들에 대해서 <strong>요약</strong>해서 알아보는 시간을 가져 보도록 하겠습니다. (글 매우 짧고, 성의 없음 주의)</p>\n<p align=\"center\">\n       <img src=\"/post_image/k8s/c-01.svg\" width=\"70%\"/>\n       <p align=\"center\" style=\"color:#888888; font-size: 12px;\">\n            Kubernetes Cluster Components (출처: https://kubernetes.io/ko/docs/concepts/overview/components/)\n       </p>\n</p>\n<h3>Control Plane Component</h3>\n<p>컨트롤 플레인 컴포넌트는 클러스터의 <strong>전반적인 구동 관련 로직을 수행</strong>합니다. <strong>스케쥴링, 클러스터 이벤트 등을 감지하고 반응</strong> 합니다. 고가용성을 위해, 한 클러스터 내, <strong>여러 머신에서 실행되는 컨트롤 플레인</strong>을 만들기도 합니다.</p>\n<h4>kube-apiserver</h4>\n<p><strong>Kubernetes API</strong>를 노출하는 <strong>Kubernetes Control Plane Component</strong>입니다. 컨트롤 플레인에 명령을 주기 위해 사용하는 <strong>엔드 포인트</strong> 역할을 하며, 실제로 JWT Token을 인증으로 사용하여, yaml을 전송 하는 방식으로 사용 합니다. 한 개가 아닌, <strong>여러 개를 둬서 kube-apiserver 인스턴스 트래픽을 조절</strong> 할 수 있습니다.</p>\n<h4>etcd</h4>\n<p>현재 <strong>클러스터의 데이터 (클러스터에 어떤 노드가 몇 개나 있고 어떤 파드가 어떤 노드에서 동작하고 있는지 등)를 저장</strong>하는, 일관성과 고가용성을 보장하는 <strong>키-값 저장소</strong>입니다. 이는 replica를 마련하는 등의 <strong>고가용성 계획</strong>이 존재 하여야 합니다.</p>\n<h4>kube-scheduler</h4>\n<p><strong>Node</strong>가 배정되지 않은 채로 새로 생성된 <strong>Pod</strong>를 감지하여, <strong>실행할 노드를 선택</strong> 해 줍니다. 고려 사항으로는 <strong>리소스 요구사항, 하드웨어/소프트웨어/정책 적인 제약 상황, Affinity, Anti-Affinity, 데이터 지역성, 워크로드 간 간섭, 데드라인</strong> 등이 있습니다.</p>\n<h4>kube-controller-manager</h4>\n<p><strong>Controller(API Server를 통해 클러스터의 상태를 감지하고, 현재 상태를 원하는 상태로 변경하는 역할)</strong> 프로세스를 실행 하는 컴포넌트 입니다. <strong>컨트롤러는 분리된 프로세스</strong>이지만, 복잡성을 낮추기 위해 <strong>단일 프로세스 내에서 실행</strong> 됩니다.</p>\n<p>컨트롤러는 다음을 가집니다.</p>\n<ul>\n<li>노드 컨트롤러: <strong>노드가 다운</strong>되었을 때 <strong>통지와 대응</strong>에 관한 책임을 가집니다.</li>\n<li>잡 컨트롤러: <strong>일회성 작업을 나타내는 Job object를 감시</strong>한 다음, 해당 작업을 <strong>완료할 때까지 동작하는 파드</strong>를 생성 합니다.</li>\n<li>엔드포인트 컨트롤러: <strong>서비스와 파드를 연결</strong>시키는, <strong>Endpoint object를 생성</strong> 합니다.</li>\n<li>서비스 어카운트 &#x26; 토큰 컨트롤러: 새로운 <strong>namespace</strong>에 대한 <strong>기본 계정과 API 접근 토큰을 생성</strong>합니다.</li>\n</ul>\n<h4>cloud-controller-manager</h4>\n<p><strong>AWS, GCP, Azure, Naver Cloud</strong> 같은 클라우드 제공 플랫폼에서만 사용되며, 클러스터를 클라우드 공급자의 API에 연결하여, 외부 클라우드 매너저와 상호 작용 하게 할 수 있습니다.</p>\n<h3>Node Component</h3>\n<p>동작 중인 <strong>Pod를 유지</strong>시키고, <strong>K8S 런타임 환경을 제공</strong> 합니다. <strong>모든 노드 상에서 작동</strong>합니다.</p>\n<h4>kubelet</h4>\n<p>클러스터의 <strong>각 Node에서 작동</strong>하는 에이전트이며, <strong>Pod</strong> 내에서, <strong>Container</strong>가 확실하게 동작 할 수 있도록 관리 합니다. <strong>PodSpec</strong>의 집합을 받아, 컨테이너가 해당 <strong>PodSpec에 따라 건강하게 동작 하는 것을 목표</strong>로 합니다. k8s 외부의 컨테이너는 개입하지 않습니다.</p>\n<h4>kube-proxy</h4>\n<p>kube-proxy는 클러스터의 각 Node에서 실행되는 네트워크 프록시 이며, <strong>Service</strong> 개념의 구현부 입니다. <strong>Node</strong>의 네트워크 규칙을 유지 및 관리하며, <strong>내부 네트워크 혹은 클러스터 바깥으로 통신이 가능</strong>하게 해주는 역할을 합니다.</p>\n<h4>Container Runtime</h4>\n<p><strong>컨테이너 실행을 담당하는 소프트웨어</strong> 입니다. 구현체로는 Kubernetes CRI, containerd, CRI-O 등이 있습니다.</p>\n<h3>Addons</h3>\n<p><strong>Addons</strong>은, K8S Resource (Daemonset, Deployment 등)을 이용, <strong>클러스터 기능을 구현</strong>한 컴포넌트 입니다. 이는 <code class=\"language-text\">kube-system</code> 네임 스페이스에 저장 됩니다.</p>\n<h4>DNS</h4>\n<p>클러스터 내에서 작동하는 DNS 서버로, 구성환경 내 다른 DNS 서버와 더불어, <strong>K8S 내부 서비스</strong>를 위해 <strong>DNS 레코드를 제공</strong> 해주는 역할을 한다.</p>\n<h4>etc</h4>\n<p>이 외에 웹 UI, 컨테이너 리소스 모니터링, 클러스터 레벨 로깅 등이 있습니다.</p>\n<p>다음 시간에는 <strong>Kubernetes Object</strong>에 대해서 알아 보겠습니다.</p>","id":"c1eb4e80-b9af-55ff-b567-d3da1576afab","frontmatter":{"date":"2023-04-24","path":"/cloud-computing/k8s-components","title":"Kubernetes Component 요약","tags":["Cloud-Computing"],"keyword":"Kubernetes, k8s, components","summary":"k8s의 컴포넌트를 초간단 요약 해 보자.","img":"/post_image/thumbnail/k8s-components.png","series":null}}},"pageContext":{"postPath":"/cloud-computing/k8s-components","series":{"data":{"allMarkdownRemark":{"edges":[]}}},"categoryPosts":{"data":{"allMarkdownRemark":{"edges":[{"node":{"id":"8ef2f1ec-bc6d-5cbe-923c-ab49bb89e68e","excerpt":"Intro 안녕하세요! JustKode, 박민재입니다. 오늘은 K8S Package Manager인 Helm에 대해 알아 보도록 하겠습니다. 우리는 K8S로 서비스를 서빙하기 위해, k8s yaml 파일을 이용하여, K8S Resource (, , , , ,  등)를 관리 하게 됩니다. 하지만, 우리는 실제 서비스를 운영 하는데 다음과 같은 상황을 마주치게 됩니다. 여러 개의 K8S Resource를 K8S Cluster…","frontmatter":{"date":"2024-03-01","tags":["Cloud-Computing"],"path":"/cloud-computing/what-is-helm","title":"Helm이란 무엇 인가?","img":"/post_image/thumbnail/what-is-helm.png","summary":"K8S의 Package Manager인, Helm에 대해 알아보자."}}},{"node":{"id":"1d3523cc-7eb7-5c50-b2e6-b6f6a29170a6","excerpt":"안녕하세요? 오늘은 Kubernetes의 Resource들에 대해서 알아 보도록 하겠습니다. Pod Generator Pod: Pod은 k8s에서 사용되는 가장 작은 배포 단위로, 하나 이상의 container로 구성 됩니다. Pod 내의 container들은 동일 호스트에서 실행 됩니다. ReplicaSet: Pod의 복제본을 관리하는 k8s 객체이며, 지정된 수의 Pod 복제본이 주어진 시간안에 실행 되게 합니다. Deployment…","frontmatter":{"date":"2023-04-30","tags":["Cloud-Computing"],"path":"/cloud-computing/k8s-resources","title":"Kubernetes Resources 요약","img":"/post_image/thumbnail/k8s-resources.png","summary":"k8s의 리소스들을 요약 해 보자."}}},{"node":{"id":"c1eb4e80-b9af-55ff-b567-d3da1576afab","excerpt":"안녕하세요? 오늘은 Kubernetes를 구동 시키기 위해서 필요한 기본적인 Components들에 대해서 요약해서 알아보는 시간을 가져 보도록 하겠습니다. (글 매우 짧고, 성의 없음 주의) Control Plane Component…","frontmatter":{"date":"2023-04-24","tags":["Cloud-Computing"],"path":"/cloud-computing/k8s-components","title":"Kubernetes Component 요약","img":"/post_image/thumbnail/k8s-components.png","summary":"k8s의 컴포넌트를 초간단 요약 해 보자."}}},{"node":{"id":"28baf728-0bd2-5147-9ef0-b05da0826d77","excerpt":"저번 시간에는 Spark On Kubernetes에 대한 이론을 배웠습니다. 오늘은 Spark On Kubernetes에 대한 실습을 진행 하도록 하겠습니다. 사전 준비 Docker Minikube (Kubernetes 1.20 버전 이상) kubectl Spark 3.0 버전 이상 최신 버전일 수록 좋습니다. 얼마 전에 구형 Docker가 깔려 있는 맥북에서 진행을 해 봤는데 Pod이 생성이 안되더군요.. Pyspark Image Build…","frontmatter":{"date":"2023-03-30","tags":["Data-Engineering","Cloud-Computing"],"path":"/data-engineering/spark-on-k8s-2","title":"Spark on Kubernetes - Practice","img":"/post_image/thumbnail/spark-on-k8s-2.png","summary":"Spark를 Kubernetes Cluster에서 동작 시켜 보자."}}}]}}}}},"staticQueryHashes":["3819017183","63159454"],"slicesMap":{}}