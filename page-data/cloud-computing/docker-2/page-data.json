{"componentChunkName":"component---src-layouts-post-layout-tsx","path":"/cloud-computing/docker-2/","result":{"data":{"markdownRemark":{"html":"<h2>Review</h2>\n<p><a href=\"https://justkode.kr/cloud-computing/docker\">지난 시간</a>에는 Docker를 왜 배우는지에 대해 간단하게 알아 보았습니다. <strong>OS 커널</strong>을 공유 함으로써, 빠른 <strong>가상화</strong>가 가능하고, 완전한 <strong>프로세스 분리</strong>가 가능하며, 그 프로세스의 <strong>환경</strong>을 그대로 재현 함으로써 다른 컴퓨터에서도 오류가 안 뜨게 끔 하는 것이 <strong>Docker</strong>의 핵심 이라고 이야기 했었죠? 이제 <strong>Docker</strong>를 진짜 사용해 보는 시간을 가져 보겠습니다!</p>\n<h2>Docker Install</h2>\n<p><strong>Docker</strong> 설치법은</p>\n<ul>\n<li><a href=\"https://docs.docker.com/docker-for-windows/install/\">Window Install</a></li>\n<li><a href=\"https://docs.docker.com/docker-for-mac/install/\">Mac Install</a></li>\n<li><a href=\"https://docs.docker.com/engine/install/\">Linux Install</a> (단, Docker Engine 설치 법이 나오므로, 초심자들은 아래 스크립트를 실행 하는 것이 좋습니다.)</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">sudo</span> <span class=\"token function\">wget</span> -qO- http://get.docker.com/ <span class=\"token operator\">|</span> <span class=\"token function\">sh</span></code></pre></div>\n<h2>Hello World!</h2>\n<p><strong>Docker</strong>를 성공적으로 설치 했는지 확인 하기 위해서는 터미널에서 확인 가능합니다. <strong>Windows</strong> 유저는 <strong>WSL 2</strong>를 이용하여 <strong>Docker</strong> 명령어를 실행 할 수 있습니다. 한 번 다음 명령어를 쳐 볼까요?</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">docker</span> <span class=\"token parameter variable\">-v</span></code></pre></div>\n<p>다음과 같이 출력 되었다면 성공입니다!</p>\n<p align=\"center\">\n    <img src=\"/post_image/docker-2/1.png\" width=\"500px\"/>\n</p>\n<p>이제 저희만의 컨테이너를 한 번 실행 해 볼까요? <strong>Docker</strong> 에서는 <strong>Hello World</strong> 컨테이너를 지원 합니다. 다음 코드를 실행 해 볼까요?</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-d</span> <span class=\"token parameter variable\">-p</span> <span class=\"token number\">80</span>:80 docker/getting-started</code></pre></div>\n<p>이 코드에 대한 설명은 다음과 같습니다.</p>\n<ul>\n<li><code class=\"language-text\">run</code>: 컨테이너를 실행 합니다.</li>\n<li><code class=\"language-text\">-d</code>: 컨테이너를 <strong>detached mode</strong>, 즉, <strong>백그라운드에서 실행</strong> 한다는 뜻입니다.</li>\n<li><code class=\"language-text\">-p 80:80</code>: 호스트의 80번 포트를 컨테이너의 80번 포트에 mapping 한다는 뜻입니다.</li>\n<li><code class=\"language-text\">docker/getting-started</code>: 저희가 사용할 이미지 입니다. 해당 이미지가 설치 되어 있지 않다면, 설치합니다.</li>\n</ul>\n<p align=\"center\">\n    <img src=\"/post_image/docker-2/2.png\" width=\"500px\"/>\n</p>\n<h3>Docker Image Check</h3>\n<p>이렇게 <strong>Docker Image</strong>를 다운로드 받고, 실행까지 완료 했습니다. 일단 우리가 백그라운드에서 실행을 했으니, 저희가 좀 체크해 봐야 할 것이 몇가지 있네요. 일단 <strong>Image</strong>가 설치 되었는지, 확인 해 볼까요?</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">docker</span> image <span class=\"token function\">ls</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">image</code>: <strong>Docker Image</strong>와 관련한 명령어를 실행 할 수 있습니다.</li>\n<li><code class=\"language-text\">ls</code>: <strong>Docker Image</strong>의 리스트를 확인 할 수 있습니다.</li>\n</ul>\n<p align=\"center\">\n    <img src=\"/post_image/docker-2/3.png\" width=\"500px\"/>\n</p>\n<p>해당 명령어로 지금 설치되어 있는 <strong>Docker Image</strong>의 리스트를 확인 할 수 있습니다.</p>\n<h3>Docker Container Check</h3>\n<p>일단 이미지가 있는지 확인 했으니, 다음 차례는 우리가 실행한 <strong>Container</strong>를 확인 할 차례입니다! 다음 명령어를 쳐 볼까요?</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">docker</span> container <span class=\"token function\">ls</span></code></pre></div>\n<p>(<code class=\"language-text\">docker container ls</code>와 <code class=\"language-text\">docker ps</code>는 같은 동작을 합니다.)</p>\n<ul>\n<li><code class=\"language-text\">container</code>: <strong>Docker Container</strong>와 관련한 명령어를 실행 할 수 있습니다.</li>\n<li><code class=\"language-text\">ls</code>: <strong>Docker Container</strong>의 리스트를 확인 할 수 있습니다.</li>\n</ul>\n<p align=\"center\">\n    <img src=\"/post_image/docker-2/4.png\" width=\"100%\"/>\n</p>\n<ul>\n<li><code class=\"language-text\">CONTAINER ID</code>: 컨테이너 별로 주어진 고유 ID 입니다.</li>\n<li><code class=\"language-text\">IMAGE</code>: 해당 컨테이너에 실행 되고 있는 <strong>Docker Image</strong>를 나타냅니다.</li>\n<li><code class=\"language-text\">COMMAND</code>: 컨테이너가 실행될 때 컨테이너 내부에서 실행되는 명령어 입니다.</li>\n<li><code class=\"language-text\">CREATED</code>: 생성 된 시간을 나타냅니다.</li>\n<li><code class=\"language-text\">STATUS</code>: 현재 컨테이너의 상태를 나타냅니다.</li>\n<li><code class=\"language-text\">PORTS</code>: 현재 컨테이너의 어느 포트가, 어느 호스트 포트에 Mapping되어 있는지 나타냅니다.</li>\n<li><code class=\"language-text\">NAMES</code>: 컨테이너의 이름을 나타냅니다. 실행시 지정 해 주지 않으면 자동 생성됩니다.</li>\n</ul>\n<p>이렇게 실행된 <strong>Container</strong>를 확인 할 수 있습니다. 근데 여기서 또 <strong>Container</strong> 내부를 들여다 볼 수 있습니다. 다음 명령어를 통해서 말이죠!</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">docker</span> logs <span class=\"token punctuation\">[</span>CONTAINER_NAME <span class=\"token operator\">|</span> CONTAINER_ID<span class=\"token punctuation\">]</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">logs</code>: 로그를 확인하는 명령어 입니다.</li>\n<li><code class=\"language-text\">CONTAINER_NAME</code>: 컨테이너 이름입니다. <code class=\"language-text\">docker ps</code> 혹은 <code class=\"language-text\">docker container ls</code>로 확인 할 수 있습니다.</li>\n<li><code class=\"language-text\">CONTAINER_ID</code>: 컨테이너 아이디입니다. <code class=\"language-text\">docker ps</code> 혹은 <code class=\"language-text\">docker container ls</code>로 확인 할 수 있습니다.</li>\n</ul>\n<p align=\"center\">\n    <img src=\"/post_image/docker-2/5.png\" width=\"500px\"/>\n</p>\n<p>이 컨테이너는 <strong>Docker</strong> 홈페이지의 <strong>Getting Started</strong> 도큐먼트를 서버로 보여주는 역할을 합니다. 한 번 웹브라우저에 <code class=\"language-text\">https://localhost</code>를 쳐보면 다음과 같은 화면이 나옵니다.</p>\n<p align=\"center\">\n    <img src=\"/post_image/docker-2/6.png\" width=\"100%\"/>\n</p>\n<h3>Container Stop</h3>\n<p>이제는 내가 컨테이너를 끄고 싶어요, 이럴때는 어떻게 해야 할까요? 아까 컨테이너를 실행 할 때는 <code class=\"language-text\">docker run</code> 을 이용했죠? 역으로 <code class=\"language-text\">docker stop</code> 으로 컨테이너를 멈추면 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">docker</span> stop <span class=\"token punctuation\">[</span>CONTAINER_NAME <span class=\"token operator\">|</span> CONTAINER_ID<span class=\"token punctuation\">]</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">stop</code>: 실행 중인 컨테이너를 중지하는 명령어 입니다. (<strong>삭제</strong>가 아닙니다. 이는 다음에 배워 보도록 하겠습니다.)</li>\n<li><code class=\"language-text\">CONTAINER_NAME</code>: 컨테이너 이름입니다. <code class=\"language-text\">docker ps</code> 혹은 <code class=\"language-text\">docker container ls</code>로 확인 할 수 있습니다.</li>\n<li><code class=\"language-text\">CONTAINER_ID</code>: 컨테이너 아이디입니다. <code class=\"language-text\">docker ps</code> 혹은 <code class=\"language-text\">docker container ls</code>로 확인 할 수 있습니다.</li>\n</ul>\n<p align=\"center\">\n    <img src=\"/post_image/docker-2/7.png\" width=\"500px\"/>\n</p>\n<p>이제 한 번 컨테이너가 잘 멈췄는지 확인해 볼까요? 저희가 <code class=\"language-text\">docker ps</code> 라고 치게 되면, 현재 실행 중인 컨테이너만 보이게 됩니다. 하지만, 우리는 <code class=\"language-text\">-a</code> 옵션을 추가하여 실행 중이 아닌 컨테이너도 확인 할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">docker</span> <span class=\"token function\">ps</span> <span class=\"token parameter variable\">-a</span></code></pre></div>\n<p align=\"center\">\n    <img src=\"/post_image/docker-2/8.png\" width=\"100%\"/>\n</p>\n<p>다시 컨테이너를 실행하고 싶다면, <code class=\"language-text\">docker start [CONTAINER_NAME | CONTAINER_ID]</code> 를 이용하면 됩니다.</p>\n<p align=\"center\">\n    <img src=\"/post_image/docker-2/9.png\" width=\"100%\"/>\n</p>\n<h3>마치며</h3>\n<p>저희가 오늘 한 것을 요약 해 보겠습니다.</p>\n<ul>\n<li><code class=\"language-text\">docker run</code>을 통해서 <strong>Docker Image</strong>를 가져 온 후, <strong>Docker Container</strong> 를 생성 후 실행 해 보았습니다.</li>\n<li><code class=\"language-text\">docker container ls</code>를 통해서 현재 실행 중인 혹은 실행 중이지 않은 <strong>Docker Container</strong>를 확인 해 보았습니다.</li>\n<li><code class=\"language-text\">docker logs</code>를 통해서 현재 실행 중인 <strong>Docker Container</strong> 내부의 콘솔 로그를 확인 해 보았습니다.</li>\n<li><code class=\"language-text\">docker stop</code>과 <code class=\"language-text\">docker start</code>를 통해 컨테이너를 <strong>끄고 켜는</strong> 작업을 해 보았습니다.</li>\n</ul>\n<p>아직 많은 것들이 이해가 되지 않을 것으로 예상 됩니다. 다음 시간에는 저희가 했던 <code class=\"language-text\">docker run</code>, <code class=\"language-text\">docker stop</code>, <code class=\"language-text\">docker start</code>, <code class=\"language-text\">docker rm</code> 등, <strong>컨테이너를 조작</strong>하는데 쓰는 명령어들이 <strong>정확히 어떤 동작을 하는지</strong>에 대한 정리와, 우리가 원하는 <strong>Docker Image</strong>를 가져 온 후, <strong>컨테이너에 이미지를 실어 실행</strong>하는 것 까지, 해 보도록 하겠습니다!</p>\n<h3>여담</h3>\n<p>군대 전역하고 너무 정신없이 노느라 제 블로그의 존재를 잠깐 잊고 살았네요 ㅎㅎ... 그래도 다시 정신 차리고 열심히 공부 하겠습니다. <a href=\"https://maple.gg/u/%EC%B4%9D%EC%9F%A4\">아, 뭐했냐고요?</a></p>\n<p>물론 이런 것만 한건 아니고 대학교 친구들과 알고리즘 공부도 하고, 동네 친구들과 딥러닝 공부도 하고, 학교 학생회 활동도 하고 있었답니다. 나름 열심히(?) 살았어요...? 어쨌든 여러 가지 고민들을 마치고, 다시 <strong>블로그</strong>에 집중 할까 합니다. 저를 표현하는 가장 좋은 방법이 <strong>블로그</strong>라고 생각 했거든요. 자주 찾아 뵙겠습니다.</p>","id":"fba5ff85-720f-56c1-a7e0-a9d6d159fb63","frontmatter":{"date":"2021-03-20","path":"/cloud-computing/docker-2","title":"Docker 시리즈 - 2. Docker Basic","tags":["Cloud-Computing"],"keyword":"도커, docker, docker tutorial, 도커쓰는이유","summary":"도커의 기본 부터 차근차근","img":"/post_image/thumbnail/docker-2.jpg","series":"Docker"}}},"pageContext":{"postPath":"/cloud-computing/docker-2","series":{"data":{"allMarkdownRemark":{"edges":[{"node":{"id":"fba5ff85-720f-56c1-a7e0-a9d6d159fb63","excerpt":"Review 지난 시간에는 Docker를 왜 배우는지에 대해 간단하게 알아 보았습니다. OS 커널을 공유 함으로써, 빠른 가상화가 가능하고, 완전한 프로세스 분리가 가능하며, 그 프로세스의 환경을 그대로 재현 함으로써 다른 컴퓨터에서도 오류가 안 뜨게 끔 하는 것이 Docker의 핵심 이라고 이야기 했었죠? 이제 Docker를 진짜 사용해 보는 시간을 가져 보겠습니다! Docker Install Docker 설치법은 Window Install…","frontmatter":{"date":"2021-03-20","tags":["Cloud-Computing"],"path":"/cloud-computing/docker-2","title":"Docker 시리즈 - 2. Docker Basic","img":"/post_image/thumbnail/docker-2.jpg","summary":"도커의 기본 부터 차근차근"}}},{"node":{"id":"38ecf034-ac57-50d1-9366-094c556e2273","excerpt":"아 ㅋㅋ 왜 여기선 되는데 거기선 안되는데 여러분들도 많이 경험 해 봤을 이슈입니다. \"아! 왜 여기선 되는데 거기선 터지는거야!\" 한 번 우리가 다른 사람이 작업 한 서버를 구동 할 때, 어떻게 하는지 다시 한번 되세겨 볼까요? 새 컴퓨터에 Node.js 서버를 한번 실행해 본다고 가정 하겠습니다. Linux를 설치 한다. MySQL, nginx를 설치 한다. Node.js…","frontmatter":{"date":"2020-09-17","tags":["Cloud-Computing"],"path":"/cloud-computing/docker","title":"Docker 시리즈 - 1. 도커, 왜 써요?","img":"/post_image/thumbnail/docker-1.jpg","summary":"도커는 왜 쓰는 거에요?"}}}]}}},"categoryPosts":{"data":{"allMarkdownRemark":{"edges":[{"node":{"id":"91df27ea-39c5-50a2-8365-cab69a8a38a0","excerpt":"Intro 안녕하세요! JustKode, 박민재입니다. 오늘은 K8S Package Manager인 Helm에 대해 알아 보도록 하겠습니다. 우리는 K8S로 서비스를 서빙하기 위해, k8s yaml 파일을 이용하여, K8S Resource (, , , , ,  등)를 관리 하게 됩니다. 하지만, 우리는 실제 서비스를 운영 하는데 다음과 같은 상황을 마주치게 됩니다. 여러 개의 K8S Resource를 K8S Cluster…","frontmatter":{"date":"2024-03-01","tags":["Cloud-Computing"],"path":"/cloud-computing/what-is-helm","title":"Helm이란 무엇 인가?","img":"/post_image/thumbnail/what-is-helm.png","summary":"K8S의 Package Manager인, Helm에 대해 알아보자."}}},{"node":{"id":"f2c9a587-fb7c-5963-8398-3ad7356ae23d","excerpt":"안녕하세요? 오늘은 Kubernetes의 Resource들에 대해서 알아 보도록 하겠습니다. Pod Generator Pod: Pod은 k8s에서 사용되는 가장 작은 배포 단위로, 하나 이상의 container로 구성 됩니다. Pod 내의 container들은 동일 호스트에서 실행 됩니다. ReplicaSet: Pod의 복제본을 관리하는 k8s 객체이며, 지정된 수의 Pod 복제본이 주어진 시간안에 실행 되게 합니다. Deployment…","frontmatter":{"date":"2023-04-30","tags":["Cloud-Computing"],"path":"/cloud-computing/k8s-resources","title":"Kubernetes Resources 요약","img":"/post_image/thumbnail/k8s-resources.png","summary":"k8s의 리소스들을 요약 해 보자."}}},{"node":{"id":"f55c467d-2b09-54d6-bc08-b0b08f536b86","excerpt":"안녕하세요? 오늘은 Kubernetes를 구동 시키기 위해서 필요한 기본적인 Components들에 대해서 요약해서 알아보는 시간을 가져 보도록 하겠습니다. (글 매우 짧고, 성의 없음 주의) Control Plane Component…","frontmatter":{"date":"2023-04-24","tags":["Cloud-Computing"],"path":"/cloud-computing/k8s-components","title":"Kubernetes Component 요약","img":"/post_image/thumbnail/k8s-components.png","summary":"k8s의 컴포넌트를 초간단 요약 해 보자."}}},{"node":{"id":"7611f6af-dc48-595b-8866-23beee4d5cda","excerpt":"저번 시간에는 Spark On Kubernetes에 대한 이론을 배웠습니다. 오늘은 Spark On Kubernetes에 대한 실습을 진행 하도록 하겠습니다. 사전 준비 Docker Minikube (Kubernetes 1.20 버전 이상) kubectl Spark 3.0 버전 이상 최신 버전일 수록 좋습니다. 얼마 전에 구형 Docker가 깔려 있는 맥북에서 진행을 해 봤는데 Pod이 생성이 안되더군요.. Pyspark Image Build…","frontmatter":{"date":"2023-03-30","tags":["Data-Engineering","Cloud-Computing"],"path":"/data-engineering/spark-on-k8s-2","title":"Spark on Kubernetes - Practice","img":"/post_image/thumbnail/spark-on-k8s-2.png","summary":"Spark를 Kubernetes Cluster에서 동작 시켜 보자."}}}]}}}}},"staticQueryHashes":["3819017183","63159454"],"slicesMap":{}}