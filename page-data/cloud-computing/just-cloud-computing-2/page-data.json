{"componentChunkName":"component---src-layouts-post-layout-tsx","path":"/cloud-computing/just-cloud-computing-2/","result":{"data":{"markdownRemark":{"html":"<h2>AWS S3</h2>\n<p>안녕하세요? <strong>Justkode</strong> 입니다. 이번 시간에는 <strong>AWS S3</strong>에 대해서 알아 보고, <strong>AWS S3 버킷 생성, 파일 접근 권한 설정, Python 코드 상에서의 접근</strong>을 해 보도록 하겠습니다.</p>\n<p>일단 <strong>AWS S3</strong>에 대해서 간단하게 설명 드리겠습니다. <strong>AWS S3</strong>는 내구성, 가용성, 성능, 보안이 뛰어난 스토리지 서비스 입니다. <strong>사용한 스토리지 크기 만큼 요구가 청구</strong>되며, 작은 규모에서 시작하여 성능 또는 안정성 저하 없이 원하는 대로 애플리케이션을 확장할 수 있습니다. <strong>웹 인터페이스</strong>를 이용하여, 제한 없이 마음껏 저장 및 검색이 가능합니다. <strong>(이에 대한 요금만 지출하면 됩니다.)</strong></p>\n<p>같은 리전 내에서는 <strong>데이터 송수신을 무료</strong>로 할 수 있고, 그러므로 실제 서버를 구축 할 때, <strong>AWS EC2, AWS Lambda</strong>를 이용하여 컴퓨팅을 하고, 중간에 바뀔일이 없는 정적, 미디어 파일 같은 경우는 <strong>AWS S3</strong>를 이용해 큰 데이터를 전송하는 방식으로 사용합니다.</p>\n<p align=\"center\">\n\t<img src=\"/post_image/just-cloud-computing/02-01.jpg\" width=\"70%\"/>\n    <p align=\"center\" style=\"color:#888888; font-size: 12px;\">\n\t\tAWS S3\n\t</p>\n</p>\n<h2>Bucket &#x26; Object</h2>\n<p>일단 S3를 이용하기전 두 가지 개념을 알아 두시는 것이 좋습니다. 첫 번째는 <strong>Bucket</strong> 입니다. 말 그대로 데이터를 담을 수 있는 양동이라고 생각하면 됩니다. <strong>Bucket</strong>은 S3에서 <strong>최상위 디렉토리</strong>로써 사용 됩니다. 계정 당 100개의 버킷을 만들 수 있으며, <strong>이름은 S3 동일 리전 내에서 유일</strong> 하여야 합니다. 저장할 수 있는 데이터는 무제한 입니다.</p>\n<p>두 번째는 <strong>Object</strong> 입니다. S3에서의 <strong>Object</strong>는 <strong>메타 데이터와 파일의 쌍</strong>이라고 생각 하시는 것이 좋습니다. <strong>메타 데이터</strong>에는 파일의 접근 권한, 이름, 유형 등이 적재 되어 있습니다.</p>\n<p align=\"center\">\n\t<img src=\"/post_image/just-cloud-computing/02-02.jpg\" width=\"70%\"/>\n    <p align=\"center\" style=\"color:#888888; font-size: 12px;\">\n\t\tBucket & Object\n\t</p>\n</p>\n<h2>Bucket 생성</h2>\n<p>먼저 <strong>Bucket</strong>을 만들어 보겠습니다. <a href=\"https://s3.console.aws.amazon.com/s3/home?region=ap-northeast-2\">S3 콘솔</a>에 접속 하신 다음, 우측 상단에 있는 <strong>버킷 만들기</strong>를 클릭 합니다.</p>\n<p align=\"center\">\n\t<img src=\"/post_image/just-cloud-computing/02-03.png\" width=\"70%\"/>\n    <p align=\"center\" style=\"color:#888888; font-size: 12px;\">\n\t\tBucket 생성\n\t</p>\n</p>\n<p>그 다음, <strong>버킷 생성 창</strong>으로 이동 합니다. 그 다음 여기에 <strong>버킷 이름과 리전</strong>을 선택 해 줄 수 있습니다. 혹은 기존에 소유한 버킷에서 설정을 가져올 수 있습니다.</p>\n<p align=\"center\">\n\t<img src=\"/post_image/just-cloud-computing/02-04.png\" width=\"70%\"/>\n    <p align=\"center\" style=\"color:#888888; font-size: 12px;\">\n\t\tBucket 생성\n\t</p>\n</p>\n<p>그 밑에서는 <strong>퍼블릭 액세스</strong>에 대한 설정을 해 줄 수 있습니다. 여기서 말하는 <strong>ACL</strong>은 버킷이나 객체에 대해 요청자의 권한 허용 범위를 어디까지 설정할 것인가에 대해 설정 되어 있는 리스트라고 생각 하시면 됩니다. 만약 모든 사람들이 이 버킷에 접근 할 수 있게 끔 할때는 <strong>모든 퍼블릭 엑세스 차단을 체크 해제</strong> 함으로써 가능캐 할 수 있습니다.</p>\n<p align=\"center\">\n\t<img src=\"/post_image/just-cloud-computing/02-05.png\" width=\"70%\"/>\n    <p align=\"center\" style=\"color:#888888; font-size: 12px;\">\n\t\t퍼블릭 액세스\n\t</p>\n</p>\n<p>태그 탭에서 태그를 추가 할 수도 있습니다. 암호화 설정을 통해 들어오는 파일을 자동으로 암호화 하는 기능 또한 가지고 있습니다. 이렇게 모두 입력 한 후에, 버킷을 한 번 생성 해 보겠습니다. 밑에 있는 <strong>버킷 만들기</strong>를 클릭하면 됩니다.</p>\n<p align=\"center\">\n\t<img src=\"/post_image/just-cloud-computing/02-06.png\" width=\"70%\"/>\n    <p align=\"center\" style=\"color:#888888; font-size: 12px;\">\n\t\tBucket 생성\n\t</p>\n</p>\n<p>이렇게 버킷을 만든 후 대시보드에 아까 만든 버킷이 추가 된 모습을 볼 수 있습니다. 한 번 버킷을 클릭 해 볼까요?</p>\n<p align=\"center\">\n\t<img src=\"/post_image/just-cloud-computing/02-07.png\" width=\"70%\"/>\n    <p align=\"center\" style=\"color:#888888; font-size: 12px;\">\n\t\tBucket 생성 완료\n\t</p>\n</p>\n<p>그러면 버킷 내부의 대시보드 창을 볼 수가 있습니다. 아까 이야기 했듯이 <strong>버킷</strong>은 S3에서 <strong>최상위 디렉토리</strong>로써 사용 된다고 이야기 했죠? 그럼 최상위 폴더에 파일을 추가 해 보겠습니다. <strong>업로드</strong>를 한 번 클릭 해 볼까요?</p>\n<p align=\"center\">\n\t<img src=\"/post_image/just-cloud-computing/02-08.png\" width=\"70%\"/>\n    <p align=\"center\" style=\"color:#888888; font-size: 12px;\">\n\t\tBucket 대시 보드\n\t</p>\n</p>\n<p>그러면 이렇게 업로드 창으로 넘어 오게 됩니다. 여기서 우리는 <strong>파일 업로드</strong>, 혹은 <strong>폴더 업로드</strong>를 통해서 파일을 업로드 할 수 있습니다. 저는 <code class=\"language-text\">Football teams.csv</code>를 올려 놓은 상태입니다.</p>\n<p align=\"center\">\n\t<img src=\"/post_image/just-cloud-computing/02-09.png\" width=\"70%\"/>\n    <p align=\"center\" style=\"color:#888888; font-size: 12px;\">\n\t\t파일 업로드\n\t</p>\n</p>\n<p>밑으로 내려 보면, 이렇게 권한을 설정 할 수 있는 창이 나옵니다. 만약 <strong>업로드 하는 파일에 대해 모든 사람이 엑세스 할 수 있도록</strong> 설정 하려면 다음과 같이 세팅하면 됩니다.</p>\n<p align=\"center\">\n\t<img src=\"/post_image/just-cloud-computing/02-10.png\" width=\"70%\"/>\n    <p align=\"center\" style=\"color:#888888; font-size: 12px;\">\n\t\t파일 업로드\n\t</p>\n</p>\n<p>그 다음에는 스토리지 클래스를 설정 할 수 있습니다. 용도에 따라 설정 하여야 가격과 효율을 챙길 수 있습니다. 밑에는 <strong>태그</strong>와 <strong>메타 데이터</strong>를 설정 할 수 있습니다.</p>\n<p align=\"center\">\n\t<img src=\"/post_image/just-cloud-computing/02-11.png\" width=\"70%\"/>\n    <p align=\"center\" style=\"color:#888888; font-size: 12px;\">\n\t\t파일 업로드\n\t</p>\n</p>\n<p>업로드를 누르면 다음과 같이 파일이 업로드 된 모습을 볼 수가 있습니다. 밑에 생성된 파일을 클릭 해 볼까요?</p>\n<p align=\"center\">\n\t<img src=\"/post_image/just-cloud-computing/02-12.png\" width=\"70%\"/>\n    <p align=\"center\" style=\"color:#888888; font-size: 12px;\">\n\t\t파일 업로드 완료\n\t</p>\n</p>\n<p>다음과 같이 파일의 세부 정보를 열람 할 수 있습니다. 여기서 객체 URL을 클릭 하면, 파일을 열람 할 수 있습니다.</p>\n<p align=\"center\">\n\t<img src=\"/post_image/just-cloud-computing/02-13.png\" width=\"70%\"/>\n    <p align=\"center\" style=\"color:#888888; font-size: 12px;\">\n\t\t업로드 파일 확인\n\t</p>\n</p>\n<h2>코드 구현, 그 전에..</h2>\n<p>우리는 일단 그 전에 <strong>AWS IAM</strong>을 통해 본인이라는 것을 인증 할 수단이 필요합니다. <strong>AWS IAM - 사용자</strong>탭으로 들어 간 후, <strong>사용자 추가</strong>를 클릭합니다. 그럼 다음과 같이 사용자 추가를 할 수 있는 창이 뜨게 됩니다. <strong>사용자 이름</strong>을 입력하고, <strong>프로그래밍 방식 엑세스</strong>를 체크 하고 다음으로 넘어 갑니다.</p>\n<p align=\"center\">\n\t<img src=\"/post_image/just-cloud-computing/02-14.jpg\" width=\"70%\"/>\n    <p align=\"center\" style=\"color:#888888; font-size: 12px;\">\n\t\t사용자 추가 클릭\n\t</p>\n</p>\n<p>그 다음에는 <strong>기존 정책 직접 연결</strong>을 클릭하고, <strong>정책 필터</strong>에서 <strong>AmazonS3FullAccess</strong>를 검색 후 선택 합니다. 그 다음 사용자를 생성해 줍니다.</p>\n<p align=\"center\">\n\t<img src=\"/post_image/just-cloud-computing/02-15.jpg\" width=\"70%\"/>\n    <p align=\"center\" style=\"color:#888888; font-size: 12px;\">\n\t\t정책 필터 선택\n\t</p>\n</p>\n<p>그럼 다음과 같이 <strong>액세스 키 ID</strong>와 <strong>비밀 액세스 키</strong>가 생성 된 것을 볼 수 있습니다. 이를 이용할 예정이니 잘 보관 해 주세요!</p>\n<p>하지만, 정말 중요한 사실이 하나 있다면, <strong>액세스 키 ID</strong>와 <strong>비밀 액세스 키</strong>는 <strong>절대 Github 같은 사이트에 올리지 마세요.</strong></p>\n<p align=\"center\">\n\t<img src=\"/post_image/just-cloud-computing/02-16.jpg\" width=\"70%\"/>\n    <p align=\"center\" style=\"color:#888888; font-size: 12px;\">\n\t\t액세스 키 ID와 비밀 액세스 키 생성 완료\n\t</p>\n</p>\n<p>그 다음, <strong>AWS CLI</strong>를 컴퓨터에 설치해 줍니다. 설치 법은 다음과 같습니다.</p>\n<ul>\n<li>Windows</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"terminal\"><pre class=\"language-terminal\"><code class=\"language-terminal\">msiexec.exe /i https://awscli.amazonaws.com/AWSCLIV2.msi</code></pre></div>\n<ul>\n<li>Linux</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"terminal\"><pre class=\"language-terminal\"><code class=\"language-terminal\">curl &quot;https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip&quot; -o &quot;awscliv2.zip&quot;\nunzip awscliv2.zip\nsudo ./aws/install</code></pre></div>\n<ul>\n<li>Mac</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"terminal\"><pre class=\"language-terminal\"><code class=\"language-terminal\">curl &quot;https://awscli.amazonaws.com/AWSCLIV2.pkg&quot; -o &quot;AWSCLIV2.pkg&quot;\nsudo installer -pkg AWSCLIV2.pkg -target /</code></pre></div>\n<p>그 다음 터미널에서 다음을 입력 합니다. 여기서 <strong>ap-northeast-2</strong> 는 서울 리전입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"terminal\"><pre class=\"language-terminal\"><code class=\"language-terminal\">aws configure\n\nAWS Access Key ID [None]: 액세스 키 ID 입력\nAWS Secret Access Key [None]: 비밀 액세스 키\nDefault region name [None]: ap-northeast-2\nDefault output format [None]: (입력 안해도 무방)</code></pre></div>\n<h2>Python 예제</h2>\n<p><strong>Python</strong>에서 파일 업로드를 하는 방법은 다음과 같습니다. 일단 위의 과정을 거쳐 <strong>AWS Configure</strong>을 완료 하셨다면, <code class=\"language-text\">boto3</code>를 설치 해 주세요.</p>\n<div class=\"gatsby-highlight\" data-language=\"terminal\"><pre class=\"language-terminal\"><code class=\"language-terminal\">pip install boto3</code></pre></div>\n<h3>파일 업로드 예제</h3>\n<p>파일 업로드 예제는 다음과 같습니다. 코드에 대한 설명은 주석에 있습니다.</p>\n<ul>\n<li>main.py</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> boto3\n<span class=\"token keyword\">import</span> sys\n<span class=\"token keyword\">import</span> os\n<span class=\"token keyword\">from</span> datetime <span class=\"token keyword\">import</span> date\n\nfile_path <span class=\"token operator\">=</span> sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>  <span class=\"token comment\"># python main.py 파일경로</span>\ntoday <span class=\"token operator\">=</span> date<span class=\"token punctuation\">.</span>today<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 오늘 날짜의 Date 객체</span>\ndate_path <span class=\"token operator\">=</span> today<span class=\"token punctuation\">.</span>strftime<span class=\"token punctuation\">(</span><span class=\"token string\">\"%Y/%m-%d/\"</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 폴더 명 생성</span>\n\nsession <span class=\"token operator\">=</span> boto3<span class=\"token punctuation\">.</span>Session<span class=\"token punctuation\">(</span>profile_name<span class=\"token operator\">=</span><span class=\"token string\">\"default\"</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># boto3의 Session 생성</span>\ns3 <span class=\"token operator\">=</span> session<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">(</span><span class=\"token string\">'s3'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># Client 객체 생성</span>\n\nlocal_file_path <span class=\"token operator\">=</span> file_path  <span class=\"token comment\"># 파일 경로 복사</span>\nfile_name <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>basename<span class=\"token punctuation\">(</span>file_path<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 파일 명 추출</span>\nbucket <span class=\"token operator\">=</span> <span class=\"token string\">\"justkode-mys3\"</span>  <span class=\"token comment\"># 버킷명 설정</span>\nupload_path <span class=\"token operator\">=</span> date_path <span class=\"token operator\">+</span> file_name  <span class=\"token comment\"># 업로드 경로 설정</span>\n\ns3<span class=\"token punctuation\">.</span>upload_file<span class=\"token punctuation\">(</span>local_file_path<span class=\"token punctuation\">,</span> bucket<span class=\"token punctuation\">,</span> upload_path<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 업로드</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>file_name<span class=\"token punctuation\">}</span></span><span class=\"token string\">: File Upload Success'</span></span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>이렇게 파일을 저장한 후, <code class=\"language-text\">python3 main.py 파일경로</code>을 입력 하면, 파일을 업로드 하는 모습을 볼 수 있습니다.</p>\n<p align=\"center\">\n\t<img src=\"/post_image/just-cloud-computing/02-17.png\" width=\"70%\"/>\n    <p align=\"center\" style=\"color:#888888; font-size: 12px;\">\n\t\t터미널 실행\n\t</p>\n</p>\n<p>버킷에 올라간 모습입니다.</p>\n<p align=\"center\">\n\t<img src=\"/post_image/just-cloud-computing/02-18.png\" width=\"70%\"/>\n    <p align=\"center\" style=\"color:#888888; font-size: 12px;\">\n\t\t업로드 성공\n\t</p>\n</p>\n<h3>파일 다운로드 예제</h3>\n<p>파일 다운로드 예제는 다음과 같습니다. 코드에 대한 설명은 주석에 있습니다.</p>\n<ul>\n<li>main2.py</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> boto3\n<span class=\"token keyword\">import</span> sys\n<span class=\"token keyword\">import</span> os\n\nfile_path <span class=\"token operator\">=</span> sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>  <span class=\"token comment\"># python main.py 파일경로</span>\ntoday <span class=\"token operator\">=</span> date<span class=\"token punctuation\">.</span>today<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 오늘 날짜의 Date 객체</span>\n\nsession <span class=\"token operator\">=</span> boto3<span class=\"token punctuation\">.</span>Session<span class=\"token punctuation\">(</span>profile_name<span class=\"token operator\">=</span><span class=\"token string\">\"default\"</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># boto3의 Session 생성</span>\ns3 <span class=\"token operator\">=</span> session<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">(</span><span class=\"token string\">'s3'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># Client 객체 생성</span>\n\nupload_path <span class=\"token operator\">=</span> file_path  <span class=\"token comment\"># 파일 경로 복사</span>\nfile_name <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>basename<span class=\"token punctuation\">(</span>file_path<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 파일 명 추출</span>\nbucket <span class=\"token operator\">=</span> <span class=\"token string\">\"justkode-mys3\"</span>  <span class=\"token comment\"># 버킷명 설정</span>\n\ns3<span class=\"token punctuation\">.</span>download_file<span class=\"token punctuation\">(</span>bucket<span class=\"token punctuation\">,</span> upload_path<span class=\"token punctuation\">,</span> <span class=\"token string\">'download/'</span> <span class=\"token operator\">+</span> file_name<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 다운로드</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>file_name<span class=\"token punctuation\">}</span></span><span class=\"token string\">: File Download Success'</span></span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>이렇게 파일을 저장한 후, <code class=\"language-text\">python3 main2.py 버킷내 파일경로</code>를 입력 하면, 파일을 다운로드 하는 모습을 볼 수 있습니다.</p>\n<p align=\"center\">\n\t<img src=\"/post_image/just-cloud-computing/02-19.png\" width=\"70%\"/>\n    <p align=\"center\" style=\"color:#888888; font-size: 12px;\">\n\t\t터미널 실행\n\t</p>\n</p>\n<p>다운로드에 성공 한 모습입니다.</p>\n<p align=\"center\">\n\t<img src=\"/post_image/just-cloud-computing/02-20.png\" width=\"30%\"/>\n    <p align=\"center\" style=\"color:#888888; font-size: 12px;\">\n\t\t다운로드 모습\n\t</p>\n</p>\n<h2>마치며</h2>\n<p>이렇게 <strong>AWS S3</strong>를 사용해 보는 시간을 가져 보았습니다. 이 외에도 서드파티 패키지, S3를 이용한 웹 호스팅, 퍼블릭으로 공개 되지 않은 S3 파일 접근을 위한 키 발급 등등 많은 기능을 지원 하고 있으니, 많이 찾아보는 것을 추천드립니다. 다음 시간에는, <strong>AWS Lambda</strong>에 대해 다뤄보는 시간을 가져보도록 하겠습니다.</p>","id":"a970f978-c18b-5e60-9833-49bb2a24e0fa","frontmatter":{"date":"2021-07-16","path":"/cloud-computing/just-cloud-computing-2","title":"[찍먹 Cloud Computing] 2. AWS S3","tags":["Cloud-Computing","Python"],"keyword":"Cloud Computing, AWS, S3, AWS S3, boto3","summary":"AWS S3와 boto3를 사용 해 보자","img":"/post_image/thumbnail/just-cloud-computing-2.jpg","series":"찍먹 Cloud Computing"}}},"pageContext":{"postPath":"/cloud-computing/just-cloud-computing-2","series":{"data":{"allMarkdownRemark":{"edges":[{"node":{"id":"caefa963-6e15-52e9-9517-f7f21f7f83be","excerpt":"Kubernetes 안녕하세요! 오늘은 Kubernetes에 대해서 배워 보는 시간을 가져 보도록 하겠습니다. 일단 Kubernetes에 대해 알아 보기 전에, Container Orchestration에 대해서 먼저 알아 보도록 하겠습니다. Container Orchestration…","frontmatter":{"date":"2021-08-17","tags":["Cloud-Computing"],"path":"/cloud-computing/just-cloud-computing-6","title":"[찍먹 Cloud Computing] 6. Kubernetes","img":"/post_image/thumbnail/just-cloud-computing-6.jpg","summary":"쿠버네티스에 대해서 알아보자."}}},{"node":{"id":"4eaf7068-4945-5c51-8c8c-5824b4322d91","excerpt":"Docker Basic 안녕하세요? JustKode 입니다. 오늘은 컨테이너 기술을 구현하기 위한 Docker…","frontmatter":{"date":"2021-08-02","tags":["Cloud-Computing"],"path":"/cloud-computing/just-cloud-computing-5","title":"[찍먹 Cloud Computing] 5. Docker Image, Container, Dockerfile","img":"/post_image/thumbnail/just-cloud-computing-5.jpg","summary":"도커의 기본 사용법에 대해서 알아보자."}}},{"node":{"id":"e2205b1b-8c97-5e6f-be7e-095f386a1379","excerpt":"AWS의 Database 안녕하세요? Justkode 입니다. 이번 시간에는 AWS의 Database에 대해서 공부 해 보는 시간을 가져 보도록 하겠습니다. AWS에서 사용하는 Database는 두 가지가 있습니다. DynamoDB 첫 번째는 DynamoDB 입니다. 이는 AWS의 대표격으로 사용 되는 데이터베이스이며, NoSQL Database 중 하나 입니다. 여기서 NoSQL은 무엇이냐 하면, 말 그대로 표준 SQL…","frontmatter":{"date":"2021-07-27","tags":["Cloud-Computing"],"path":"/cloud-computing/just-cloud-computing-4","title":"[찍먹 Cloud Computing] 4. DynamoDB & Amazon RDS","img":"/post_image/thumbnail/just-cloud-computing-4.jpg","summary":"두 개의 대표적인 AWS DB를 공부 해 보자"}}},{"node":{"id":"ac18d925-067a-5f23-a7bb-b00fd02c6b60","excerpt":"AWS Lambda 안녕하세요? Justkode 입니다. 이번 시간에는 AWS Lambda에 대해서 알아 보고, AWS Lambda 함수를 생성 해 보고, 이를 AWS API Gateway를 통해 연결 하여 사용 해 보는 시간을 가져 보도록 하겠습니다. AWS Lambda에 대해서 간단하게 설명 하고 넘어 가자면, **PaaS (Platform As A Service)**의 일종으로, 우리가 AWS Lambda에 우리가 구현한 API Code…","frontmatter":{"date":"2021-07-21","tags":["Cloud-Computing"],"path":"/cloud-computing/just-cloud-computing-3","title":"[찍먹 Cloud Computing] 3. AWS Lambda","img":"/post_image/thumbnail/just-cloud-computing-3.jpg","summary":"Python 기반으로 AWS Lambda 함수를 만들어보자."}}},{"node":{"id":"a970f978-c18b-5e60-9833-49bb2a24e0fa","excerpt":"AWS S3 안녕하세요? Justkode 입니다. 이번 시간에는 AWS S3에 대해서 알아 보고, AWS S3 버킷 생성, 파일 접근 권한 설정, Python 코드 상에서의 접근을 해 보도록 하겠습니다. 일단 AWS S3에 대해서 간단하게 설명 드리겠습니다. AWS S…","frontmatter":{"date":"2021-07-16","tags":["Cloud-Computing","Python"],"path":"/cloud-computing/just-cloud-computing-2","title":"[찍먹 Cloud Computing] 2. AWS S3","img":"/post_image/thumbnail/just-cloud-computing-2.jpg","summary":"AWS S3와 boto3를 사용 해 보자"}}},{"node":{"id":"42bfd111-c953-556a-9bc2-1b915f83b767","excerpt":"AWS EC2 안녕하세요? Justkode 입니다. 이번 시간에는 AWS EC2에 대해서 알아 보고, AWS EC…","frontmatter":{"date":"2021-07-06","tags":["Cloud-Computing"],"path":"/cloud-computing/just-cloud-computing-1","title":"[찍먹 Cloud Computing] 1. AWS EC2란? / AWS EC2 인스턴스 만들기","img":"/post_image/thumbnail/just-cloud-computing-1.jpg","summary":"AWS EC2 인스턴스를 만들어 보자."}}},{"node":{"id":"0f0dbc8c-b2d6-51c3-895e-f300be8991d8","excerpt":"Cloud Computing? 안녕하세요? Justkode 입니다. Cloud Computing…","frontmatter":{"date":"2021-06-25","tags":["Cloud-Computing"],"path":"/cloud-computing/just-cloud-computing-0","title":"[찍먹 Cloud Computing] 0. Orientation","img":"/post_image/thumbnail/just-cloud-computing-0.jpg","summary":"Cloud Computing을 찍먹해 보자."}}}]}}},"categoryPosts":{"data":{"allMarkdownRemark":{"edges":[{"node":{"id":"f55c467d-2b09-54d6-bc08-b0b08f536b86","excerpt":"안녕하세요? 오늘은 Kubernetes를 구동 시키기 위해서 필요한 기본적인 Components들에 대해서 요약해서 알아보는 시간을 가져 보도록 하겠습니다. (글 매우 짧고, 성의 없음 주의) Control Plane Component…","frontmatter":{"date":"2023-04-24","tags":["Cloud-Computing"],"path":"/cloud-computing/k8s-components","title":"Kubernetes Component 요약","img":"/post_image/thumbnail/k8s-components.png","summary":"k8s의 컴포넌트를 초간단 요약 해 보자."}}},{"node":{"id":"7611f6af-dc48-595b-8866-23beee4d5cda","excerpt":"저번 시간에는 Spark On Kubernetes에 대한 이론을 배웠습니다. 오늘은 Spark On Kubernetes에 대한 실습을 진행 하도록 하겠습니다. 사전 준비 Docker Minikube (Kubernetes 1.20 버전 이상) kubectl Spark 3.0 버전 이상 최신 버전일 수록 좋습니다. 얼마 전에 구형 Docker가 깔려 있는 맥북에서 진행을 해 봤는데 Pod이 생성이 안되더군요.. Pyspark Image Build…","frontmatter":{"date":"2023-03-30","tags":["Data-Engineering","Cloud-Computing"],"path":"/data-engineering/spark-on-k8s-2","title":"Spark on Kubernetes - Practice","img":"/post_image/thumbnail/spark-on-k8s-2.png","summary":"Spark를 Kubernetes Cluster에서 동작 시켜 보자."}}},{"node":{"id":"3a543178-c1c9-5cfb-9c9e-b89aed5e8ead","excerpt":"안녕하세요? 오늘은 Kubernetes 환경에 JupyterHub를 설치 하는 방법에 대해서 알아 보도록 하겠습니다. Kubernetes Kubernetes는 컨테이너를 쉽고 빠르게 배포/확장하고 관리를 자동화해주는 Container Orchestration Tool 입니다. Kubernetes 시스템을 통해, 다음을 제공 받을 수 있습니다. 서비스 디스커버리와 로드 밸런싱: DNS 이름, 혹은 자체 IP…","frontmatter":{"date":"2023-03-25","tags":["Data-Engineering","Cloud-Computing"],"path":"/data-engineering/jupyterhub-on-k8s","title":"Jupyterhub on Kubernetes","img":"/post_image/thumbnail/jupyterhub-on-k8s.jpg","summary":"Jupyterhub를 Kubernetes Cluster에서 실행 해 보자."}}},{"node":{"id":"6108ea9c-22bb-5693-995b-aebd5cfb3bcf","excerpt":"Spark Apache Spark는 기존 Hadoop의 MapReduce 형태의 클러스터 컴퓨팅의 단점을 보완하기 위해 탄생한 프레임워크 입니다. 기존 하둡의 MapReduce에서는 Disk에서 데이터를 읽은 후, Mapping, Shuffling, Reducing의 과정을 거쳐서, 다시 Disk에 저장하는 형식으로 진행 되는데요, 이는 Disk I/O가 자주 발생 하기 때문에, 속도가 상대적으로 느리다는 단점이 있습니다. 하지만 Apache…","frontmatter":{"date":"2023-03-06","tags":["Data-Engineering","Cloud-Computing"],"path":"/data-engineering/spark-on-k8s-1","title":"Spark on Kubernetes - Concept","img":"/post_image/thumbnail/spark-on-k8s-1.jpeg","summary":"Spark를 Kubernetes Cluster에서 동작 시켜 보자."}}}]}}}}},"staticQueryHashes":["2876327880","63159454"],"slicesMap":{}}