{"componentChunkName":"component---src-layouts-post-layout-tsx","path":"/cloud-computing/just-cloud-computing-6/","result":{"data":{"markdownRemark":{"html":"<h2>Kubernetes</h2>\n<p>안녕하세요! 오늘은 <strong>Kubernetes</strong>에 대해서 배워 보는 시간을 가져 보도록 하겠습니다. 일단 <strong>Kubernetes</strong>에 대해 알아 보기 전에, <strong>Container Orchestration</strong>에 대해서 먼저 알아 보도록 하겠습니다.</p>\n<p><strong>Container Orchestration</strong>이란, 컨테이너의 배포, 관리, 확장, 네트워킹 등을 자동화 하는 것을 의미 합니다. 우리는 어플리케이션들을 <strong>컨테이너화</strong> 하면서, 원하는 시간에 빠르게, 안정적으로 어플리케이션을 배포 할 수 있게 되었습니다.</p>\n<p>우리는 이러한 이점으로, 다양한 이슈를 해결 할 수 있었습니다. 장애가 생긴 어플리케이션을 빠르게 재시동 한다던지, 트레픽에 따라 컨테이너를 복사하여 빠르게 늘리고 줄이던지 말이죠.</p>\n<p>하지만, 아직 뭔가 아쉽습니다. 이러한 것들을 우리가 <strong>자동</strong>으로 했으면 더 좋을텐데 말이죠. 컨테이너에 이상이 생기면, 자동으로 컨테이너를 재시작 해주고, 트레픽에 따라 자동으로 컨테이너를 늘렸다, 줄였다, 해 주는 방식으로 말이죠.</p>\n<p>우리는 이러한 <strong>Container Orchestration</strong>을 지원 해 주는, <strong>Kubernetes</strong>의 개념에 대해 이번 시간에 배워 보려고 합니다.</p>\n<p align=\"center\">\n\t<img src=\"/post_image/just-cloud-computing/06-01.png\" width=\"300px\"/>\n\t<p align=\"center\" style=\"color:#888888; font-size: 12px;\">\n\t\tKubernetes\n\t</p>\n</p>\n<h2>Docker Swarm?</h2>\n<p>사실, <strong>Container Orchestration</strong>은 <strong>Docker</strong>에 내장 되어 있는, <strong>Docker Swarm</strong>으로도 가능 합니다. 저도 실제로 많은 프로젝트에서 <strong>Docker Swarm</strong>을 사용 합니다. 하지만, <strong>Docker Swarm</strong>과 <strong>Kubernetes</strong>의 장단점을 비교 하면 다음과 같습니다.</p>\n<p align=\"center\">\n\t<img src=\"/post_image/just-cloud-computing/06-02.png\" width=\"300px\"/>\n\t<p align=\"center\" style=\"color:#888888; font-size: 12px;\">\n\t\t대신 귀여운 돌고래를 드리겠습니다.\n\t</p>\n</p>\n<h3>Docker Swarm</h3>\n<ul>\n<li>장점: 가볍다, 설치 및 설정이 간편하다, 소~중형 시스템에서는 좋다</li>\n<li>단점: 대형 클러스터를 다루는 데에는, 대시보드, 중앙 관리를 위한 API 서버등을 지원 하지 않는다.</li>\n</ul>\n<h3>Kubernetes</h3>\n<ul>\n<li>장점: 매우 안정적이다, 중~대형 클러스터를 다루는 데에 좋다, 대시보드, 중앙 관리를 위한 API 서버 등을 지원 한다.</li>\n<li>단점: 무겁다, 소형 서비스에는 적합 하지 않다.</li>\n</ul>\n<h2>Kubernetes의 아키텍처</h2>\n<p><strong>Kubernetes의 아키텍처</strong>의 구성 요소는 다음과 같습니다.</p>\n<p align=\"center\">\n\t<img src=\"/post_image/just-cloud-computing/06-03.png\" width=\"90%\"/>\n\t<p align=\"center\" style=\"color:#888888; font-size: 12px;\">\n\t\t대신 귀여운 돌고래를 드리겠습니다.\n\t</p>\n</p>\n<p>일단 구성요소 하나하나 설명을 드리겠습니다.</p>\n<ul>\n<li>API Server: 말 그대로 클러스터의 <strong>상태를 바꾸거나 조회</strong> 하는데에 사용하며, REST API 형태로 다른 요소들과 통신 합니다. 내부 통신, 외부 접속등 어떠한 요청이 올 때마다. <strong>권한을 체크</strong>하여, 권한이 없을 경우에는 요청을 차단 합니다.</li>\n<li>etcd: <strong>클러스터의 모든 상태와 메타 데이터를 저장</strong> 합니다. 분산 시스템으로 구성하여 안전성을 높이고, 가볍고 빠르면서 정확한 데이터가 오고 갈 수 있도록 합니다. <strong>Key-Value</strong> 형태로 데이터를 저장합니다. 중요한 데이터니 만큼 백업이 요구 됩니다. 또한 etcd에는 <strong>Current State</strong>와 <strong>Desired State</strong>에 대한 정보를 가지고 있는데, API Server 측에서 <strong>Current State</strong>와 <strong>Desired State</strong>를 비교 하여, 둘이 일치 할 수 있도록 상태를 조절 합니다.</li>\n<li>Scheduler: <strong>새로 생성된 Pod을 감지</strong>하며, 해당 Pod에 대한 요청이 들어 왔을 때, 어떤 노드에 Pod를 실행을 할지 결정 합니다. 또한, <strong>노드의 상태와 Pod의 요구 사항들을 체크</strong> 하는 역할 또한 진행 합니다.</li>\n</ul>\n<p align=\"center\">\n\t<img src=\"/post_image/just-cloud-computing/06-04.svg\" width=\"400px\" />\n\t<p align=\"center\" style=\"color:#888888; font-size: 12px;\">\n\t\tNode, Pod의 관계 (출처: https://kubernetes.io/ko/docs/tutorials/kubernetes-basics/explore/explore-intro/)\n\t</p>\n</p>\n<ul>\n<li>Controller: <strong>끊임 없이 상태를 체크하고 원하는 상태를 유지</strong> 합니다. 논리적으로 복제, 노드, 엔드포인트 등 다양한 컨트롤러가 존재 합니다.</li>\n<li>Kubelet: <strong>각 노드에서 실행</strong>되며, <strong>Pod을 실행 및 중지하고 상태를 체크</strong>합니다. 또한, Container의 Runtime Interface를 제공 합니다. 즉, 컨테이너와 연결 될 수 있도록 도와준다는 것이지요.</li>\n<li>Proxy: 네트워크 프록시와 부하를 분산시키는 역할을 합니다. 성능의 이슈가 있어, 커널 레벨에서 iptable을 제공 해 주어, 설정만 관리 해 줍니다.</li>\n</ul>\n<h3>Examples</h3>\n<ol>\n<li>사용자가 하나의 Pod를 <strong>API Server</strong>에 요청 합니다.</li>\n<li><strong>API Server</strong>는 Pod을 요청 한 정보를 <strong>etcd</strong>에 작성 합니다.</li>\n<li><strong>Controller</strong>는 새 Pod 생성 요청이 들어 온 것을 확인합니다.</li>\n<li><strong>Controller</strong>가 실제 Pod을 할당하는 요청을 <strong>API Server</strong>에 전달 합니다.</li>\n<li><strong>API Server</strong>는 Pod 할당 요청 정보를 <strong>etcd</strong>에 작성 합니다.</li>\n<li><strong>Scheduler</strong>는 새 Pod 할당 요청이 들어 왔는지 확인 합니다.</li>\n<li><strong>Scheduler</strong>는 적당한 <strong>노드</strong>를 골라, 이에 Pod을 할당 하도록 <strong>API Server</strong>에 요청 합니다.</li>\n<li><strong>API Server</strong>는 <strong>특정 노드에 Pod</strong>이 할당 되었다는 정보를 <strong>etcd</strong>에 작성 합니다.</li>\n<li><strong>Kubelet</strong>은 현재 미실행 Pod을 확인하고, Pod을 생성 (실행) 합니다.</li>\n<li><strong>Kubelet</strong>은 Pod이 생성 되었다는 정보를 <strong>API Server에 전달</strong> 합니다.</li>\n<li><strong>API Server</strong>는 Pod이 생성 되었다는 정보를 <strong>etcd</strong>에 기록 합니다.</li>\n</ol>\n<h2>Kubernetes의 Object</h2>\n<p>다음은 <strong>Kubernetes의 Object</strong>에 대해서 설명 하겠습니다.</p>\n<h3>Pod</h3>\n<p><strong>Kubernetes</strong>는 <strong>Container</strong>가 아닌, <strong>Container</strong>를 감싸는 <strong>Pod</strong>을 배포 합니다. 각 <strong>Pod</strong>는 전체 클러스터에서 고유한 <strong>IP</strong>를 할당 받습니다. 또한, <strong>Pod</strong> 내부에는 여러 개의 컨테이너가 있을 수 있습니다. 각 <strong>Pod</strong>은 용도에 따라, 네트워크 혹은 볼륨을 Pod 내부에 있는 <strong>Container</strong>마다 공유 할 수 있습니다.</p>\n<p align=\"center\">\n\t<img src=\"/post_image/just-cloud-computing/06-05.svg\" width=\"400px\" />\n\t<p align=\"center\" style=\"color:#888888; font-size: 12px;\">\n\t\tPod (출처: https://kubernetes.io/ko/docs/tutorials/kubernetes-basics/explore/explore-intro/)\n\t</p>\n</p>\n<h3>ReplicaSet</h3>\n<p><strong>ReplicaSet</strong>은, 여러 개의 <strong>Pod</strong>을 한꺼번에 관리 하는 데에 사용합니다. <strong>ReplicaSet</strong> 내부에서 <strong>Pod</strong>이 새로 생성 될때는, <strong>ReplicaSet</strong> 내부의 <strong>PodTemplate</strong>을 이용 합니다.</p>\n<p align=\"center\">\n\t<img src=\"/post_image/just-cloud-computing/06-07.png\" width=\"400px\" />\n\t<p align=\"center\" style=\"color:#888888; font-size: 12px;\">\n\t\tReplicaSet\n\t</p>\n</p>\n<h3>Deployment</h3>\n<p><strong>배포 버전을 관리</strong>하는 오브젝트 입니다. 내부적으로 <strong>ReplicaSet</strong>을 이용하며, 이를 통해 무중단 배포가 가능 하게끔 합니다. 내부 Pod이 변경 될 때, 순간적으로 하나의 <strong>ReplicaSet</strong>을 분리하여 두 개의 <strong>ReplicaSet</strong>을 만듭니다. 하나는 변경 점이 없는, 하나는 업데이트가 된 것으로 분리 합니다.</p>\n<p align=\"center\">\n\t<img src=\"/post_image/just-cloud-computing/06-08.png\" width=\"80%\" />\n\t<p align=\"center\" style=\"color:#888888; font-size: 12px;\">\n\t\tDeployment\n\t</p>\n</p>\n<h3>Service</h3>\n<p>네트워크 또한, 별도의 오브젝트를 이용하여 관리 하는데, 바로 <strong>Service</strong>를 이용하여 관리 합니다.</p>\n<h4>ClusterIP</h4>\n<p><strong>Service</strong> 안에는, <strong>ClusterIP</strong>라는 요소가 있습니다. 이는 <strong>여러 개의 Pod</strong>에 대한 로드 벨런싱 기능도 수행 하며, Pod을 동적으로 추가, 업데이트 및 삭제를 하더라도, <strong>Service</strong>의 IP는 고유한 IP로 고정 이기 때문에, 외부에서 조정을 할 필요가 없습니다.</p>\n<p align=\"center\">\n\t<img src=\"/post_image/just-cloud-computing/06-09.png\" width=\"300px\" />\n\t<p align=\"center\" style=\"color:#888888; font-size: 12px;\">\n\t\tClusterIP\n\t</p>\n</p>\n<p>또한, 클러스터 내부에서는 <strong>Service</strong>의 <strong>ClusterIP</strong>를 통해 접근 합니다.</p>\n<p align=\"center\">\n\t<img src=\"/post_image/just-cloud-computing/06-10.png\" width=\"400px\" />\n\t<p align=\"center\" style=\"color:#888888; font-size: 12px;\">\n\t\t내부 접근\n\t</p>\n</p>\n<p>외부에서의 접근을 위해서 <strong>NodePort</strong>를 활용 합니다. 동일한 기능을 하는 노드가 여러 개라도, 하나의 노드로 취급 합니다.</p>\n<p align=\"center\">\n\t<img src=\"/post_image/just-cloud-computing/06-11.png\" width=\"400px\" />\n\t<p align=\"center\" style=\"color:#888888; font-size: 12px;\">\n\t\tNodePort\n\t</p>\n</p>\n<p>멀리서 그림을 그려보면, 다음과 같을 수 있겠네요.</p>\n<p align=\"center\">\n\t<img src=\"/post_image/just-cloud-computing/06-12.png\" width=\"50%\" />\n\t<p align=\"center\" style=\"color:#888888; font-size: 12px;\">\n\t\tNodePort\n\t</p>\n</p>\n<h2>출처</h2>\n<p><a href=\"https://www.youtube.com/channel/UC-TpdzGorF3igglmjCWQhMA\">초보를 위한 쿠버네티스 안내서 - 44bits Youtube</a></p>","id":"cd7da4d8-8572-5c4a-a63a-ca54a6e7ae8a","frontmatter":{"date":"2021-08-17","path":"/cloud-computing/just-cloud-computing-6","title":"[찍먹 Cloud Computing] 6. Kubernetes","tags":["Cloud-Computing"],"keyword":"Cloud Computing, Kubernetes","summary":"쿠버네티스에 대해서 알아보자.","img":"/post_image/thumbnail/just-cloud-computing-6.jpg","series":"찍먹 Cloud Computing"}}},"pageContext":{"postPath":"/cloud-computing/just-cloud-computing-6","series":{"data":{"allMarkdownRemark":{"edges":[{"node":{"id":"cd7da4d8-8572-5c4a-a63a-ca54a6e7ae8a","excerpt":"Kubernetes 안녕하세요! 오늘은 Kubernetes에 대해서 배워 보는 시간을 가져 보도록 하겠습니다. 일단 Kubernetes에 대해 알아 보기 전에, Container Orchestration에 대해서 먼저 알아 보도록 하겠습니다. Container Orchestration…","frontmatter":{"date":"2021-08-17","tags":["Cloud-Computing"],"path":"/cloud-computing/just-cloud-computing-6","title":"[찍먹 Cloud Computing] 6. Kubernetes","img":"/post_image/thumbnail/just-cloud-computing-6.jpg","summary":"쿠버네티스에 대해서 알아보자."}}},{"node":{"id":"8e00ee8e-daa6-5e77-9590-8afd2fac452f","excerpt":"Docker Basic 안녕하세요? JustKode 입니다. 오늘은 컨테이너 기술을 구현하기 위한 Docker…","frontmatter":{"date":"2021-08-02","tags":["Cloud-Computing"],"path":"/cloud-computing/just-cloud-computing-5","title":"[찍먹 Cloud Computing] 5. Docker Image, Container, Dockerfile","img":"/post_image/thumbnail/just-cloud-computing-5.jpg","summary":"도커의 기본 사용법에 대해서 알아보자."}}},{"node":{"id":"f8d9fa9f-9e7c-5729-affc-4d25286650cf","excerpt":"AWS의 Database 안녕하세요? Justkode 입니다. 이번 시간에는 AWS의 Database에 대해서 공부 해 보는 시간을 가져 보도록 하겠습니다. AWS에서 사용하는 Database는 두 가지가 있습니다. DynamoDB 첫 번째는 DynamoDB 입니다. 이는 AWS의 대표격으로 사용 되는 데이터베이스이며, NoSQL Database 중 하나 입니다. 여기서 NoSQL은 무엇이냐 하면, 말 그대로 표준 SQL…","frontmatter":{"date":"2021-07-27","tags":["Cloud-Computing"],"path":"/cloud-computing/just-cloud-computing-4","title":"[찍먹 Cloud Computing] 4. DynamoDB & Amazon RDS","img":"/post_image/thumbnail/just-cloud-computing-4.jpg","summary":"두 개의 대표적인 AWS DB를 공부 해 보자"}}},{"node":{"id":"5277342e-7dfd-5137-abbe-205b1c6840b3","excerpt":"AWS Lambda 안녕하세요? Justkode 입니다. 이번 시간에는 AWS Lambda에 대해서 알아 보고, AWS Lambda 함수를 생성 해 보고, 이를 AWS API Gateway를 통해 연결 하여 사용 해 보는 시간을 가져 보도록 하겠습니다. AWS Lambda에 대해서 간단하게 설명 하고 넘어 가자면, **PaaS (Platform As A Service)**의 일종으로, 우리가 AWS Lambda에 우리가 구현한 API Code…","frontmatter":{"date":"2021-07-21","tags":["Cloud-Computing"],"path":"/cloud-computing/just-cloud-computing-3","title":"[찍먹 Cloud Computing] 3. AWS Lambda","img":"/post_image/thumbnail/just-cloud-computing-3.jpg","summary":"Python 기반으로 AWS Lambda 함수를 만들어보자."}}},{"node":{"id":"a48ecf72-4353-56d3-9241-9ecded8126bc","excerpt":"AWS S3 안녕하세요? Justkode 입니다. 이번 시간에는 AWS S3에 대해서 알아 보고, AWS S3 버킷 생성, 파일 접근 권한 설정, Python 코드 상에서의 접근을 해 보도록 하겠습니다. 일단 AWS S3에 대해서 간단하게 설명 드리겠습니다. AWS S…","frontmatter":{"date":"2021-07-16","tags":["Cloud-Computing","Python"],"path":"/cloud-computing/just-cloud-computing-2","title":"[찍먹 Cloud Computing] 2. AWS S3","img":"/post_image/thumbnail/just-cloud-computing-2.jpg","summary":"AWS S3와 boto3를 사용 해 보자"}}},{"node":{"id":"a7012347-1d0c-5fb4-b0b3-4c12c091476b","excerpt":"AWS EC2 안녕하세요? Justkode 입니다. 이번 시간에는 AWS EC2에 대해서 알아 보고, AWS EC…","frontmatter":{"date":"2021-07-06","tags":["Cloud-Computing"],"path":"/cloud-computing/just-cloud-computing-1","title":"[찍먹 Cloud Computing] 1. AWS EC2란? / AWS EC2 인스턴스 만들기","img":"/post_image/thumbnail/just-cloud-computing-1.jpg","summary":"AWS EC2 인스턴스를 만들어 보자."}}},{"node":{"id":"52973b6a-a333-5c92-9d63-c920e9381a84","excerpt":"Cloud Computing? 안녕하세요? Justkode 입니다. Cloud Computing…","frontmatter":{"date":"2021-06-25","tags":["Cloud-Computing"],"path":"/cloud-computing/just-cloud-computing-0","title":"[찍먹 Cloud Computing] 0. Orientation","img":"/post_image/thumbnail/just-cloud-computing-0.jpg","summary":"Cloud Computing을 찍먹해 보자."}}}]}}},"categoryPosts":{"data":{"allMarkdownRemark":{"edges":[{"node":{"id":"8ef2f1ec-bc6d-5cbe-923c-ab49bb89e68e","excerpt":"Intro 안녕하세요! JustKode, 박민재입니다. 오늘은 K8S Package Manager인 Helm에 대해 알아 보도록 하겠습니다. 우리는 K8S로 서비스를 서빙하기 위해, k8s yaml 파일을 이용하여, K8S Resource (, , , , ,  등)를 관리 하게 됩니다. 하지만, 우리는 실제 서비스를 운영 하는데 다음과 같은 상황을 마주치게 됩니다. 여러 개의 K8S Resource를 K8S Cluster…","frontmatter":{"date":"2024-03-01","tags":["Cloud-Computing"],"path":"/cloud-computing/what-is-helm","title":"Helm이란 무엇 인가?","img":"/post_image/thumbnail/what-is-helm.png","summary":"K8S의 Package Manager인, Helm에 대해 알아보자."}}},{"node":{"id":"1d3523cc-7eb7-5c50-b2e6-b6f6a29170a6","excerpt":"안녕하세요? 오늘은 Kubernetes의 Resource들에 대해서 알아 보도록 하겠습니다. Pod Generator Pod: Pod은 k8s에서 사용되는 가장 작은 배포 단위로, 하나 이상의 container로 구성 됩니다. Pod 내의 container들은 동일 호스트에서 실행 됩니다. ReplicaSet: Pod의 복제본을 관리하는 k8s 객체이며, 지정된 수의 Pod 복제본이 주어진 시간안에 실행 되게 합니다. Deployment…","frontmatter":{"date":"2023-04-30","tags":["Cloud-Computing"],"path":"/cloud-computing/k8s-resources","title":"Kubernetes Resources 요약","img":"/post_image/thumbnail/k8s-resources.png","summary":"k8s의 리소스들을 요약 해 보자."}}},{"node":{"id":"c1eb4e80-b9af-55ff-b567-d3da1576afab","excerpt":"안녕하세요? 오늘은 Kubernetes를 구동 시키기 위해서 필요한 기본적인 Components들에 대해서 요약해서 알아보는 시간을 가져 보도록 하겠습니다. (글 매우 짧고, 성의 없음 주의) Control Plane Component…","frontmatter":{"date":"2023-04-24","tags":["Cloud-Computing"],"path":"/cloud-computing/k8s-components","title":"Kubernetes Component 요약","img":"/post_image/thumbnail/k8s-components.png","summary":"k8s의 컴포넌트를 초간단 요약 해 보자."}}},{"node":{"id":"28baf728-0bd2-5147-9ef0-b05da0826d77","excerpt":"저번 시간에는 Spark On Kubernetes에 대한 이론을 배웠습니다. 오늘은 Spark On Kubernetes에 대한 실습을 진행 하도록 하겠습니다. 사전 준비 Docker Minikube (Kubernetes 1.20 버전 이상) kubectl Spark 3.0 버전 이상 최신 버전일 수록 좋습니다. 얼마 전에 구형 Docker가 깔려 있는 맥북에서 진행을 해 봤는데 Pod이 생성이 안되더군요.. Pyspark Image Build…","frontmatter":{"date":"2023-03-30","tags":["Data-Engineering","Cloud-Computing"],"path":"/data-engineering/spark-on-k8s-2","title":"Spark on Kubernetes - Practice","img":"/post_image/thumbnail/spark-on-k8s-2.png","summary":"Spark를 Kubernetes Cluster에서 동작 시켜 보자."}}}]}}}}},"staticQueryHashes":["3819017183","63159454"],"slicesMap":{}}