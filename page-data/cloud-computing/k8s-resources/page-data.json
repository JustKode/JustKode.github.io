{"componentChunkName":"component---src-layouts-post-layout-tsx","path":"/cloud-computing/k8s-resources/","result":{"data":{"markdownRemark":{"html":"<p>안녕하세요? 오늘은 <strong>Kubernetes</strong>의 <strong>Resource</strong>들에 대해서 알아 보도록 하겠습니다.</p>\n<p align=\"center\">\n       <img src=\"/post_image/thumbnail/k8s-resources.png\" width=\"70%\"/>\n       <p align=\"center\" style=\"color:#888888; font-size: 12px;\">\n            Kubernetes Resources (출처: https://jayendrapatil.com/kubernetes-components/)\n       </p>\n</p>\n<h3>Pod Generator</h3>\n<ul>\n<li>Pod: Pod은 <strong>k8s</strong>에서 사용되는 <strong>가장 작은 배포 단위</strong>로, 하나 이상의 container로 구성 됩니다. <strong>Pod</strong> 내의 <strong>container</strong>들은 <strong>동일 호스트</strong>에서 실행 됩니다.</li>\n<li>ReplicaSet: <strong>Pod</strong>의 <strong>복제본을 관리</strong>하는 k8s 객체이며, <strong>지정된 수의 Pod 복제본이 주어진 시간안에 실행</strong> 되게 합니다.</li>\n<li>Deployment: <strong>Application을 배포 및 업데이트</strong>하기 위해 사용되며, <strong>ReplicaSet</strong>을 관리 하면서, 업그레이드 및 롤백과 같은 <strong>배포 전략을 구현</strong> 합니다. <strong>Pod</strong>과 <strong>ReplicaSet</strong>에 대한 <strong>선언적 업데이트</strong>가 가능하게 한다고 생각 하면 됩니다.</li>\n<li>Daemonset: <strong>각 노드</strong> 또는 <strong>특정 노드</strong>에서 Pod을 실행 하도록 합니다. 노드 단위로 실행 되어야 하는 어플리케이션이 있을 때 사용 됩니다.</li>\n<li>Job: <strong>k8s</strong>에서 일회성 작업을 수행 하기 위한 객체이며, 이를 위해 Pod을 생성 합니다.</li>\n<li>CronJob: 클러스터 내에서 <strong>일정한 간격으로 실행되는 작업을 관리</strong>하는 k8s 객체 입니다. linux의 <strong>cron</strong>과 유사 합니다.</li>\n<li>StatefulSet: <strong>고유한 식별자</strong>와 <strong>네트워크 식별자</strong>를 Pod이 재시작이 되더라도 <strong>일관</strong>되게 가질 수 있게 끔 관리하는 Kubernetes 객체 입니다. DB, Message Broker 같이 <strong>고유한 이름과 상태</strong>를 가지는 어플리케이션을 관리 할 때 유용 합니다.</li>\n<li>HorizontalPodAutoscaler: 클러스터 내에서 Pod을 <strong>자동</strong>으로 <strong>확장하거나 축소</strong>하는 Kubernetes 객체입니다. 트래픽이 많아지면 <strong>Pod을 증가</strong> 시키고, <strong>적어지면 감소</strong> 하는 식으로 이용 가능합니다.</li>\n</ul>\n<h3>Configuration</h3>\n<ul>\n<li>ConfigMap: <strong>ConfigMap</strong>은 설정 데이터를 저장하는 k8s 객체입니다. <strong>어플리케이션을 구동 할 때 필요한</strong>, 환경 변수, 명령 줄 인수 등을 저장하는 역할을 수행 합니다.</li>\n<li>Secret: 암호화된 데이터를 저장하는 k8s 객체로, <strong>ConfigMap과 유사</strong>하지만, 데이터를 <strong>암호화 하여 저장</strong>합니다.</li>\n</ul>\n<h3>Storage</h3>\n<ul>\n<li>PersistentVolume: Admin에 의해 제공되는 Storage Resource로, 클러스터 내의 <strong>물리적 스토리지 자원을 추상화</strong>하여, 스토리지를 사용하는 애플리케이션과 분리 시켜서 관리 합니다.</li>\n<li>PersistentVolumeClaim: <strong>PersistentVolumeClaim</strong>은 <strong>PersistentVolume을 요청</strong>하는 Kubernetes 객체입니다. 즉, 애플리케이션이 사용할 수 있는 <strong>스토리지를 동적으로 할당</strong>하기 위해 PersistentVolumeClaim을 사용합니다.</li>\n<li>StorageClass: <strong>PersistentVolume</strong>을 동적으로 프로비저닝하기 위해 사용하며, 스토리지 클래스 이름, 프로비저너, 볼륨 바인딩 모드, 파라미터 등을 가지고 있습니다.</li>\n</ul>\n<h3>Network / exposition</h3>\n<ul>\n<li>Ingress: 클러스터 외부에서 내부 서비스에 대한 <strong>HTTP(S) 라우팅</strong>을 가능하게 해 줍니다. 여러 가지 인그레스 컨트롤러를 사용하여 구현될 수 있으며, 예로 <strong>Nginx, Traefik, Istio</strong> 등의 컨트롤러가 있습니다.</li>\n<li>Service: 동일한 애플리케이션을 실행하는 Pod 집합에 대해서, <strong>네트워크 엔드포인트를 제공</strong>합니다. Service는 클러스터 내부에서 Pod을 찾아, <strong>요청을 해당 Pod에 전달</strong>하여 로드 밸런싱을 수행합니다.</li>\n<li>Endpoint: Pod의 IP 주소와 포트 번호를 나타내는 개체이며, <strong>Service와 함께 사용</strong> 됩니다.</li>\n<li>NetworkPolicy: <strong>네트워크 트래픽을 제어</strong>하기 위해 사용하며, 라벨 셀렉터를 사용하여 <strong>Pod 단위</strong>, 또는 <strong>Namespace</strong>에 적용될 수 있습니다.</li>\n</ul>\n<h3>RBAC (IAM)</h3>\n<ul>\n<li>Service Account: Pod 또는 Container가 클러스터 리소스에 접근할 때 사용 하는 <strong>인증 정보</strong> 입니다. 각 Pod에 대해서 기본 Service Account가 제공 됩니다.</li>\n<li>User: k8s에 로그인 하고, <strong>리소스에 액세스</strong> 하기 위한 사용자 계정을 의미 합니다. 접근 권한 관리, RBAC 부여, 인증 등을 수행 할 수 있습니다.</li>\n<li>Group: <strong>User</strong> 혹은 <strong>Service Account</strong>의 <strong>집합</strong>입니다.</li>\n<li>Role: 클러스터 내에서 리소스에 대한 작업을 수행할 수 있는 권한을 지정하는 <strong>권한 부여 규칙</strong>을 나타냅니다. <strong>Namespace</strong> 단위로 작동 합니다.</li>\n<li>ClusterRole: <strong>Role</strong>과 비슷하지만, <strong>Cluster</strong> 단위로 작동 합니다.</li>\n<li>ClusterRoleBinding: Role / ClusterRole에 정의된 권한을 <strong>User 또는 User 집합에 부여</strong>하는 역할을 합니다.</li>\n</ul>\n<h3>Resource Management</h3>\n<ul>\n<li>LimitRange: <strong>Namespace</strong>의 <strong>각 리소스 종류</strong>에 대해, <strong>리소스 사용 제한</strong>을 설정 합니다.</li>\n<li>Quota: <strong>Namespace</strong>당 적용되는 <strong>총 할당량 제한</strong>을 설정합니다.</li>\n</ul>","id":"f2c9a587-fb7c-5963-8398-3ad7356ae23d","frontmatter":{"date":"2023-04-30","path":"/cloud-computing/k8s-resources","title":"Kubernetes Resources 요약","tags":["Cloud-Computing"],"keyword":"Kubernetes, k8s, Resources","summary":"k8s의 리소스들을 요약 해 보자.","img":"/post_image/thumbnail/k8s-resources.png","series":null}}},"pageContext":{"postPath":"/cloud-computing/k8s-resources","series":{"data":{"allMarkdownRemark":{"edges":[]}}},"categoryPosts":{"data":{"allMarkdownRemark":{"edges":[{"node":{"id":"91df27ea-39c5-50a2-8365-cab69a8a38a0","excerpt":"Intro 안녕하세요! JustKode, 박민재입니다. 오늘은 K8S Package Manager인 Helm에 대해 알아 보도록 하겠습니다. 우리는 K8S로 서비스를 서빙하기 위해, k8s yaml 파일을 이용하여, K8S Resource (, , , , ,  등)를 관리 하게 됩니다. 하지만, 우리는 실제 서비스를 운영 하는데 다음과 같은 상황을 마주치게 됩니다. 여러 개의 K8S Resource를 K8S Cluster…","frontmatter":{"date":"2024-03-01","tags":["Cloud-Computing"],"path":"/cloud-computing/what-is-helm","title":"Helm이란 무엇 인가?","img":"/post_image/thumbnail/what-is-helm.png","summary":"K8S의 Package Manager인, Helm에 대해 알아보자."}}},{"node":{"id":"f2c9a587-fb7c-5963-8398-3ad7356ae23d","excerpt":"안녕하세요? 오늘은 Kubernetes의 Resource들에 대해서 알아 보도록 하겠습니다. Pod Generator Pod: Pod은 k8s에서 사용되는 가장 작은 배포 단위로, 하나 이상의 container로 구성 됩니다. Pod 내의 container들은 동일 호스트에서 실행 됩니다. ReplicaSet: Pod의 복제본을 관리하는 k8s 객체이며, 지정된 수의 Pod 복제본이 주어진 시간안에 실행 되게 합니다. Deployment…","frontmatter":{"date":"2023-04-30","tags":["Cloud-Computing"],"path":"/cloud-computing/k8s-resources","title":"Kubernetes Resources 요약","img":"/post_image/thumbnail/k8s-resources.png","summary":"k8s의 리소스들을 요약 해 보자."}}},{"node":{"id":"f55c467d-2b09-54d6-bc08-b0b08f536b86","excerpt":"안녕하세요? 오늘은 Kubernetes를 구동 시키기 위해서 필요한 기본적인 Components들에 대해서 요약해서 알아보는 시간을 가져 보도록 하겠습니다. (글 매우 짧고, 성의 없음 주의) Control Plane Component…","frontmatter":{"date":"2023-04-24","tags":["Cloud-Computing"],"path":"/cloud-computing/k8s-components","title":"Kubernetes Component 요약","img":"/post_image/thumbnail/k8s-components.png","summary":"k8s의 컴포넌트를 초간단 요약 해 보자."}}},{"node":{"id":"7611f6af-dc48-595b-8866-23beee4d5cda","excerpt":"저번 시간에는 Spark On Kubernetes에 대한 이론을 배웠습니다. 오늘은 Spark On Kubernetes에 대한 실습을 진행 하도록 하겠습니다. 사전 준비 Docker Minikube (Kubernetes 1.20 버전 이상) kubectl Spark 3.0 버전 이상 최신 버전일 수록 좋습니다. 얼마 전에 구형 Docker가 깔려 있는 맥북에서 진행을 해 봤는데 Pod이 생성이 안되더군요.. Pyspark Image Build…","frontmatter":{"date":"2023-03-30","tags":["Data-Engineering","Cloud-Computing"],"path":"/data-engineering/spark-on-k8s-2","title":"Spark on Kubernetes - Practice","img":"/post_image/thumbnail/spark-on-k8s-2.png","summary":"Spark를 Kubernetes Cluster에서 동작 시켜 보자."}}}]}}}}},"staticQueryHashes":["3819017183","63159454"],"slicesMap":{}}