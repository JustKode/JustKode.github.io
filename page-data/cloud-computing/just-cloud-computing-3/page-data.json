{"componentChunkName":"component---src-layouts-post-layout-tsx","path":"/cloud-computing/just-cloud-computing-3/","result":{"data":{"markdownRemark":{"html":"<h2>AWS Lambda</h2>\n<p>안녕하세요? <strong>Justkode</strong> 입니다. 이번 시간에는 <strong>AWS Lambda</strong>에 대해서 알아 보고, <strong>AWS Lambda 함수</strong>를 생성 해 보고, 이를 <strong>AWS API Gateway</strong>를 통해 연결 하여 사용 해 보는 시간을 가져 보도록 하겠습니다.</p>\n<p><strong>AWS Lambda</strong>에 대해서 간단하게 설명 하고 넘어 가자면, **PaaS (Platform As A Service)**의 일종으로, 우리가 <strong>AWS Lambda</strong>에 우리가 구현한 <strong>API Code</strong>를 등록 하고, <strong>이에 대한 컴퓨팅 비용을 사용한 만큼만 지불</strong> 하는 서비스 입니다.</p>\n<p>우리가 따로 <strong>운영체제, 런타임</strong> 등의 관리를 할 필요 없이 사용자가 <strong>Python, Node.js</strong> 등의 언어로 만들어진 <strong>Lambda Handler Function</strong>을 구현 하여 이를 <strong>AWS Lambda</strong>에 등록하고, 이를 <strong>AWS API Gateway</strong>에 연결 하면, 외부에서 해당 <strong>API</strong>를 이용 할 수 있습니다.</p>\n<p align=\"center\">\n\t<img src=\"/post_image/just-cloud-computing/03-01.png\" width=\"30%\"/>\n    <p align=\"center\" style=\"color:#888888; font-size: 12px;\">\n\t\tAWS Lambda\n\t</p>\n</p>\n<h2>Lambda 함수 일단 만들기</h2>\n<p>먼저, 사용 하기 전에, 일단 <strong>Lambda 함수</strong>를 만들어 보는 시간을 가져 보도록 하겠습니다. <a href=\"https://ap-northeast-2.console.aws.amazon.com/lambda/home?region=ap-northeast-2#/discover\">AWS Lambda Console</a>에 먼저 접속을 해 주세요. 그 다음, 우측 상단에 있는 <strong>함수 생성</strong>을 클릭 해 주세요.</p>\n<p align=\"center\">\n\t<img src=\"/post_image/just-cloud-computing/03-02.png\" width=\"70%\"/>\n    <p align=\"center\" style=\"color:#888888; font-size: 12px;\">\n\t\tAWS Lambda Console 접속 화면\n\t</p>\n</p>\n<p>그러면, 이렇게 함수를 생성 하는 창으로 이동하게 됩니다. 첫 번째로, <strong>Lambda Handler</strong>의 이름을 지정 해 보겠습니다. <strong>함수 이름</strong>에 원하는 함수명을 입력 하고, 원하는 **런타임(언어)**를 선택 해 줍니다.</p>\n<p align=\"center\">\n\t<img src=\"/post_image/just-cloud-computing/03-03.png\" width=\"70%\"/>\n    <p align=\"center\" style=\"color:#888888; font-size: 12px;\">\n\t\t함수 생성 화면\n\t</p>\n</p>\n<p>그 밑에는 함수에 대한 <strong>접근 권한 (VPC)</strong>, <strong>코드 서명</strong>을 설정 할 수 있습니다. 이 강의에서는 다루지 않습니다. 세팅이 완료 되셨다면, 우측 하단의 <strong>함수 생성</strong>을 클릭 하시면 됩니다.</p>\n<p align=\"center\">\n\t<img src=\"/post_image/just-cloud-computing/03-04.png\" width=\"70%\"/>\n    <p align=\"center\" style=\"color:#888888; font-size: 12px;\">\n\t\t함수 생성 화면\n\t</p>\n</p>\n<p>이렇게 함수가 생성된 것을 확인 할 수 있습니다. 그럼 한 번, 스크롤을 내려서 코드를 입력 하는 곳을 확인 해 볼까요?</p>\n<p align=\"center\">\n\t<img src=\"/post_image/just-cloud-computing/03-05.png\" width=\"70%\"/>\n    <p align=\"center\" style=\"color:#888888; font-size: 12px;\">\n\t\t함수 생성 완료\n\t</p>\n</p>\n<p>다음과 같이 코드를 입력 할 수 있는 창이 있는 것을 확인 할 수 있습니다. 여기서 왜 <code class=\"language-text\">lambda_handler</code> 같은 함수가 나왔는지, <strong>엔트리 함수</strong>는 무엇인지 궁금 해 하실 수 있습니다. 한 번 더 스크롤을 내려 볼까요?</p>\n<p align=\"center\">\n\t<img src=\"/post_image/just-cloud-computing/03-06.png\" width=\"70%\"/>\n    <p align=\"center\" style=\"color:#888888; font-size: 12px;\">\n\t\t코드 입력\n\t</p>\n</p>\n<p>그럼 다음과 같은 정보들을 확인 할 수 있는데요, 여기서 <strong>런타임 설정 - 핸들러</strong>를 확인 하시게 되면, <strong>엔트리 함수</strong>가 무엇인지 확인 할 수 있습니다. 일단 다시 돌아가서 <strong>엔트리 (혹은 핸들러) 함수</strong>에 대한 코드 분석을 해 보도록 하겠습니다.</p>\n<p align=\"center\">\n\t<img src=\"/post_image/just-cloud-computing/03-07.png\" width=\"70%\"/>\n    <p align=\"center\" style=\"color:#888888; font-size: 12px;\">\n\t\t코드 입력\n\t</p>\n</p>\n<p><strong>핸들러 함수</strong>는 다음과 같은 파라미터를 갖습니다.</p>\n<ul>\n<li><code class=\"language-text\">event</code>: <strong>이벤트와 관련한 정보</strong>를 담고 있습니다. <code class=\"language-text\">event</code> 객체를 통해서, json형식으로 온 body에 접근 할 수 있습니다. 이 객체는 일반적으로 Python <code class=\"language-text\">dict</code> 유형입니다. 또한 <code class=\"language-text\">list</code>, <code class=\"language-text\">str</code>, <code class=\"language-text\">int</code>, <code class=\"language-text\">float</code> 또는 <code class=\"language-text\">NoneType</code> 유형이 될 수 있습니다.</li>\n</ul>\n<p>추가로, 이 예제에서는 <strong>Lambda Proxy</strong>를 사용 합니다. <del><em><strong>(여담: 이 Post 쓰면서 이 친구 때문에 하루 삽질함 ^^, 제발 AWS 형님들 도큐먼트좀 이쁘게 써주세요. 검색하면 최상단에 나오게 했으면서 가독성이 진짜 쓰레기야. 우리 한테 \"???: 야, 이래도 써? 징하다 징해\" 하는 것도 아니고 어?)</strong></em></del></p>\n<p><strong>Lambda Proxy</strong>를 사용 하면, <strong>Event</strong> 객체로 들어오는 데이터는 매~우 많습니다. 대충 어떤 값이 나오는지는 <strong>Test 옆 ▼ 버튼 - Configure test event</strong>를 눌러 주세요, 그 다음, <strong>테스트 이벤트 구성 - 이벤트 템플릿 - Amazon API Gateway AWS Proxy</strong>를 클릭 해보면 다음과 같이 파라미터를 확인 해 볼 수 있습니다.</p>\n<ul>\n<li><code class=\"language-text\">body</code>: Body로 들어온 String 값 입니다.</li>\n<li><code class=\"language-text\">httpMethod</code>: 어떤 <strong>HTTP Method</strong> 를 사용 하여 요청하였는지에 대한 정보를 담고 있습니다.</li>\n<li><code class=\"language-text\">isBase64Encoded</code>: Base64로 인코딩 되었는지 알려 줍니다.</li>\n<li><code class=\"language-text\">queryStringParameters</code>: <strong>Query String</strong>을 파싱하여 어떤 파라미터가 들어 왔는지 알려 줍니다.</li>\n<li><code class=\"language-text\">multiValueQueryStringParameters</code>: <strong>Query String</strong>을 파싱하여 어떤 파라미터가 들어 왔는지 알려 줍니다. 중복된 키를 가진, 여러 가지 Value에 대해서도 출력합니다.</li>\n<li><code class=\"language-text\">headers</code>: <strong>HTTP Header</strong> 정보를 알려 줍니다.</li>\n<li><code class=\"language-text\">multiValueHeaders</code>: <strong>HTTP Header</strong> 정보를 알려 줍니다. 중복된 키를 가진, 여러 가지 Value에 대해서도 출력합니다.</li>\n</ul>\n<p align=\"center\">\n\t<img src=\"/post_image/just-cloud-computing/03-08.png\" width=\"50%\"/>\n    <p align=\"center\" style=\"color:#888888; font-size: 12px;\">\n\t\t클릭 해 보면,\n\t</p>\n</p>\n<p align=\"center\">\n\t<img src=\"/post_image/just-cloud-computing/03-09.png\" width=\"50%\"/>\n    <p align=\"center\" style=\"color:#888888; font-size: 12px;\">\n\t\t엄청 많음.\n\t</p>\n</p>\n<ul>\n<li><code class=\"language-text\">context</code>: <a href=\"https://docs.aws.amazon.com/ko_kr/lambda/latest/dg/python-context.html\">컨텍스트 정보</a>를 담고 있습니다. 이 객체는 호출, 함수 및 런타임 환경에 관한 정보를 제공하는 메서드 및 속성들을 제공합니다.</li>\n</ul>\n<h3>Code Implement</h3>\n<p>한 번, 간단한 계산 연산을 해 주는 코드를 구현 해 볼까요? 아래에 있는 코드는, 연산자, 피연산자 정보를 가지고 있는 해당 <code class=\"language-text\">json</code>을 <code class=\"language-text\">body</code>로 입력 받아, 계산 명령을 실행 하는 코드입니다. 일단 <strong>새로운 테스트 이벤트 생성</strong>을 클릭 후 <strong>테스트 이벤트 구성 - 이벤트 템플릿 - Amazon API Gateway AWS Proxy</strong>를 선택하여 템플릿을 가져온 다음, <strong>Event Json</strong>을 복사해서 넣어 주세요. 다음, 이벤트 이름을 <strong>add</strong> 라고 한 후에 저장 해 주세요.</p>\n<ul>\n<li>Event json</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"body\"</span><span class=\"token operator\">:</span> <span class=\"token null keyword\">null</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"resource\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/{proxy+}\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"path\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/path/to/resource\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"httpMethod\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"GET\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"isBase64Encoded\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"queryStringParameters\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"a\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"b\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"operator\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"+\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"multiValueQueryStringParameters\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"a\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token string\">\"1\"</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"b\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token string\">\"2\"</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"operator\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token string\">\"+\"</span>\n    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  ...\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p align=\"center\">\n\t<img src=\"/post_image/just-cloud-computing/03-10.png\" width=\"80%\"/>\n    <p align=\"center\" style=\"color:#888888; font-size: 12px;\">\n\t\t다음과 같이 넣어 주세요.\n\t</p>\n</p>\n<p>한 번 코드를 구현 해 보겠습니다. 방금 저장한 테스트 이벤트에 작성한 json 객체가 그대로 <code class=\"language-text\">lambda_handler</code>의 <code class=\"language-text\">event</code> 파라미터로 들어 갑니다. 이를 알아 두고 코딩을 하면 되겠습니다.</p>\n<p>또한, <strong>Lambda 프록시 통합</strong> 옵션을 나중에 사용하는 <strong>API Gateway</strong>에서 사용하게 된다면, <code class=\"language-text\">lambda_handler</code>는 다음과 같은 반환 형식을 유지 하여야 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"isBase64Encoded\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"boolean\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"statusCode\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"number\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"headers\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> ... <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"body\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"JSON string\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>자, 이에 맞게 한 번 프로그래밍 해 볼까요? <code class=\"language-text\">a</code>와 <code class=\"language-text\">b</code>로 들어 온 값에 대해 <code class=\"language-text\">operator</code> 연산자에 해당하는 연산을 하는 API를 만들어 보도록 하겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> json\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">lambda_handler</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># Key Check</span>\n    param <span class=\"token operator\">=</span> event<span class=\"token punctuation\">[</span><span class=\"token string\">'queryStringParameters'</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>param<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>e <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> param <span class=\"token keyword\">for</span> e <span class=\"token keyword\">in</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'operator'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token string\">'statusCode'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">400</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">'body'</span><span class=\"token punctuation\">:</span> json<span class=\"token punctuation\">.</span>dumps<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"message\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"key error\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n        \n    operator <span class=\"token operator\">=</span> param<span class=\"token punctuation\">[</span><span class=\"token string\">'operator'</span><span class=\"token punctuation\">]</span>\n    \n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n        a <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>param<span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        b <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>param<span class=\"token punctuation\">[</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">except</span> Exception<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token string\">'statusCode'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">400</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">'body'</span><span class=\"token punctuation\">:</span> json<span class=\"token punctuation\">.</span>dumps<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n                <span class=\"token string\">\"message\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"value error\"</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">if</span> operator <span class=\"token operator\">==</span> <span class=\"token string\">'+'</span> <span class=\"token keyword\">or</span> operator <span class=\"token operator\">==</span> <span class=\"token string\">' '</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># query string에서 +는 띄어쓰기로 변환됨</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token string\">'statusCode'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">'body'</span><span class=\"token punctuation\">:</span> json<span class=\"token punctuation\">.</span>dumps<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n                <span class=\"token string\">\"result\"</span><span class=\"token punctuation\">:</span> a <span class=\"token operator\">+</span> b\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">elif</span> operator <span class=\"token operator\">==</span> <span class=\"token string\">'-'</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token string\">'statusCode'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">'body'</span><span class=\"token punctuation\">:</span> json<span class=\"token punctuation\">.</span>dumps<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n                <span class=\"token string\">\"result\"</span><span class=\"token punctuation\">:</span> a <span class=\"token operator\">-</span> b\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">elif</span> operator <span class=\"token operator\">==</span> <span class=\"token string\">'/'</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token string\">'statusCode'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">'body'</span><span class=\"token punctuation\">:</span> json<span class=\"token punctuation\">.</span>dumps<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n                <span class=\"token string\">\"result\"</span><span class=\"token punctuation\">:</span> a <span class=\"token operator\">/</span> b\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">elif</span> operator <span class=\"token operator\">==</span> <span class=\"token string\">'*'</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token string\">'statusCode'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">'body'</span><span class=\"token punctuation\">:</span> json<span class=\"token punctuation\">.</span>dumps<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n                <span class=\"token string\">\"result\"</span><span class=\"token punctuation\">:</span> a <span class=\"token operator\">*</span> b\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token string\">'statusCode'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">400</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">'body'</span><span class=\"token punctuation\">:</span> json<span class=\"token punctuation\">.</span>dumps<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"message\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"operator error\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span></code></pre></div>\n<p>코드를 완성 했다면, 이제 저장을 하고 배포를 할 시간 입니다. <strong>Ctrl + S</strong> 입력 후, <strong>Deploy</strong>를 클릭 해 줍니다. 그러면, <strong>Changes deployed</strong> 가 뜨면 성공입니다!</p>\n<p align=\"center\">\n\t<img src=\"/post_image/just-cloud-computing/03-11.png\" width=\"80%\"/>\n    <p align=\"center\" style=\"color:#888888; font-size: 12px;\">\n\t\tTest 옆 Deploy 클릭\n\t</p>\n</p>\n<p>그 다음, 우리가 만든 함수를 테스트 해봐야죠! <strong>Test</strong>를 누르면, 다음과 같이 결과가 나오게 됩니다.</p>\n<p align=\"center\">\n\t<img src=\"/post_image/just-cloud-computing/03-12.png\" width=\"80%\"/>\n    <p align=\"center\" style=\"color:#888888; font-size: 12px;\">\n\t\tTest 결과\n\t</p>\n</p>\n<p><strong>Test</strong>를 누른 후, <strong>모니터링 - 로그</strong>를 클릭하면, <strong>Lambda 함수</strong>를 실행 하면서 출력된 <strong>로그</strong>들을 열람 할 수 있습니다.</p>\n<p align=\"center\">\n\t<img src=\"/post_image/just-cloud-computing/03-17.png\" width=\"80%\"/>\n    <p align=\"center\" style=\"color:#888888; font-size: 12px;\">\n\t\t최근의 LogStream을 확인 해 보면, 이렇게 print로 출력 했던 파라미터들을 확인 할 수 있다.\n\t</p>\n</p>\n<h2>API Gateway</h2>\n<p>다음은 <a href=\"https://ap-northeast-2.console.aws.amazon.com/apigateway/home?region=ap-northeast-2#\">API Gateway Console</a>로 이동 합니다. 우리가 만든 <strong>AWS Lambda</strong> 함수를 <strong>API Gateway</strong>에 등록 하기 위해서 입니다. 일단 스크롤을 좀 내려서, <strong>REST API - 구축</strong>을 클릭 해 보죠.</p>\n<p align=\"center\">\n\t<img src=\"/post_image/just-cloud-computing/03-13.png\" width=\"50%\"/>\n  <p align=\"center\" style=\"color:#888888; font-size: 12px;\">\n\t\tREST API - 구축 클릭\n\t</p>\n</p>\n<p>그 다음, 프로토콜 선택에서는 <strong>REST</strong>, 새 API 생성 에서는 <strong>새 API</strong>, 설정에서는 <strong>API 이름</strong>을 입력 해 주고, 설명이 필요하다면, 설명도 작성 합니다. 다 입력 하셨다면, <strong>API 생성</strong>을 클릭 합니다.</p>\n<p align=\"center\">\n\t<img src=\"/post_image/just-cloud-computing/03-14.png\" width=\"90%\"/>\n  <p align=\"center\" style=\"color:#888888; font-size: 12px;\">\n\t\tREST API - 구축 클릭\n\t</p>\n</p>\n<p>그러면, 이제 우리가 만든 API와 관련한 대시보드가 나오게 됩니다. 일단 좌측의 메뉴에서 <strong>API - 리소스</strong>를 클릭하고, <strong>리소스 - 작업 - 리소스 생성</strong>을 클릭 합니다. <strong>하위 리소스</strong>를 설정 해야 하기 때문이죠. <strong>하위 리소스</strong>를 분리 하여 생성 함으로써, 우리는 <strong>하나의 API에 대해 여러 가지 함수</strong>를 붙여 넣을 수 있습니다. <strong>비슷한 기능을 하는 함수끼리 묶을 수가 있다는 뜻이죠.</strong> (ex: /user/login (로그인), /user/modify (유저 정보 수정 등))</p>\n<p align=\"center\">\n\t<img src=\"/post_image/just-cloud-computing/03-15.png\" width=\"50%\"/>\n  <p align=\"center\" style=\"color:#888888; font-size: 12px;\">\n\t\t리소스 - 작업 - 리소스 생성 클릭\n\t</p>\n</p>\n<p>그 다음에는 우측에 새 하위 리소스를 생성하는 창이 뜨게 됩니다. <strong>리소스 이름</strong>과 <strong>리소스 경로</strong>를 입력 해 주고, <strong>CORS</strong> 옵션이 필요 하다면, <strong>API Gateway CORS 활성화</strong>도 체크 해 줍니다. 여기서 <strong>리소스 경로</strong>는 등록 할 <strong>API</strong>의 경로를 입력 해 주시면 됩니다.</p>\n<p align=\"center\">\n\t<img src=\"/post_image/just-cloud-computing/03-16.png\" width=\"90%\"/>\n  <p align=\"center\" style=\"color:#888888; font-size: 12px;\">\n\t\t다 완료하면 리소스 생성 클릭\n\t</p>\n</p>\n<p>그 다음, 우리가 만든 함수를 등록 할 차례 입니다. <strong>리소스 - 작업 - 메서드 생성</strong>을 클릭 해 주세요. 타입은 <strong>ANY</strong>를 선택 해 줍니다. 우리는 <strong>AWS Lambda Proxy</strong>를 사용 하기 때문에, <strong>HTTP Method</strong> 정보를 가져 올 수 있기 때문이죠.</p>\n<p align=\"center\">\n\t<img src=\"/post_image/just-cloud-computing/03-18.png\" width=\"50%\"/>\n  <p align=\"center\" style=\"color:#888888; font-size: 12px;\">\n\t\t리소스 - 작업 - 메서드 생성 클릭\n\t</p>\n</p>\n<p align=\"center\">\n\t<img src=\"/post_image/just-cloud-computing/03-19.png\" width=\"30%\"/>\n  <p align=\"center\" style=\"color:#888888; font-size: 12px;\">\n\t\tANY 클릭후 옆에 체크 무늬 클릭\n\t</p>\n</p>\n<p>그러면 이렇게 메서드를 설정하는 창이 뜨게 되는데요. <strong>통합 유형 - Lambda 함수</strong>를 선택 해 주시고, <strong>Lambda 프록시 통합 사용 - 체크</strong>, Lambda 함수는 방금 만드신 <strong>AWS Lambda 함수의 이름</strong>을 입력 해 주세요, 리전에 맞게 하시면 됩니다.</p>\n<p align=\"center\">\n\t<img src=\"/post_image/just-cloud-computing/03-20.png\" width=\"90%\"/>\n  <p align=\"center\" style=\"color:#888888; font-size: 12px;\">\n\t\t다음과 같이 설정 하시고, 저장\n\t</p>\n</p>\n<p>마지막으로, 이렇게 우리가 만든 <strong>API</strong>를 <strong>스테이지</strong>에 올려 실제로 배포 할 시간입니다. <strong>리소스 - 작업 - API 배포</strong>를 클릭 해 주세요.</p>\n<p align=\"center\">\n\t<img src=\"/post_image/just-cloud-computing/03-21.png\" width=\"90%\"/>\n  <p align=\"center\" style=\"color:#888888; font-size: 12px;\">\n\t\t리소스 - 작업 - API 배포 클릭\n\t</p>\n</p>\n<p>그럼 배포할 스테이지를 선택하라는 창이 뜹니다. 그러면 **배포 스테이지 - [새 스테이지]**를 클릭, 스테이지 이름을 입력 합니다. 그 다음, 스테이지 설명 및 배포 설명을 기호에 맞게 작성 후, 저장을 눌러 주세요.</p>\n<p align=\"center\">\n\t<img src=\"/post_image/just-cloud-computing/03-22.png\" width=\"50%\"/>\n  <p align=\"center\" style=\"color:#888888; font-size: 12px;\">\n\t\t입력 후 저장\n\t</p>\n</p>\n<p>자! 그러면 이렇게 우리가 만든 API를 스테이지에 등록 완료 하였습니다. 위에 있는 <strong>URL 호출</strong>에 있는 엔드포인트를 복사 하여 한번 테스트 해 보겠습니다.</p>\n<p align=\"center\">\n\t<img src=\"/post_image/just-cloud-computing/03-23.png\" width=\"90%\"/>\n  <p align=\"center\" style=\"color:#888888; font-size: 12px;\">\n\t\t입력 후 저장\n\t</p>\n</p>\n<p>성공적으로 작동 되는 것을 볼 수가 있습니다!</p>\n<p align=\"center\">\n\t<img src=\"/post_image/just-cloud-computing/03-24.png\" width=\"45%\"/>\n  <img src=\"/post_image/just-cloud-computing/03-25.png\" width=\"45%\"/>\n  <p align=\"center\" style=\"color:#888888; font-size: 12px;\">\n\t\t반환도 잘 되고, Status Code도 잘 적용 되는 모습.\n\t</p>\n</p>\n<h2>마치며</h2>\n<p>이렇게 <strong>AWS Lambda</strong>를 사용해 보는 시간을 가져 보았습니다. 이 글에서는 다루지 않았지만, <strong>트리거</strong> 기능을 이용하여, S3 이미지가 들어오면 자동으로 이미지 리사이징을 해 주는 등의 기능 또한 있으니, <strong>트리거</strong>에 대해서 따로 공부 해 보시는 것도 추천드립니다! 다음 시간에는 <strong>AWS RDS, AWS DynamoDB</strong>에 대해서 공부 해 보는 시간을 가져 보도록 하겠습니다.</p>","id":"ac18d925-067a-5f23-a7bb-b00fd02c6b60","frontmatter":{"date":"2021-07-21","path":"/cloud-computing/just-cloud-computing-3","title":"[찍먹 Cloud Computing] 3. AWS Lambda","tags":["Cloud-Computing"],"keyword":"Cloud Computing, AWS, Lambda, AWS Lambda, aws lambda python, aws lambda python example","summary":"Python 기반으로 AWS Lambda 함수를 만들어보자.","img":"/post_image/thumbnail/just-cloud-computing-3.jpg","series":"찍먹 Cloud Computing"}}},"pageContext":{"postPath":"/cloud-computing/just-cloud-computing-3","series":{"data":{"allMarkdownRemark":{"edges":[{"node":{"id":"caefa963-6e15-52e9-9517-f7f21f7f83be","excerpt":"Kubernetes 안녕하세요! 오늘은 Kubernetes에 대해서 배워 보는 시간을 가져 보도록 하겠습니다. 일단 Kubernetes에 대해 알아 보기 전에, Container Orchestration에 대해서 먼저 알아 보도록 하겠습니다. Container Orchestration…","frontmatter":{"date":"2021-08-17","tags":["Cloud-Computing"],"path":"/cloud-computing/just-cloud-computing-6","title":"[찍먹 Cloud Computing] 6. Kubernetes","img":"/post_image/thumbnail/just-cloud-computing-6.jpg","summary":"쿠버네티스에 대해서 알아보자."}}},{"node":{"id":"4eaf7068-4945-5c51-8c8c-5824b4322d91","excerpt":"Docker Basic 안녕하세요? JustKode 입니다. 오늘은 컨테이너 기술을 구현하기 위한 Docker…","frontmatter":{"date":"2021-08-02","tags":["Cloud-Computing"],"path":"/cloud-computing/just-cloud-computing-5","title":"[찍먹 Cloud Computing] 5. Docker Image, Container, Dockerfile","img":"/post_image/thumbnail/just-cloud-computing-5.jpg","summary":"도커의 기본 사용법에 대해서 알아보자."}}},{"node":{"id":"e2205b1b-8c97-5e6f-be7e-095f386a1379","excerpt":"AWS의 Database 안녕하세요? Justkode 입니다. 이번 시간에는 AWS의 Database에 대해서 공부 해 보는 시간을 가져 보도록 하겠습니다. AWS에서 사용하는 Database는 두 가지가 있습니다. DynamoDB 첫 번째는 DynamoDB 입니다. 이는 AWS의 대표격으로 사용 되는 데이터베이스이며, NoSQL Database 중 하나 입니다. 여기서 NoSQL은 무엇이냐 하면, 말 그대로 표준 SQL…","frontmatter":{"date":"2021-07-27","tags":["Cloud-Computing"],"path":"/cloud-computing/just-cloud-computing-4","title":"[찍먹 Cloud Computing] 4. DynamoDB & Amazon RDS","img":"/post_image/thumbnail/just-cloud-computing-4.jpg","summary":"두 개의 대표적인 AWS DB를 공부 해 보자"}}},{"node":{"id":"ac18d925-067a-5f23-a7bb-b00fd02c6b60","excerpt":"AWS Lambda 안녕하세요? Justkode 입니다. 이번 시간에는 AWS Lambda에 대해서 알아 보고, AWS Lambda 함수를 생성 해 보고, 이를 AWS API Gateway를 통해 연결 하여 사용 해 보는 시간을 가져 보도록 하겠습니다. AWS Lambda에 대해서 간단하게 설명 하고 넘어 가자면, **PaaS (Platform As A Service)**의 일종으로, 우리가 AWS Lambda에 우리가 구현한 API Code…","frontmatter":{"date":"2021-07-21","tags":["Cloud-Computing"],"path":"/cloud-computing/just-cloud-computing-3","title":"[찍먹 Cloud Computing] 3. AWS Lambda","img":"/post_image/thumbnail/just-cloud-computing-3.jpg","summary":"Python 기반으로 AWS Lambda 함수를 만들어보자."}}},{"node":{"id":"a970f978-c18b-5e60-9833-49bb2a24e0fa","excerpt":"AWS S3 안녕하세요? Justkode 입니다. 이번 시간에는 AWS S3에 대해서 알아 보고, AWS S3 버킷 생성, 파일 접근 권한 설정, Python 코드 상에서의 접근을 해 보도록 하겠습니다. 일단 AWS S3에 대해서 간단하게 설명 드리겠습니다. AWS S…","frontmatter":{"date":"2021-07-16","tags":["Cloud-Computing","Python"],"path":"/cloud-computing/just-cloud-computing-2","title":"[찍먹 Cloud Computing] 2. AWS S3","img":"/post_image/thumbnail/just-cloud-computing-2.jpg","summary":"AWS S3와 boto3를 사용 해 보자"}}},{"node":{"id":"42bfd111-c953-556a-9bc2-1b915f83b767","excerpt":"AWS EC2 안녕하세요? Justkode 입니다. 이번 시간에는 AWS EC2에 대해서 알아 보고, AWS EC…","frontmatter":{"date":"2021-07-06","tags":["Cloud-Computing"],"path":"/cloud-computing/just-cloud-computing-1","title":"[찍먹 Cloud Computing] 1. AWS EC2란? / AWS EC2 인스턴스 만들기","img":"/post_image/thumbnail/just-cloud-computing-1.jpg","summary":"AWS EC2 인스턴스를 만들어 보자."}}},{"node":{"id":"0f0dbc8c-b2d6-51c3-895e-f300be8991d8","excerpt":"Cloud Computing? 안녕하세요? Justkode 입니다. Cloud Computing…","frontmatter":{"date":"2021-06-25","tags":["Cloud-Computing"],"path":"/cloud-computing/just-cloud-computing-0","title":"[찍먹 Cloud Computing] 0. Orientation","img":"/post_image/thumbnail/just-cloud-computing-0.jpg","summary":"Cloud Computing을 찍먹해 보자."}}}]}}},"categoryPosts":{"data":{"allMarkdownRemark":{"edges":[{"node":{"id":"f2c9a587-fb7c-5963-8398-3ad7356ae23d","excerpt":"안녕하세요? 오늘은 Kubernetes의 Resource들에 대해서 알아 보도록 하겠습니다. Pod Generator Pod: Pod은 k8s에서 사용되는 가장 작은 배포 단위로, 하나 이상의 container로 구성 됩니다. Pod 내의 container들은 동일 호스트에서 실행 됩니다. ReplicaSet: Pod의 복제본을 관리하는 k8s 객체이며, 지정된 수의 Pod 복제본이 주어진 시간안에 실행 되게 합니다. Deployment…","frontmatter":{"date":"2023-04-30","tags":["Cloud-Computing"],"path":"/cloud-computing/k8s-resources","title":"Kubernetes Resources 요약","img":"/post_image/thumbnail/k8s-resources.png","summary":"k8s의 리소스들을 요약 해 보자."}}},{"node":{"id":"f55c467d-2b09-54d6-bc08-b0b08f536b86","excerpt":"안녕하세요? 오늘은 Kubernetes를 구동 시키기 위해서 필요한 기본적인 Components들에 대해서 요약해서 알아보는 시간을 가져 보도록 하겠습니다. (글 매우 짧고, 성의 없음 주의) Control Plane Component…","frontmatter":{"date":"2023-04-24","tags":["Cloud-Computing"],"path":"/cloud-computing/k8s-components","title":"Kubernetes Component 요약","img":"/post_image/thumbnail/k8s-components.png","summary":"k8s의 컴포넌트를 초간단 요약 해 보자."}}},{"node":{"id":"7611f6af-dc48-595b-8866-23beee4d5cda","excerpt":"저번 시간에는 Spark On Kubernetes에 대한 이론을 배웠습니다. 오늘은 Spark On Kubernetes에 대한 실습을 진행 하도록 하겠습니다. 사전 준비 Docker Minikube (Kubernetes 1.20 버전 이상) kubectl Spark 3.0 버전 이상 최신 버전일 수록 좋습니다. 얼마 전에 구형 Docker가 깔려 있는 맥북에서 진행을 해 봤는데 Pod이 생성이 안되더군요.. Pyspark Image Build…","frontmatter":{"date":"2023-03-30","tags":["Data-Engineering","Cloud-Computing"],"path":"/data-engineering/spark-on-k8s-2","title":"Spark on Kubernetes - Practice","img":"/post_image/thumbnail/spark-on-k8s-2.png","summary":"Spark를 Kubernetes Cluster에서 동작 시켜 보자."}}},{"node":{"id":"3a543178-c1c9-5cfb-9c9e-b89aed5e8ead","excerpt":"안녕하세요? 오늘은 Kubernetes 환경에 JupyterHub를 설치 하는 방법에 대해서 알아 보도록 하겠습니다. Kubernetes Kubernetes는 컨테이너를 쉽고 빠르게 배포/확장하고 관리를 자동화해주는 Container Orchestration Tool 입니다. Kubernetes 시스템을 통해, 다음을 제공 받을 수 있습니다. 서비스 디스커버리와 로드 밸런싱: DNS 이름, 혹은 자체 IP…","frontmatter":{"date":"2023-03-25","tags":["Data-Engineering","Cloud-Computing"],"path":"/data-engineering/jupyterhub-on-k8s","title":"Jupyterhub on Kubernetes","img":"/post_image/thumbnail/jupyterhub-on-k8s.jpg","summary":"Jupyterhub를 Kubernetes Cluster에서 실행 해 보자."}}}]}}}}},"staticQueryHashes":["3819017183","63159454"],"slicesMap":{}}