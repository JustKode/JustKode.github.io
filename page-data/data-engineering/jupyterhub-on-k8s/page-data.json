{"componentChunkName":"component---src-layouts-post-layout-tsx","path":"/data-engineering/jupyterhub-on-k8s/","result":{"data":{"markdownRemark":{"html":"<p>안녕하세요? 오늘은 <strong>Kubernetes</strong> 환경에 <strong>JupyterHub</strong>를 설치 하는 방법에 대해서 알아 보도록 하겠습니다.</p>\n<h3>Kubernetes</h3>\n<p><strong>Kubernetes</strong>는 컨테이너를 쉽고 빠르게 배포/확장하고 관리를 자동화해주는 <strong>Container Orchestration Tool</strong> 입니다. <strong>Kubernetes</strong> 시스템을 통해, 다음을 제공 받을 수 있습니다.</p>\n<ul>\n<li>서비스 디스커버리와 로드 밸런싱: DNS 이름, 혹은 자체 IP 주소를 이용하여 <strong>컨테이너를 노출</strong> 해 주고, 트래픽이 많아지면 <strong>로드 밸런싱</strong>을 제공 하여 줍니다.</li>\n<li>스토리지 오케스트레이션: 로컬 저장소, 클라우드 공급자 등과 같은 <strong>저장소 시스템을 자동으로 탑재</strong> 하게 할 수 있습니다.</li>\n<li>자동화된 롤아웃과 롤백: 컨테이너의 원하는 상태를 지정 해 놓으면, 이에 맞춰 <strong>롤아웃, 롤백을 자동으로, 원하는 속도로</strong> 수행 해 줍니다.</li>\n<li>자동화된 빈 패킹 (bin packing): 컨테이너화된 작업을 실행하는 데 사용할 수 있는 쿠버네티스 클러스터 노드를 제공 하는데, <strong>컨테이너가 필요로 하는 CPU와 메모리를 적정 하게 제공</strong> 해 줍니다.</li>\n<li>자동화된 복구 (self-healing): 실패한 <strong>컨테이너를 다시 시작하고, 컨테이너를 교체</strong>하는 기술을 가지고 있습니다.</li>\n<li>시크릿과 구성 관리: 암호, OAuth 토큰 및 SSH 키와 같은 <strong>중요한 정보를 관리</strong> 할 수 있습니다.</li>\n</ul>\n<p align=\"center\">\n    <img src=\"/post_image/spark-on-k8s/1-2.png\" width=\"256px\" />\n    <div align=\"center\" color=\"#aaaaaa\">Kubernetes Logo</div>\n</p>\n<h3>JupyterHub</h3>\n<p><strong>JupyterHub</strong>는 <strong>여러 사용자가 공유</strong>하는 <strong>Jupyter Notebook</strong> 서버를 구축하는 데 사용되는 <strong>오픈 소스 프레임워크</strong>입니다. <strong>Jupyter Notebook</strong>을 사용 하는 의도는 각기 다양 합니다. 어떤 사람들은 머신러닝을 위해, 어떤 사람은 Spark Job을 통한 ETL을 위해, 어떤 사람은 다른 버전의 API를 사용 하기 위해 다양하게 사용 합니다. 이에 따라, 각자 사용 하는 <strong>노트북 파일과 커널을 분리</strong> 해 줄 필요가 있었고, 이에 따라 <strong>다양한 사용자 인증 제어, 커널 관리</strong> 등을 제공 할 수 있는 <strong>JupyterHub</strong>가 등장 하게 되었습니다.</p>\n<p align=\"center\">\n    <img src=\"https://jupyter.org/assets/homepage/hublogo.svg\" width=\"256px\" />\n    <div align=\"center\" color=\"#aaaaaa\">JupyterHub Logo</div>\n</p>\n<h3>Why JupyterHub on K8S?</h3>\n<p>왜 <strong>JupyterHub on K8S</strong> 일까요? <strong>JupyterHub</strong>는 <strong>Spawner</strong>라는 인터페이스를 통해, 사용자 마다 별개의 <strong>Jupyter Server</strong>를 제공 할 수 있게 합니다. K8S 환경에서는 <strong>KubeSpawner</strong>를 이용하여, <strong>K8S</strong>의 <strong>Secret, Node, Storage</strong> 등, 다양한 리소스들을 사용 할 수 있다는 것이 장점입니다.</p>\n<p>또한, <strong>원하는 이미지로 Pod을 생성</strong> 하는 것을 선택하게 할 수 있고, 또한, <strong>Secret에 대한 Namespace 수준의 권한 제어</strong> 등, <strong>Jupyter Server 운영</strong>의 입장에서 얻을 수 있는 이득이 많습니다.</p>\n<p>그리고, <strong>공식 Helm 차트</strong>를 제공하여, 편리 하고 빠른 배포 또한 제공 합니다.</p>\n<p>사진으로 내부 아키텍처를 표현하면 다음과 같습니다.</p>\n<p align=\"center\">\n    <img src=\"/post_image/jupyterhub-on-k8s/1-1.jpg\" width=\"768px\" max-width=\"100%\"/>\n    <div align=\"center\" color=\"#aaaaaa\">JupyterHub Architecture</div>\n</p>\n<h3>사전 준비</h3>\n<p>사전에 준비 해야 할 프로그램 목록 입니다. 해당 프로그램 들에 대한 사전적인 지식이 있어야 합니다.</p>\n<ul>\n<li>Docker</li>\n<li>minikube</li>\n<li>Kubectl</li>\n<li>Helm</li>\n</ul>\n<h3>설치 방법</h3>\n<p>일단, <strong>JupyterHub Helm Chart Repository</strong>를 등록 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">helm repo <span class=\"token function\">add</span> jupyterhub https://jupyterhub.github.io/helm-chart/\nhelm repo update</code></pre></div>\n<p>그 다음 빈 폴더를 생성 한 후, 해당 폴더에 <code class=\"language-text\">config.yaml</code>을 생성 합니다. <code class=\"language-text\">config.yaml</code>에는 다음 내용을 작성 합니다.\n사용 할 <strong>Docker Image</strong>를 명시하기 위함 입니다. 도커 이미지 내, <strong>Jupyter Kernel</strong> 세팅이 되어 있다면 사용 가능합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">singleuser</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> jupyter/minimal<span class=\"token punctuation\">-</span>notebook\n    <span class=\"token key atrule\">tag</span><span class=\"token punctuation\">:</span> latest</code></pre></div>\n<p>만약 <strong>의존성 설치 및 다른 파일 등의 복사</strong>가 필요 하다면 다음과 같이 <strong>Dockerfile</strong>을 만든 후 build 할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"dockerfile\"><pre class=\"language-dockerfile\"><code class=\"language-dockerfile\"><span class=\"token instruction\"><span class=\"token keyword\">FROM</span> jupyter/minimal-notebook:latest</span>\n<span class=\"token instruction\"><span class=\"token keyword\">RUN</span> pip install --no-cache-dir astropy</span></code></pre></div>\n<p>그 이후에는 터미널에 다음을 입력 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">helm upgrade --cleanup-on-fail <span class=\"token punctuation\">\\</span>\n  <span class=\"token operator\">&lt;</span>helm-release-name<span class=\"token operator\">></span> jupyterhub/jupyterhub <span class=\"token punctuation\">\\</span>\n  <span class=\"token parameter variable\">--namespace</span> <span class=\"token operator\">&lt;</span>k8s-namespace<span class=\"token operator\">></span> <span class=\"token punctuation\">\\</span>\n  --create-namespace <span class=\"token punctuation\">\\</span>\n  <span class=\"token parameter variable\">--version</span><span class=\"token operator\">=</span><span class=\"token operator\">&lt;</span>chart-version<span class=\"token operator\">></span> <span class=\"token punctuation\">\\</span>\n  <span class=\"token parameter variable\">--values</span> config.yaml</code></pre></div>\n<ul>\n<li><code class=\"language-text\">&lt;helm-release-name></code>: <strong>Helm Release Name</strong>을 의미 하며, 여러 개의 차트 설치들을 구분 하기 위해 사용 합니다.</li>\n<li><code class=\"language-text\">&lt;k8s-namespace></code>: <strong>Kubernetes Cluster</strong>내의 어느 <strong>Namespace</strong>에 설치 할 지 선택합니다. <code class=\"language-text\">--create-namespace</code> 옵션을 통해, 없는 경우 Namespace를 같이 설치하는 역할 또한 수행 합니다.</li>\n<li><code class=\"language-text\">&lt;chart-version></code>: <strong>chart-version</strong>을 선택 합니다. 현재 최신 버전은 2.0.0 입니다.</li>\n</ul>\n<p>예시 입니다. 먼저, <strong>minikube</strong> 시작을 완료 해 주신 후에, <strong>Helm</strong> 명령어를 수행 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">minikube start\n\nhelm upgrade --cleanup-on-fail <span class=\"token punctuation\">\\</span>\n  jphub-k8s jupyterhub/jupyterhub <span class=\"token punctuation\">\\</span>\n  <span class=\"token parameter variable\">--namespace</span> jphub-k8s <span class=\"token punctuation\">\\</span>\n  --create-namespace <span class=\"token punctuation\">\\</span>\n  <span class=\"token parameter variable\">--version</span><span class=\"token operator\">=</span><span class=\"token number\">2.0</span>.0 <span class=\"token punctuation\">\\</span>\n  <span class=\"token parameter variable\">--values</span> config.yaml\n\nkubectl <span class=\"token parameter variable\">--namespace</span><span class=\"token operator\">=</span>jphub-k8s port-forward service/proxy-public <span class=\"token number\">8080</span>:http</code></pre></div>\n<p>만약 <strong>minikube</strong>에 <strong>Jupyter Kernal Image load</strong>를 하지 않으셨다면 다음과 같이, <strong>Image load</strong>를 수행 하셔야 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">minikube image load jupyter/minimal-notebook:latest   </code></pre></div>\n<p>그 다음 <code class=\"language-text\">http://localhost:8080</code>을 접속 하면 다음과 같은 화면들을 확인 할 수 있습니다. (기본 아이디, 비밀번호는 admin/admin 입니다.)</p>\n<p align=\"center\">\n    <img src=\"/post_image/jupyterhub-on-k8s/1-2.png\" width=\"768px\" max-width=\"100%\"/>\n    <div align=\"center\" color=\"#aaaaaa\">JupyterHub Main page</div>\n</p>\n<h3>Customize</h3>\n<p><strong>config.yaml</strong>을 수정 함으로 다양한 Customize를 수행 할 수 있습니다.</p>\n<h4>OAuth</h4>\n<p><strong>OAuth</strong> 인증을 수행 할 수 있습니다. 아래 예제는 <strong>Github</strong> 예제 입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">singleuser</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> jupyter/minimal<span class=\"token punctuation\">-</span>notebook\n    <span class=\"token key atrule\">tag</span><span class=\"token punctuation\">:</span> latest\n<span class=\"token key atrule\">hub</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">config</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">GitHubOAuthenticator</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">client_id</span><span class=\"token punctuation\">:</span> &lt;id token<span class=\"token punctuation\">></span>\n      <span class=\"token key atrule\">client_secret</span><span class=\"token punctuation\">:</span> &lt;secret token<span class=\"token punctuation\">></span>\n      <span class=\"token key atrule\">oauth_callback_url</span><span class=\"token punctuation\">:</span> http<span class=\"token punctuation\">:</span>//localhost<span class=\"token punctuation\">:</span>8080/hub/oauth_callback\n      <span class=\"token key atrule\">allowed_organizations</span><span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">-</span> org<span class=\"token punctuation\">:</span>team\n      <span class=\"token key atrule\">scope</span><span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">-</span> read<span class=\"token punctuation\">:</span>org\n    <span class=\"token key atrule\">JupyterHub</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">authenticator_class</span><span class=\"token punctuation\">:</span> github</code></pre></div>\n<h4>Let users select their environment</h4>\n<p>유저로 하여금, 다양한 <strong>Docker Image</strong>로 구성된 커널 중 하나를 선택 할 수 있게 할 수 있습니다. <strong>Kubespawner</strong>를 이용 하여, <strong>image, env, cpu limit, secret</strong> 등, 많은 <strong>Kubernetes</strong> 내의 자원을 이용 할 수 있습니다. <a href=\"https://jupyterhub-kubespawner.readthedocs.io/en/latest/spawner.html#kubespawner.KubeSpawner\">공식 Kubespawner Document</a>도 존재 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">singleuser</span><span class=\"token punctuation\">:</span>\n  <span class=\"token comment\"># Defines the default image</span>\n  <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> jupyter/minimal<span class=\"token punctuation\">-</span>notebook\n    <span class=\"token key atrule\">tag</span><span class=\"token punctuation\">:</span> 2343e33dec46\n  <span class=\"token key atrule\">profileList</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">display_name</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Minimal environment\"</span>\n      <span class=\"token key atrule\">description</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"To avoid too much bells and whistles: Python.\"</span>\n      <span class=\"token key atrule\">default</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">display_name</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Datascience environment\"</span>\n      <span class=\"token key atrule\">description</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"If you want the additional bells and whistles: Python, R, and Julia.\"</span>\n      <span class=\"token key atrule\">kubespawner_override</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> jupyter/datascience<span class=\"token punctuation\">-</span>notebook<span class=\"token punctuation\">:</span>2343e33dec46\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">display_name</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Spark environment\"</span>\n      <span class=\"token key atrule\">description</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"The Jupyter Stacks spark image!\"</span>\n      <span class=\"token key atrule\">kubespawner_override</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> jupyter/all<span class=\"token punctuation\">-</span>spark<span class=\"token punctuation\">-</span>notebook<span class=\"token punctuation\">:</span>2343e33dec46\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">display_name</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Learning Data Science\"</span>\n      <span class=\"token key atrule\">description</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Datascience Environment with Sample Notebooks\"</span>\n      <span class=\"token key atrule\">kubespawner_override</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> jupyter/datascience<span class=\"token punctuation\">-</span>notebook<span class=\"token punctuation\">:</span>2343e33dec46\n        <span class=\"token key atrule\">lifecycle_hooks</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">postStart</span><span class=\"token punctuation\">:</span>\n            <span class=\"token key atrule\">exec</span><span class=\"token punctuation\">:</span>\n              <span class=\"token key atrule\">command</span><span class=\"token punctuation\">:</span>\n                <span class=\"token punctuation\">-</span> <span class=\"token string\">\"sh\"</span>\n                <span class=\"token punctuation\">-</span> <span class=\"token string\">\"-c\"</span>\n                <span class=\"token punctuation\">-</span> <span class=\"token punctuation\">></span><span class=\"token scalar string\">\n                  gitpuller https://github.com/data-8/materials-fa17 master materials-fa;</span></code></pre></div>","id":"f6a3d18e-1f7a-5f26-99a8-fbf0cb8bc3e8","frontmatter":{"date":"2023-03-25","path":"/data-engineering/jupyterhub-on-k8s","title":"Jupyterhub on Kubernetes","tags":["Data-Engineering","Cloud-Computing"],"keyword":"Jupyterhub, Kubernetes","summary":"Jupyterhub를 Kubernetes Cluster에서 실행 해 보자.","img":"/post_image/thumbnail/jupyterhub-on-k8s.jpg","series":null}}},"pageContext":{"postPath":"/data-engineering/jupyterhub-on-k8s","series":{"data":{"allMarkdownRemark":{"edges":[]}}},"categoryPosts":{"data":{"allMarkdownRemark":{"edges":[{"node":{"id":"b595b168-8160-5abf-9641-39746d2f9e82","excerpt":"안녕하세요, 박민재입니다. 오늘은 Spark Application내의 각 Executor 내의 Task에 제한적으로 변수를 공유하는 두 가지 방법에 대해서 알아 보도록 하겠습니다. 시작하기에 앞서 단편적으로 생각 해 보면, Spark Application에서 연산 과정의 변수를 공유 한다는 것은 어려운 일인가? 라는 질문을 던져 볼 수 있습니다. 우리는 Task…","frontmatter":{"date":"2024-10-11","tags":["Data-Engineering"],"path":"/data-engineering/spark-sharing-variables","title":"Sharing Variables in Spark - Broadcast, Accumulator","img":"/post_image/thumbnail/spark-sharing-variables.png","summary":"Spark Application에서 변수를 공유 하는 방법"}}},{"node":{"id":"5effd6a1-bfd8-5a86-b718-5eb1e534601e","excerpt":"Intro 안녕하세요, 박민재입니다. 오늘은 Spark Memory에 관해 Deep Dive를 해 보도록 하겠습니다. Spark는 In-Memory를 이용하여, 빠른 연산을 할 수 있도록 보장합니다. 하지만, In-Memory 연산은 빠른 대신, 비싼 관계로 적은 리소스 만을 활용할 수 있습니다. 그렇기 때문에 우리는 효율적으로 Memory를 관리 하여, Spark Application이 빠르고, 안정적으로 Task…","frontmatter":{"date":"2024-04-12","tags":["Data-Engineering"],"path":"/data-engineering/spark-memory-deep-dive","title":"Deep Dive of Spark Memory","img":"/post_image/thumbnail/spark-memory-deep-dive.jpeg","summary":"Spark Memory의 깊은 이해를 위해 Deep Dive를 해 보자."}}},{"node":{"id":"9a77a751-f1a2-59c2-9065-808620c51bbe","excerpt":"안녕하세요? 박민재입니다. 오늘은 Data Discovery에 대해서 알아 보도록 하겠습니다. What is Data Discovery? Data Discovery란 무엇 일까요? Data Discovery는 조직 내 데이터를 찾고 이해하는 프로세스를 의미 합니다. Data Engineer들은 요구사항을 수행하기 위해, 많은 Data Source에서 다양한 Data Table…","frontmatter":{"date":"2024-03-17","tags":["Data-Engineering"],"path":"/data-engineering/what-is-data-discovery","title":"Data Discovery란 무엇인가?","img":"/post_image/thumbnail/what-is-data-discovery.jpeg","summary":"데이터를 찾고 이해하는 프로세스인, Data Discovery에 대하여"}}},{"node":{"id":"e9fb6855-ce94-588e-9305-34d25a15f063","excerpt":"Intro 안녕하세요! 박민재, JustKode 입니다. 오늘은 Data Quality Tool인 Great Expectations에 대해서 알아 볼 것 입니다. Data Quality…","frontmatter":{"date":"2024-02-18","tags":["Data-Engineering"],"path":"/data-engineering/great-expectations","title":"Great Expectations란?","img":"/post_image/thumbnail/great-expectations.png","summary":"Data Quality Tool인 Great Expectations에 대해 알아 봅니다."}}}]}}}}},"staticQueryHashes":["3819017183","63159454"],"slicesMap":{}}