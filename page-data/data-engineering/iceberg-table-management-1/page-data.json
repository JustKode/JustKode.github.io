{"componentChunkName":"component---src-layouts-post-layout-tsx","path":"/data-engineering/iceberg-table-management-1/","result":{"data":{"markdownRemark":{"html":"<p>안녕하세요? 박민재입니다. 오늘은 Iceberg Table을 관리하는 방법을 Metadata Table의 사용을 중심으로 깊게 알아 보도록 하겠습니다.</p>\n<p>Apache Iceberg의 경우에는 <strong>Metadata Table 기능을 매우 강력하게 지원</strong>합니다. 이를 통해 Iceberg Table을 운영을 쉽게 수행 할 수 있죠. 예를 들어, <strong>Table의 Evolution이 어떻게 진행</strong> 되었는지, <strong>파일들이 어떻게 Partitioning</strong> 되어 운영 되는지, <strong>Partition별 File의 갯수</strong>, <strong>특정 File 내에서 Column의 Upper Bound, Lower Bound</strong> 등이 어떻게 되는지 등을 기록할 수 있어요.</p>\n<p>또한 메타데이터를 SHOW PARTITION 같은 Hive Dialect가 아닌, <strong>대부분의 SQL 엔진에서 사용할 수 있는 형태</strong>로 제공 하고 있고요.</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> catalog<span class=\"token punctuation\">.</span><span class=\"token keyword\">table</span><span class=\"token punctuation\">.</span>history <span class=\"token keyword\">AS</span> <span class=\"token keyword\">OF</span> VERSION <span class=\"token number\">1059035530770364194</span></code></pre></div>\n<p>크게 다음과 같은 Metadata Table 들을 지원하고 있습니다.</p>\n<ul>\n<li>history: <strong>Snapshot 생성 이력</strong> 기록</li>\n<li>metadata_log_entries: Table Update 중 생성 된 <strong>Metadata File 로깅</strong></li>\n<li>snapshots: <strong>Snapshot 정보</strong> 기록</li>\n<li>files: Table 내 현재 <strong>Data File의 정보</strong></li>\n<li>manifest: <strong>Manifest File에 대한 정보</strong></li>\n<li>partitions: <strong>Partition에 대한 정보</strong></li>\n<li>refs: Snapshot의 <strong>Reference</strong></li>\n<li>entries: <strong>Manifest의 Entry</strong> (Manifest -> File)</li>\n</ul>\n<h3>history</h3>\n<p><code class=\"language-text\">history</code> Metadata Table은 <strong>Table이 어떻게 evolution 되었는지 History를 기록</strong>하는 Table입니다.\n<strong>Snapshot 정보를 기록</strong> 하며, 이는 <strong>데이터 복구 및 버전 제어</strong>에 사용 할 수 있습니다. 해당 스냅샷에 대해서 SQL 쿼리를 수행 하는 형식으로 사용합니다.</p>\n<ul>\n<li>made_current_at: 해당 스냅샷이 <strong>Current Snapshot으로 설정된 시점의 Timestamp</strong></li>\n<li>snapshot_id: 각 스냅샷의 <strong>고유 ID</strong>.</li>\n<li>parent_id: 해당 Snapshot을 만들기 위해 사용한 <strong>이전 스냅샷의 식별자</strong>(존재하는 경우).</li>\n<li>is_current_ancestor: 해당 스냅샷이 <strong>현재 스냅샷의 조상인지 여부</strong>를 나타냅니다.</li>\n</ul>\n<p align=\"center\">\n    <img src=\"/post_image/apache-iceberg/table-management/01.png\" style=\"width:75%;max-width:768px;\"/>\n</p>\n<p>아래는 <code class=\"language-text\">history</code> 테이블에 특정 시점 이전의 Snapshot에 대해 쿼리 하는 예제 입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> snapshot_id\n<span class=\"token keyword\">FROM</span> catalog<span class=\"token punctuation\">.</span><span class=\"token keyword\">table</span><span class=\"token punctuation\">.</span>metadata_log_entries\n<span class=\"token keyword\">WHERE</span> made_current_at <span class=\"token operator\">&lt;</span> <span class=\"token string\">'2023-07-11 00:00:00'</span>\n<span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> made_current_at <span class=\"token keyword\">ASC</span></code></pre></div>\n<p>이를 통해서 <strong>Rollback이 수행 되었는지 여부</strong>도 도출이 가능합니다.</p>\n<ul>\n<li>두 개 이상의 동일한 <code class=\"language-text\">parent_id를</code> 가지고 있는가?</li>\n<li>그 중 하나만이 <code class=\"language-text\">is_current_ancestor</code> 가 <code class=\"language-text\">true</code> 인가? (Current Snapshot의 조상 인지 여부. 만약, 롤백 이후 다시 Snapshot이 생성 되었다면, 하나만 Current Snapshot의 조상에 해당 할 것)</li>\n</ul>\n<h3>metadata_log_entries</h3>\n<p>metadata_log_entries는 Table Update 중에 생성된 <strong>Metadata File을 로깅</strong>하여 <strong>Table Evolution을 추적</strong> 합니다.\n이를 통해, <strong>snapshot이 어떤 시점의 Metadata File</strong>들을 가지고 있었는지 확인 할 수 있습니다.</p>\n<ul>\n<li>timestamp: Metadata가 <strong>업데이트된 정확한 날짜와 시간</strong>을 기록 함</li>\n<li>file: <strong>파일 위치</strong></li>\n<li>latest_snapshot_id: Metadata가 업데이트 된 시점의 <strong>최신의 Snapshot의 ID</strong></li>\n<li>latest_schema_id: Metadata가 업데이트 된 시점에서 사용 된 <strong>최신의 Schema ID</strong></li>\n<li>latest_sequence_number: Metadata File의 Sequence 번호</li>\n</ul>\n<p align=\"center\">\n    <img src=\"/post_image/apache-iceberg/table-management/02.png\" style=\"width:75%;max-width:768px;\"/>\n</p>\n<p>응용하는 예시로는, <strong>Schema 변경이 일어나기 직전의 최근 Snapshot을 추출</strong>하여, <strong>Schema 변경 전으로 Rollback</strong> 하는 데 사용하는 예제가 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">WITH</span> Ranked_Entries <span class=\"token keyword\">AS</span> <span class=\"token punctuation\">(</span>\n <span class=\"token keyword\">SELECT</span>\n  latest_snapshot_id<span class=\"token punctuation\">,</span>\n  latest_schema_id<span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">timestamp</span><span class=\"token punctuation\">,</span>\n  ROW_NUMBER<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">OVER</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">PARTITION</span> <span class=\"token keyword\">BY</span> latest_schema_id <span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> <span class=\"token keyword\">timestamp</span> <span class=\"token keyword\">DESC</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> row_num\n <span class=\"token keyword\">FROM</span>\n  catalog<span class=\"token punctuation\">.</span><span class=\"token keyword\">table</span><span class=\"token punctuation\">.</span>metadata_log_entries\n <span class=\"token keyword\">WHERE</span>\n  latest_schema_id <span class=\"token operator\">IS</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">SELECT</span>\n latest_snapshot_id<span class=\"token punctuation\">,</span>\n latest_schema_id<span class=\"token punctuation\">,</span>\n <span class=\"token keyword\">timestamp</span> <span class=\"token keyword\">AS</span> latest_timestamp\n<span class=\"token keyword\">FROM</span>\n Ranked_Entries\n<span class=\"token keyword\">WHERE</span>\n row_num <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n<span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span>\n latest_schema_id <span class=\"token keyword\">DESC</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>snapshots</h3>\n<p><code class=\"language-text\">snapshots</code>는 <strong>Snapshot의 정보</strong>를 담고 있는 테이블 입니다. <strong>Version 관리, Time Travel, 증분 처리, 과거 추적</strong> 등등을 수행 할 수 있습니다.</p>\n<ul>\n<li>committed_at: Snapshot이 <strong>생성된 시점</strong> 입니다.</li>\n<li>snapshot_id: Snapshot의 <strong>고유 ID입</strong>니다.</li>\n<li>parent_id: 해당 Snapshot의 <strong>부모 Snapshot ID</strong> 입니다. 해당 Snapshot이 어디서 부터 만들어졌는지 알 수 있습니다.</li>\n<li>operation: <strong>어떤 연산으로 만들어 졌는지</strong>를 나타냅니다. (예시: APPEND and OVERWRITE)</li>\n<li>manifest_list: 해당 Snapshot이 가지고 있는 <strong>manifest_list 경로</strong>를 나타냅니다.</li>\n<li>summary: 해당 <strong>Snapshot의 요약 정보</strong>입니다.</li>\n</ul>\n<p>해당 Query를 통해서, Table 내에 있는 <strong>Snapshot ID 별로 몇 개의 Record 들이 추가</strong> 되었는지 확인 할 수 있습니다.\n혹은, <strong>하루에 몇 개의 Snapshot</strong>이 만들어 졌는지도 확인 할 수 있어요.</p>\n<p align=\"center\">\n    <img src=\"/post_image/apache-iceberg/table-management/03.png\" style=\"width:75%;max-width:768px;\"/>\n</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span>\n committed_at<span class=\"token punctuation\">,</span>\n snapshot_id<span class=\"token punctuation\">,</span>\n summary<span class=\"token punctuation\">[</span><span class=\"token string\">'added-records'</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">AS</span> added_records\n<span class=\"token keyword\">FROM</span>\n catalog<span class=\"token punctuation\">.</span><span class=\"token keyword\">table</span><span class=\"token punctuation\">.</span>snapshots<span class=\"token punctuation\">;</span>\n \n<span class=\"token keyword\">SELECT</span>\n operation<span class=\"token punctuation\">,</span>\n <span class=\"token function\">COUNT</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">AS</span> operation_count<span class=\"token punctuation\">,</span>\n <span class=\"token keyword\">DATE</span><span class=\"token punctuation\">(</span>committed_at<span class=\"token punctuation\">)</span> <span class=\"token keyword\">AS</span> <span class=\"token keyword\">date</span>\n<span class=\"token keyword\">FROM</span>\n catalog<span class=\"token punctuation\">.</span><span class=\"token keyword\">table</span><span class=\"token punctuation\">.</span>snapshots\n<span class=\"token keyword\">GROUP</span> <span class=\"token keyword\">BY</span>\n operation<span class=\"token punctuation\">,</span>\n <span class=\"token keyword\">DATE</span><span class=\"token punctuation\">(</span>committed_at<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span>\n <span class=\"token keyword\">date</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>files</h3>\n<p><code class=\"language-text\">files</code>는 <strong>테이블 내의 현재 데이터 파일을 보여주며, 각 데이터 파일의 위치, 형식, 내용, 파티셔닝 정보</strong>등을 제공 합니다.\n다른 Table의 정보들과 함께 이용하여 사용 하면, <strong>Data Lineage Tracking, Schema Evolution</strong> 등, 다양한 케이스를 대응 할 수 있습니다.</p>\n<ul>\n<li>content: <strong>datafile</strong> (0), <strong>position delete file</strong> (1), <strong>equality delete file</strong> (2)</li>\n<li>file_path: 파일 <strong>경로</strong></li>\n<li>file_format: 파일 <strong>형식</strong></li>\n<li>spec_id: 파일이 준수하는 <strong>Partition Spec ID</strong>. <strong>데이터가 어떻게 분할 되는지 참조</strong>함</li>\n<li>partition: <strong>파티션 정보</strong></li>\n<li>record_count: <strong>레코드 갯수</strong></li>\n<li>file_size_in_bytes: 파일 <strong>사이즈</strong></li>\n<li>columns_size: Column 당 <strong>파일 크기</strong></li>\n<li>value_counts: Column당 <strong>non-null인 count</strong></li>\n<li>null_value_counts: Column당 <strong>null인 count</strong></li>\n<li>nan_value_counts: Column당 <strong>NaN (Not a Number)인 count</strong></li>\n<li>lower_bounds: Column별 <strong>최소값</strong></li>\n<li>upper_bounds: Column별 <strong>최대값</strong></li>\n<li>key_metadata: <strong>Spark, Flink Engine에서 용도에 맞게 구현 해서 넣은 Binary Metadata</strong>. 없는 경우가 많다.</li>\n<li>split_offsets: 병렬 처리를 위해서, <strong>file split 위치</strong>를 기록</li>\n<li>equality_ids: Equality Delete에서 사용 되는, <strong>row id 집합</strong></li>\n<li>sort_order_id: <strong>Sort Order 관련 ID</strong></li>\n<li>readable_metrics: <strong>File Metric을 제공</strong> 합니다.</li>\n</ul>\n<p align=\"center\">\n    <img src=\"/post_image/apache-iceberg/table-management/04.png\" style=\"width:75%;max-width:768px;\"/>\n</p>\n<p>이를 통해 <strong>많은 것을 할 수 있는데요</strong>, 어떤 Partition을 Merge 하면 좋을지를 결정 하기 위해서, <strong>Partition별 평균 file_size를 측정</strong> 할 수도 있고요.</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span>\n <span class=\"token keyword\">partition</span><span class=\"token punctuation\">,</span>\n <span class=\"token function\">COUNT</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">AS</span> num_files<span class=\"token punctuation\">,</span>\n <span class=\"token function\">AVG</span><span class=\"token punctuation\">(</span>file_size_in_bytes<span class=\"token punctuation\">)</span> <span class=\"token keyword\">AS</span> avg_file_size\n<span class=\"token keyword\">FROM</span>\n catalog<span class=\"token punctuation\">.</span><span class=\"token keyword\">table</span><span class=\"token punctuation\">.</span>files\n<span class=\"token keyword\">GROUP</span> <span class=\"token keyword\">BY</span>\n <span class=\"token keyword\">partition</span>\n<span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span>\n num_files <span class=\"token keyword\">DESC</span><span class=\"token punctuation\">,</span>\n avg_file_size <span class=\"token keyword\">ASC</span></code></pre></div>\n<p>혹은, <strong>특정 Column에 null value가 있는 지</strong>도 확인 해 볼 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span>\n <span class=\"token keyword\">partition</span><span class=\"token punctuation\">,</span> file_path\n<span class=\"token keyword\">FROM</span>\n catalog<span class=\"token punctuation\">.</span><span class=\"token keyword\">table</span><span class=\"token punctuation\">.</span>files\n<span class=\"token keyword\">WHERE</span>\n null_value_counts<span class=\"token punctuation\">[</span><span class=\"token string\">'3'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span></code></pre></div>\n<p>물론, 테이블 내의 <strong>File Total Size</strong>도 측정 할 수 있어요.</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span>file_size_in_bytes<span class=\"token punctuation\">)</span> <span class=\"token keyword\">from</span> catalog<span class=\"token punctuation\">.</span><span class=\"token keyword\">table</span><span class=\"token punctuation\">.</span>files</code></pre></div>\n<p>Time Travel 기능을 통해, 이전 Snapshot에서 가지고 있는 File의 목록 또한 한 눈에 볼 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> file_path<span class=\"token punctuation\">,</span> file_size_in_bytes\n<span class=\"token keyword\">FROM</span> catalog<span class=\"token punctuation\">.</span><span class=\"token keyword\">table</span><span class=\"token punctuation\">.</span>files\nVERSION <span class=\"token keyword\">AS</span> <span class=\"token keyword\">OF</span> <span class=\"token operator\">&lt;</span>snapshot_id<span class=\"token operator\">></span><span class=\"token punctuation\">;</span></code></pre></div>\n<h4>all_data_files</h4>\n<p>유사한 Table인 <code class=\"language-text\">all_data_files</code>가 있습니다. 이는 똑같은 Datafile로 스냅샷이 두 개 이상 만들어 졌다면 중복 될 수 있는 구조입니다.\nfile과 field가 같습니다.</p>\n<h3>manifests</h3>\n<p><code class=\"language-text\">manifests</code> Metadata Table은 <strong>Manifest File에 대해서 자세하게 기술</strong> 되어 있는 Metadata Table 입니다.</p>\n<ul>\n<li>path: manifest file의 <strong>위치</strong></li>\n<li>length: manifest file의 <strong>크기</strong></li>\n<li>partition_spec_id: 해당 manifest file의 <strong>Partition Spec의 ID</strong></li>\n<li>added_snapshot_id: 해당 manifest file이 추가 될 때 같이 만들어진 <strong>Snapshot ID</strong></li>\n<li>added_data_files_count: 해당 manifest file로 추가 된 <strong>file count</strong></li>\n<li>existing_data_files_count: 해당 manifest file 이전, <strong>기존에 있던 file count</strong></li>\n<li>deleted_data_files_count: 해당 manifest로 <strong>삭제된 file count</strong></li>\n<li>partition_summaries (최신 버전의 경우 partitions로 이름이 변경 됨): Partition Value에 따라 각각 <strong>contains_null, contains_nan, lower_bound, upper_bound</strong>를 제공 합니다.</li>\n</ul>\n<p align=\"center\">\n    <img src=\"/post_image/apache-iceberg/table-management/05.png\" style=\"width:75%;max-width:768px;\"/>\n</p>\n<p>manifest를 압축 해야하는 경우에는 평균보다 낮은 Manifest File에 대해서 압축 하기 위해, 이를 추출하는 예제도 존재 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">WITH</span> avg_length <span class=\"token keyword\">AS</span> <span class=\"token punctuation\">(</span>\n <span class=\"token keyword\">SELECT</span> <span class=\"token function\">AVG</span><span class=\"token punctuation\">(</span>length<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> average_manifest_length\n <span class=\"token keyword\">FROM</span> catalog<span class=\"token punctuation\">.</span><span class=\"token keyword\">table</span><span class=\"token punctuation\">.</span>manifests\n<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">SELECT</span>\n path<span class=\"token punctuation\">,</span>\n length\n<span class=\"token keyword\">FROM</span>\n catalog<span class=\"token punctuation\">.</span><span class=\"token keyword\">table</span><span class=\"token punctuation\">.</span>manifests\n<span class=\"token keyword\">WHERE</span>\n length <span class=\"token operator\">&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">SELECT</span> average_manifest_length <span class=\"token keyword\">FROM</span> avg_length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>데이터의 추가 및 삭제 추이도 확인 할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span>\n added_snapshot_id<span class=\"token punctuation\">,</span>\n <span class=\"token function\">SUM</span><span class=\"token punctuation\">(</span>added_data_files_count<span class=\"token punctuation\">)</span> <span class=\"token keyword\">AS</span> total_added_data_files\n<span class=\"token keyword\">FROM</span>\n catalog<span class=\"token punctuation\">.</span><span class=\"token keyword\">table</span><span class=\"token punctuation\">.</span>manifests\n<span class=\"token keyword\">GROUP</span> <span class=\"token keyword\">BY</span>\n added_snapshot_id<span class=\"token punctuation\">;</span>\n \n \n<span class=\"token keyword\">SELECT</span>\n added_snapshot_id\n<span class=\"token keyword\">FROM</span>\n catalog<span class=\"token punctuation\">.</span><span class=\"token keyword\">table</span><span class=\"token punctuation\">.</span>manifests\n<span class=\"token keyword\">WHERE</span>\n deleted_data_files_count <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h4>all_manifests</h4>\n<p>이 또한, <code class=\"language-text\">all_data_files</code> 와 동일 하게 중복해서 나올 수 있는 구조 입니다. manifest는 여러 개의 Snapshot에 포함 될 수 있습니다.</p>\n<h3>partitions</h3>\n<p><code class=\"language-text\">partitions</code> 는 Partition에 대한 정보를 나타냅니다.</p>\n<ul>\n<li>partition: <strong>Partition Value</strong>를 나타냅니다. <strong>Query Processing에 사용</strong> 됩니다.</li>\n<li>spec_id: <strong>Partition Spec ID</strong>를 나타냅니다.</li>\n<li>record_count: <strong>파티션 내 총 레코드 수</strong>를 나타냅니다. Repartition 정책을 세울 때 좋습니다.</li>\n<li>file_count: <strong>파티션 내 File Count 갯수</strong>를 나타냅니다.</li>\n<li>position_delete_record_count: 파티션에 <strong>position delete</strong> 된 <strong>record 갯수</strong></li>\n<li>position_delete_file_count: 파티션에 있는 <strong>position deletefile 갯수</strong></li>\n<li>equality_delete_record_count: 파티션에 <strong>equality delete</strong> 된 <strong>record 갯수</strong></li>\n<li>equality_delete_file_count: 파티션에 있는 <strong>equality deletefile 갯수</strong></li>\n</ul>\n<p align=\"center\">\n    <img src=\"/post_image/apache-iceberg/table-management/06.png\" style=\"width:75%;max-width:768px;\"/>\n</p>\n<p>다음과 같이, Partition 별 File Count를 확인 하거나</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> <span class=\"token keyword\">partition</span><span class=\"token punctuation\">,</span> file_count <span class=\"token keyword\">FROM</span> catalog<span class=\"token punctuation\">.</span><span class=\"token keyword\">table</span><span class=\"token punctuation\">.</span>partitions</code></pre></div>\n<p>File Size를 확인 하여, <strong>추가 Partition Evolution이 필요한지에 대한 여부도 판단</strong> 할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> <span class=\"token keyword\">partition</span><span class=\"token punctuation\">,</span> <span class=\"token function\">SUM</span><span class=\"token punctuation\">(</span>file_size_in_bytes<span class=\"token punctuation\">)</span> <span class=\"token keyword\">AS</span> partition_size\n<span class=\"token keyword\">FROM</span> catalog<span class=\"token punctuation\">.</span><span class=\"token keyword\">table</span><span class=\"token punctuation\">.</span>files\n<span class=\"token keyword\">GROUP</span> <span class=\"token keyword\">BY</span> <span class=\"token keyword\">partition</span></code></pre></div>\n<h3>refs</h3>\n<p>Snapshot의 <strong>Reference를 기록</strong> 합니다. <code class=\"language-text\">refs</code>는 특정 <strong>Snapshot의 Pointer로 간주</strong>가 되며, Snapshot을 <strong>Branching + Tagging 하기 위해서 사용</strong>합니다.</p>\n<p>FYI) 추후 설명 할테지만, TAG / BRANCH에 Retention을 적용 할 수 있습니다.</p>\n<ul>\n<li>name: reference의 <strong>이름</strong></li>\n<li>type: reference의 <strong>형식</strong> (BRANCH or TAG)</li>\n<li>snapshot_id: reference의 <strong>Snapshot ID</strong></li>\n<li>min_reference_age_in_ms: <strong>Snapshot을 참조할 수 있는 기간</strong>을 밀리초 단위로 표현</li>\n<li>min_snapshots_to_keep: Table에 <strong>최소한</strong>으로 남길 <strong>Snapshot 수의 하한</strong></li>\n<li>max_snapshot_age_in_ms: <strong>참조 된 Snapshot을 남길 수 있는 기간</strong>을 밀리초 단위로 표현</li>\n</ul>\n<p align=\"center\">\n    <img src=\"/post_image/apache-iceberg/table-management/07.png\" style=\"width:75%;max-width:768px;\"/>\n</p>\n<h3>entries</h3>\n<p>Manifest의 entry로 사용 합니다. (Manifest → flie)</p>\n<ul>\n<li>status: datafile (0), position delete file (1), equality delete file (2)</li>\n<li>snapshot_id: 해당 Manifest File의 <strong>Snapshot ID</strong></li>\n<li>sequence_number: 작업 순서를 나타냄. 추가, 수정 또는 삭제 여부에 관계 없이 <strong>변경 사항 있을때 마다 증가</strong></li>\n<li>data_file\n<ul>\n<li>file_path: 파일 <strong>경로</strong></li>\n<li>file_format: 파일 <strong>유형</strong></li>\n<li>record_count: <strong>레코드 갯수</strong></li>\n<li>file_size_in_bytes: 파일 <strong>사이즈</strong></li>\n<li>columns_size: Column 당 <strong>파일 크기</strong></li>\n<li>value_counts: Column당 <strong>non-null인 count</strong></li>\n<li>null_value_counts: Column당 <strong>null인 count</strong></li>\n<li>nan_value_counts: Column당 <strong>NaN (Not a Number)인 count</strong></li>\n<li>lower_bounds: Column별 <strong>최소값</strong></li>\n<li>upper_bounds: Column별 <strong>최대값</strong></li>\n<li>key_metadata: Spark, Flink Engine에서 용도에 맞게 구현 해서 넣은 Binary Metadata. 없는 경우가 많다.</li>\n<li>split_offsets: 병렬 처리를 위해서, <strong>file split 위치</strong>를 기록</li>\n</ul>\n</li>\n</ul>\n<p align=\"center\">\n    <img src=\"/post_image/apache-iceberg/table-management/08.png\" style=\"width:75%;max-width:768px;\"/>\n</p>\n<h3>Metadata Table Join</h3>\n<p>상기한 Metadata Table 들에 대해 Join하여 조회하는 방법으로, <strong>원하는 데이터 들을 추출</strong> 할 수 있습니다.</p>\n<ul>\n<li>Snapshot 에서 <strong>추가된 File 전체 조회</strong> (entries + files)</li>\n<li>어떤 LifeCycle에서 <strong>파일이 삭제</strong> 되었는 지 확인 (entries + manifests)</li>\n<li><strong>Partition Evolution 과정</strong> 확인 (entries + partition)</li>\n<li>특정 <strong>branch의 file 모니터링</strong> (refs + entries)</li>\n<li>두 <strong>branch 사이의 차이</strong> 찾기 (refs + entries + files)</li>\n<li><strong>각 branch에서 쌓인 데이터 양 확인</strong> 하기 (refs + entries + files)</li>\n</ul>\n<p>다음 시간에는 <strong>Branching &#x26; Tagging</strong>에 대해서 알아 보도록 하겠습니다.</p>","id":"dcd44de2-0eff-56f8-ac2d-2a99250ab9cf","frontmatter":{"date":"2024-12-05","path":"/data-engineering/iceberg-table-management-1","title":"Iceberg Table Management - 1. Metadata Table ","tags":["Data-Engineering"],"keyword":"Iceberg,Apache Iceberg,빅데이터,Big Data,Optimization,Management,관리","summary":"Metadata Table을 통해 Iceberg Table을 관리 해 보자","img":"/post_image/thumbnail/iceberg-table-management.png","series":"Iceberg Table Management"}}},"pageContext":{"postPath":"/data-engineering/iceberg-table-management-1","series":{"data":{"allMarkdownRemark":{"edges":[{"node":{"id":"2001438a-fe37-5b3c-8954-bce7d5e18a7a","excerpt":"안녕하세요? 박민재입니다. 오늘은 Iceberg Table을 관리하는 방법 중 하나인, Branching & Tagging 그리고 Rollback Action에 대해서 알아 보도록 하겠습니다. Isolation of Changes with Branches Iceberg에서는 git과 같은 방식으로 Branch를 만들어, 데이터 변경 사항을 관리 할 수 있습니다. 우리의 사례로 빗대어 보면 H/W 이슈, 혹은 Application…","frontmatter":{"date":"2025-01-03","tags":["Data-Engineering"],"path":"/data-engineering/iceberg-table-management-2","title":"Iceberg Table Management - 2. Branching, Tagging & Rollback","img":"/post_image/thumbnail/iceberg-table-management.png","summary":"Branching, Tagging & Rollback을 통해 Iceberg Table을 관리 해 보자"}}},{"node":{"id":"dcd44de2-0eff-56f8-ac2d-2a99250ab9cf","excerpt":"안녕하세요? 박민재입니다. 오늘은 Iceberg Table을 관리하는 방법을 Metadata Table의 사용을 중심으로 깊게 알아 보도록 하겠습니다. Apache Iceberg의 경우에는 Metadata Table 기능을 매우 강력하게 지원합니다. 이를 통해 Iceberg Table을 운영을 쉽게 수행 할 수 있죠. 예를 들어, Table의 Evolution이 어떻게 진행 되었는지, 파일들이 어떻게 Partitioning…","frontmatter":{"date":"2024-12-05","tags":["Data-Engineering"],"path":"/data-engineering/iceberg-table-management-1","title":"Iceberg Table Management - 1. Metadata Table ","img":"/post_image/thumbnail/iceberg-table-management.png","summary":"Metadata Table을 통해 Iceberg Table을 관리 해 보자"}}}]}}},"categoryPosts":{"data":{"allMarkdownRemark":{"edges":[{"node":{"id":"dec9e599-9444-556f-99ba-7a1dc27a4dbb","excerpt":"안녕하세요, 박민재입니다. 혹시 Data Discovery에 중요성을 느껴, DataHub를 사용하려고 하시는 분이 있나요? 아마 그렇다면 DataHub를 도입한 사례를 몇 개 읽어 보셨을꺼라 생각합니다. 대표적으로 국내 기업에서는 뱅크샐러드, 소카, 베이글코드 등에서 성공적으로 도입한 사례들을 회사 사이트에 올리는 경우를 확인 할 수 있었어요. SOCAR BankSalad BagelCode DataHub…","frontmatter":{"date":"2025-03-02","tags":["Data-Engineering"],"path":"/data-engineering/to-datahub-user","title":"DataHub 도입을 고려 하시는 분들에게","img":"/post_image/thumbnail/to-datahub-user.webp","summary":"DataHub를 도입 하려고 할 때 알아야 할 점"}}},{"node":{"id":"24718dd5-aa23-578b-aa81-0ca11fcc0f06","excerpt":"안녕하세요, 박민재입니다. 저번 시간에는 Spark Operator가 무엇인지 간단하게 알아 보았는데요, 이번 시간에는 실제로 Spark Operator Helm Chart를 설치하여, Spark Operator 관련 구동 준비를 한 후, Spark Operator 관련 Resource를 작성 하여 실제 Job을 제출 해 보는 시간을 가져 보도록 하겠습니다. Spark Operator Helm Chart Spark Operator…","frontmatter":{"date":"2025-02-02","tags":["Data-Engineering"],"path":"/data-engineering/spark-operator-2","title":"Spark Operator - 2. Practice","img":"/post_image/thumbnail/spark-operator.jpg","summary":"Spark Operator를 사용 해 보자."}}},{"node":{"id":"9ec3e659-5978-5311-b4d5-fc9d0902e008","excerpt":"안녕하세요, 박민재입니다. 아마 2년 전 즈음에 Spark on Kubernetes 관련 내용을 다뤘었는데요 (이 글 또한, 개정판을 작성 해 볼게요), 이번에는 Spark Job을 Kubernetes Cluster에 편리하게 제출할 수 있게 하는 Spark Operator에 대해 알아 보도록 하겠습니다. Spark on Kubernetes를 사용하는 이유? 그렇다고, 이 글에서 아예 설명 하지 않고 넘어가는 것은 아닌 것 같아, Spark…","frontmatter":{"date":"2025-01-19","tags":["Data-Engineering"],"path":"/data-engineering/spark-operator-1","title":"Spark Operator - 1. Spark Operator란?","img":"/post_image/thumbnail/spark-operator.jpg","summary":"Kubernetes Cluster로의 Spark Job 제출을 도와주는 Spark Operator가 무엇 인지 알아보자."}}},{"node":{"id":"2001438a-fe37-5b3c-8954-bce7d5e18a7a","excerpt":"안녕하세요? 박민재입니다. 오늘은 Iceberg Table을 관리하는 방법 중 하나인, Branching & Tagging 그리고 Rollback Action에 대해서 알아 보도록 하겠습니다. Isolation of Changes with Branches Iceberg에서는 git과 같은 방식으로 Branch를 만들어, 데이터 변경 사항을 관리 할 수 있습니다. 우리의 사례로 빗대어 보면 H/W 이슈, 혹은 Application…","frontmatter":{"date":"2025-01-03","tags":["Data-Engineering"],"path":"/data-engineering/iceberg-table-management-2","title":"Iceberg Table Management - 2. Branching, Tagging & Rollback","img":"/post_image/thumbnail/iceberg-table-management.png","summary":"Branching, Tagging & Rollback을 통해 Iceberg Table을 관리 해 보자"}}}]}}}}},"staticQueryHashes":["3819017183","63159454"],"slicesMap":{}}