{"componentChunkName":"component---src-layouts-post-layout-tsx","path":"/data-engineering/to-datahub-user/","result":{"data":{"markdownRemark":{"html":"<p>안녕하세요, 박민재입니다. 혹시 <strong>Data Discovery</strong>에 중요성을 느껴, <strong>DataHub</strong>를 사용하려고 하시는 분이 있나요? 아마 그렇다면 DataHub를 도입한 사례를 몇 개 읽어 보셨을꺼라 생각합니다. 대표적으로 국내 기업에서는 <strong>뱅크샐러드, 소카, 베이글코드</strong> 등에서 성공적으로 도입한 사례들을 회사 사이트에 올리는 경우를 확인 할 수 있었어요.</p>\n<ul>\n<li><a href=\"https://tech.socarcorp.kr/data/2022/02/25/data-discovery-platform-01.html\">SOCAR</a></li>\n<li><a href=\"https://blog.banksalad.com/tech/the-starting-of-datadiscoveryplatform-era-in-banksalad/\">BankSalad</a></li>\n<li><a href=\"https://www.bagelcode.com/article/%EB%8D%B0%EC%9D%B4%ED%84%B0ai%ED%8C%80%EC%9D%98-datahub-%EB%8F%84%EC%9E%85%EA%B8%B0/\">BagelCode</a></li>\n</ul>\n<p>DataHub는 구성원이 사용하기 좋게 Metadata가 잘 Ingestion 되고, 이를 구성원들이 적극적으로 잘 이용해 준다면, 조직의 Data Discovery에 있어 매우 훌륭한 툴입니다. 하지만, 실제 이를 <strong>운영하는 개발자들이 겪는 애로 사항</strong>은 전혀 다른 이야기 입니다. 저는 이번 글을 통해 On-Prem 환경에서 DataHub를 적용한 과정 중 겪은 애로사항에 대해서 설명 드리도록 하겠습니다.</p>\n<h3>DataHub는 Metadata 정합성을 잘 보장 해 주지 않는다.</h3>\n<p>DataHub는 <strong>자유도가 매우 높은 프로젝트</strong> 입니다. 개발자가 손쉽게 DataHub에서 제공하지 않는 Metadata를 추가 할 수 있고, Web UI로 수정할 수 있는 가이드를 제공 합니다. <a href=\"https://datahubproject.io/docs/metadata-modeling/extending-the-metadata-model\">관련 링크</a></p>\n<p>우선 DataHub의 프로젝트 구성을 확인 해 보면 Metadata를 표현 하는데 있어, Dataset, DataJob과 같은 정보를 표현하는 <strong>Entity</strong>와 Entity에 Metadata 정보를 추가해 주는 <strong>Aspect</strong>의 개념으로 나뉘어 DataHub에 Push 하는 형태 입니다. <a href=\"https://datahubproject.io/docs/metadata-modeling/metadata-model\">관련 링크</a></p>\n<p>그런데 여기서 슬픈 사실이 있습니다. <strong>Aspect</strong>를 추가 하는데 있어 정합성을 확인 하지 않습니다.</p>\n<p>만약, <strong>Dataset</strong> Entity에 Tag를 추가 하기 위해 <strong>GlobalTag</strong> Aspect를 추가 한다고 가정 하겠습니다. 이 과정에서 <strong>Python SDK에서 제공해 주는 Emitter 에서는 실제 Tag가 존재하는 확인 하지 않습니다.</strong> 일단 Aspect를 추가 하고, Web UI 상에서는 Tag가 추가 되지만, 해당 태그를 수정 하려고 할 때, Internal Error가 발생하는... 곤란한 상황이 펼쳐지게 됩니다.</p>\n<p>혹은, <strong>Entity</strong>에 <strong>GlobalTag</strong> Aspect를 추가 한다고 하면, 기존에 Web UI에서 적용 했던 Tag는 삭제 되는 등의 이슈가 있었어요. 그 이유 때문에, <strong>GlobalTag</strong>를 적용하려는 Entity에 적용되어 있는 기존 Tag는 어떤 것이 있는지 비교 하며 Metadata를 적용 하여야 했어요.</p>\n<p>DataHub와 다른 데이터 플랫폼의 Integration (Airflow, Spark, Kafka, Hive 등)을 위해, 기존 제공하는 Plugin을 사용하기가 어려울 때, <strong>Python Emitter를 직접 사용</strong>하게 되는 데요, 이를 위해서 다음과 같은 원칙을 준수하여 Emitter를 개발 하는 것이 제 경험 상 좋았습니다.</p>\n<ul>\n<li><strong>Web UI에서 추가/수정/삭제 할 수 있는 정보</strong>는 Python Emitter를 이용하여 <strong>가급적 Ingestion 하지 않는다.</strong></li>\n<li>만약, 그럼에도 필요하다면, 각 Entity에서 사용 하는 <strong>Key (ex: DatasetKey, DataJobKey)</strong> 가 있으니, <strong>이를 바탕으로 URN 조회를 한땀한땀 수행하여 정합성을 보장</strong>한다.</li>\n</ul>\n<h3>DataHub Plugin을 너무 신뢰하지 말 것</h3>\n<p>DataHub가 Star 10k가 넘어가는, 사람들이 많이 사용하는 Open Source로 여겨지기 때문에 Plugin의 안정성이 보장 되었다고 생각 할 수 있습니다. 하지만, 생각보다 자잘한 이슈들이 많습니다.</p>\n<p>대표적으로 DataHub Airflow Plugin 관련된 이슈가 생각나는데요, DataHub Airflow Plugin은 Airflow Listener API를 사용합니다. <strong>Airflow Listener API는 Airflow Scheduler의 동작에 영향을 줄 수 있는 API</strong>라 사용에 주의 하여야 합니다.</p>\n<p>어느날은 DataHub가 다운이 된 적이 있었는데, Airflow Listener API를 사용하는 Airflow도 Request Timeout으로 인해 함께 다운이 되었던 경험이 있었습니다. Airflow Plugin은 Airflow Task 동작 하나하나를 DataProcess Entity Type으로 DataHub에 Push 하다 보니, MySQL이 다운되고, 이에 따라서 DataHub 서버가 다운 되고, DataHub를 연동한 Airflow도 Scheduler 단에서 Request Timeout이 발생 하여 다운 된 흐름이었습니다. Kafka도 Retention을 넉넉하게 주지 않았을 때 발생 하는 문제도 있었고요.</p>\n<p>그래서, DataHub Airflow Plugin을 비활성화 하고, Airflow의 DagBag을 직접 호출하여 Python SDK로 Ingestion 하는 DAG을 생성 하는 방법으로 임시적으로 해결 하였습니다. Airflow가 DataHub의 직접적인 영향을 받는 것을 피하기 위함이었어요.</p>\n<blockquote>\n<p>FYI) DataHub Helm Chart는 Kubernetes Cluster에 적은 리소스로 Kafka, MySQL, ElasticSearch를 설치 합니다. 더 큰 리소스가 필요 하다면, Kubernetes Cluster 외부에 더 큰 사이즈로 DB를 생성 하여 연결 하는 것을 추천드리요. 위의 상황은 PoC를 수행하다가 발생 한 이슈인데요, 실제 Prod 환경에 배포를 하게 된다면, DB 분리 + Monitoring을 꼭 수행 해 주세요.</p>\n</blockquote>\n<h3>On-Prem은 직접 Metadata Ingestion을 해야 할 경우가 많다.</h3>\n<p>DataHub에서 많은 Data Platform과의 연동을 지원 해 줍니다. 하지만, 대부분 AWS, GCP와 같은 Cloud 환경에서, 혹은 DataBricks, SnowFlake 등을 사용하는 환경에서의 호환성은 잘 보장해 주지만, On-Prem 처럼 <strong>Platform Engineering 팀에서 제공하는 내부 Platform</strong>을 이용하는 경우. 호환 되지 않을 가능성이 높습니다. 그렇기 때문에, <strong>Python SDK</strong>의 사용법에 익숙해져, <strong>주기적으로 Airflow 와 같은 Tool을 이용하여 Metadata를 Ingestion</strong> 하는 것이 좋습니다.</p>","id":"dec9e599-9444-556f-99ba-7a1dc27a4dbb","frontmatter":{"date":"2025-03-02","path":"/data-engineering/to-datahub-user","title":"DataHub 도입을 고려 하시는 분들에게","tags":["Data-Engineering"],"keyword":"DataHub, DataHub Use Case","summary":"DataHub를 도입 하려고 할 때 알아야 할 점","img":"/post_image/thumbnail/to-datahub-user.webp","series":null}}},"pageContext":{"postPath":"/data-engineering/to-datahub-user","series":{"data":{"allMarkdownRemark":{"edges":[]}}},"categoryPosts":{"data":{"allMarkdownRemark":{"edges":[{"node":{"id":"dec9e599-9444-556f-99ba-7a1dc27a4dbb","excerpt":"안녕하세요, 박민재입니다. 혹시 Data Discovery에 중요성을 느껴, DataHub를 사용하려고 하시는 분이 있나요? 아마 그렇다면 DataHub를 도입한 사례를 몇 개 읽어 보셨을꺼라 생각합니다. 대표적으로 국내 기업에서는 뱅크샐러드, 소카, 베이글코드 등에서 성공적으로 도입한 사례들을 회사 사이트에 올리는 경우를 확인 할 수 있었어요. SOCAR BankSalad BagelCode DataHub…","frontmatter":{"date":"2025-03-02","tags":["Data-Engineering"],"path":"/data-engineering/to-datahub-user","title":"DataHub 도입을 고려 하시는 분들에게","img":"/post_image/thumbnail/to-datahub-user.webp","summary":"DataHub를 도입 하려고 할 때 알아야 할 점"}}},{"node":{"id":"24718dd5-aa23-578b-aa81-0ca11fcc0f06","excerpt":"안녕하세요, 박민재입니다. 저번 시간에는 Spark Operator가 무엇인지 간단하게 알아 보았는데요, 이번 시간에는 실제로 Spark Operator Helm Chart를 설치하여, Spark Operator 관련 구동 준비를 한 후, Spark Operator 관련 Resource를 작성 하여 실제 Job을 제출 해 보는 시간을 가져 보도록 하겠습니다. Spark Operator Helm Chart Spark Operator…","frontmatter":{"date":"2025-02-02","tags":["Data-Engineering"],"path":"/data-engineering/spark-operator-2","title":"Spark Operator - 2. Practice","img":"/post_image/thumbnail/spark-operator.jpg","summary":"Spark Operator를 사용 해 보자."}}},{"node":{"id":"9ec3e659-5978-5311-b4d5-fc9d0902e008","excerpt":"안녕하세요, 박민재입니다. 아마 2년 전 즈음에 Spark on Kubernetes 관련 내용을 다뤘었는데요 (이 글 또한, 개정판을 작성 해 볼게요), 이번에는 Spark Job을 Kubernetes Cluster에 편리하게 제출할 수 있게 하는 Spark Operator에 대해 알아 보도록 하겠습니다. Spark on Kubernetes를 사용하는 이유? 그렇다고, 이 글에서 아예 설명 하지 않고 넘어가는 것은 아닌 것 같아, Spark…","frontmatter":{"date":"2025-01-19","tags":["Data-Engineering"],"path":"/data-engineering/spark-operator-1","title":"Spark Operator - 1. Spark Operator란?","img":"/post_image/thumbnail/spark-operator.jpg","summary":"Kubernetes Cluster로의 Spark Job 제출을 도와주는 Spark Operator가 무엇 인지 알아보자."}}},{"node":{"id":"2001438a-fe37-5b3c-8954-bce7d5e18a7a","excerpt":"안녕하세요? 박민재입니다. 오늘은 Iceberg Table을 관리하는 방법 중 하나인, Branching & Tagging 그리고 Rollback Action에 대해서 알아 보도록 하겠습니다. Isolation of Changes with Branches Iceberg에서는 git과 같은 방식으로 Branch를 만들어, 데이터 변경 사항을 관리 할 수 있습니다. 우리의 사례로 빗대어 보면 H/W 이슈, 혹은 Application…","frontmatter":{"date":"2025-01-03","tags":["Data-Engineering"],"path":"/data-engineering/iceberg-table-management-2","title":"Iceberg Table Management - 2. Branching, Tagging & Rollback","img":"/post_image/thumbnail/iceberg-table-management.png","summary":"Branching, Tagging & Rollback을 통해 Iceberg Table을 관리 해 보자"}}}]}}}}},"staticQueryHashes":["3819017183","63159454"],"slicesMap":{}}