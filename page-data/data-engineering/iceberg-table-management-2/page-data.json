{"componentChunkName":"component---src-layouts-post-layout-tsx","path":"/data-engineering/iceberg-table-management-2/","result":{"data":{"markdownRemark":{"html":"<p>안녕하세요? 박민재입니다. 오늘은 Iceberg Table을 관리하는 방법 중 하나인, <strong>Branching &#x26; Tagging</strong> 그리고 <strong>Rollback Action</strong>에 대해서 알아 보도록 하겠습니다.</p>\n<h3>Isolation of Changes with Branches</h3>\n<p><strong>Iceberg</strong>에서는 <strong>git</strong>과 같은 방식으로 <strong>Branch</strong>를 만들어, 데이터 변경 사항을 관리 할 수 있습니다.</p>\n<p>우리의 사례로 빗대어 보면 H/W 이슈, 혹은 Application 이슈를 통해서 데이터 오염 발생 시에 Branch 생성 후, 오염된 데이터를 수행 한 후에 Main에 merge 하는 형식으로 대응 하는 방법으로 사용 할 수 있습니다.</p>\n<p align=\"center\">\n    <img src=\"/post_image/apache-iceberg/table-management/09.png\" style=\"width:75%;max-width:768px;\"/>\n</p>\n<h3>Table Branching and Tagging</h3>\n<h4>Table Branching</h4>\n<p>Table Branching은 독립적인 <strong>Snapshot Lineage</strong>를 만들 수 있게 합니다. 각 Branch에 대한 설정도 가능한데요, 전 시간에 언급하였던 refs Table을 이용 하여 <strong>최대 스냅샷 수명, 브랜치에 존재해야 하는 최소 스냅샷 수에 대한 설정</strong>도 가능합니다.</p>\n<p>Branch를 만들 수 있기 때문에, <strong>Prod 환경에서도 편하게 데이터 검증을 수행</strong> 할 수 있습니다. 나중에 합병하거나, 버리면 되니까요.</p>\n<p>아래는 Java Code 입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// Using Iceberg Java API</span>\n<span class=\"token comment\">// String to be used as branch name</span>\n<span class=\"token class-name\">String</span> branch <span class=\"token operator\">=</span> <span class=\"token string\">\"ingestion-validation-branch\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// branch 생성</span>\ntable<span class=\"token punctuation\">.</span><span class=\"token function\">manageSnapshots</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n <span class=\"token punctuation\">.</span><span class=\"token function\">createBranch</span><span class=\"token punctuation\">(</span>branch<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 특정 snapshot으로 부터 branch 생성</span>\n <span class=\"token punctuation\">.</span><span class=\"token function\">setMinSnapshotsToKeep</span><span class=\"token punctuation\">(</span>branch<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// Snapshot을 몇 개 까지 keep 할 것인가?</span>\n <span class=\"token punctuation\">.</span><span class=\"token function\">setMaxSnapshotAgeMs</span><span class=\"token punctuation\">(</span>branch<span class=\"token punctuation\">,</span> <span class=\"token number\">3600000</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// Snapshot을 얼마나 유지 할 것인가?</span>\n <span class=\"token punctuation\">.</span><span class=\"token function\">setMaxRefAgeMs</span><span class=\"token punctuation\">(</span>branch<span class=\"token punctuation\">,</span> <span class=\"token number\">604800000</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// Branch의 수명은?</span>\n <span class=\"token punctuation\">.</span><span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Branch에 데이터 작성</span>\ntable<span class=\"token punctuation\">.</span><span class=\"token function\">newAppend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n <span class=\"token punctuation\">.</span><span class=\"token function\">appendFile</span><span class=\"token punctuation\">(</span><span class=\"token constant\">INCOMING_FILE</span><span class=\"token punctuation\">)</span>\n <span class=\"token punctuation\">.</span><span class=\"token function\">toBranch</span><span class=\"token punctuation\">(</span>branch<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 어떤 브랜치에 작성 할 것인지</span>\n <span class=\"token punctuation\">.</span><span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Read from the branch for validation</span>\n<span class=\"token class-name\">TableScan</span> branchRead <span class=\"token operator\">=</span> table\n <span class=\"token punctuation\">.</span><span class=\"token function\">newScan</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n <span class=\"token punctuation\">.</span><span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span>branch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \n<span class=\"token comment\">// Main Branch에 생성 한 Branch 병합</span>\ntable\n  <span class=\"token punctuation\">.</span><span class=\"token function\">manageSnapshots</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">fastForward</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"main\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"ingestion-validation-branch\"</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 만약 데이터가 검증이 완료 되었다면 fastForward 수행</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>SQL문으로도 수행 가능합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token comment\">-- Create the new branch</span>\n<span class=\"token keyword\">ALTER</span> <span class=\"token keyword\">TABLE</span> my_catalog<span class=\"token punctuation\">.</span>my_db<span class=\"token punctuation\">.</span>sales_data\n <span class=\"token keyword\">CREATE</span> BRANCH ingestion<span class=\"token operator\">-</span>validation<span class=\"token operator\">-</span>branch\n RETAIN <span class=\"token number\">7</span> DAYS\n <span class=\"token keyword\">WITH</span> RETENTION <span class=\"token number\">2</span> SNAPSHOTS<span class=\"token punctuation\">;</span>\n \n<span class=\"token keyword\">SET</span> spark<span class=\"token punctuation\">.</span>wap<span class=\"token punctuation\">.</span>branch <span class=\"token operator\">=</span> <span class=\"token string\">'ingestion-validation-branch'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h4>Tagging</h4>\n<p><strong>Tagging</strong>은 <strong>명명된 참조</strong>라고 이해해 주시면 될 것 같습니다. 만약, <strong>특정 Snapshot에 이름을 붙여서 관리</strong> 하고 싶을 경우에는, 이를 이용할 수 있습니다.</p>\n<p>최적의 사용 시나리오는 아래와 같은, <strong>감사 목적으로 중요한 Snapshot을 보관</strong>하거나, 문제 발생 시, 쿼리 재현에 도움을 주기 위해 <strong>특정 시점 Tagging</strong>을 하는 등에 사용 하는 것 입니다.</p>\n<p align=\"center\">\n    <img src=\"/post_image/apache-iceberg/table-management/10.png\" style=\"width:75%;max-width:768px;\"/>\n</p>\n<p>Java 코드 입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// create a tag</span>\n<span class=\"token class-name\">String</span> tag <span class=\"token operator\">=</span> <span class=\"token string\">\"end-of-quarter-Q3FY23\"</span><span class=\"token punctuation\">;</span>\ntable<span class=\"token punctuation\">.</span><span class=\"token function\">manageSnapshots</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n <span class=\"token punctuation\">.</span><span class=\"token function\">createTag</span><span class=\"token punctuation\">(</span>tag<span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// create a tag out of snapshot 8</span>\n <span class=\"token punctuation\">.</span><span class=\"token function\">setMaxRefAgeMs</span><span class=\"token punctuation\">(</span>tag<span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span> <span class=\"token operator\">*</span> <span class=\"token number\">60</span> <span class=\"token operator\">*</span> <span class=\"token number\">60</span> <span class=\"token operator\">*</span> <span class=\"token number\">2486400000</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// set the max age of the tag</span>\n <span class=\"token punctuation\">.</span><span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \n<span class=\"token comment\">// Read from a tag</span>\n<span class=\"token class-name\">String</span> tag <span class=\"token operator\">=</span> <span class=\"token string\">\"end-of-quarter-Q3FY23\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Table</span> tagRead <span class=\"token operator\">=</span> table\n <span class=\"token punctuation\">.</span><span class=\"token function\">newScan</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n <span class=\"token punctuation\">.</span><span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span>tag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>예제 SQL Code 입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token comment\">-- end of week snapshot. 1주일 보관</span>\n<span class=\"token keyword\">ALTER</span> <span class=\"token keyword\">TABLE</span> prod<span class=\"token punctuation\">.</span>db<span class=\"token punctuation\">.</span><span class=\"token keyword\">table</span> <span class=\"token keyword\">CREATE</span> TAG <span class=\"token identifier\"><span class=\"token punctuation\">`</span>EOW-01<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">AS</span> <span class=\"token keyword\">OF</span> VERSION <span class=\"token number\">7</span> RETAIN <span class=\"token number\">7</span> DAYS<span class=\"token punctuation\">;</span>\n \n<span class=\"token comment\">-- end of month snapshot. 6개월 보관</span>\n<span class=\"token keyword\">ALTER</span> <span class=\"token keyword\">TABLE</span> prod<span class=\"token punctuation\">.</span>db<span class=\"token punctuation\">.</span><span class=\"token keyword\">table</span> <span class=\"token keyword\">CREATE</span> TAG <span class=\"token identifier\"><span class=\"token punctuation\">`</span>EOM-01<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">AS</span> <span class=\"token keyword\">OF</span> VERSION <span class=\"token number\">30</span> RETAIN <span class=\"token number\">180</span> DAYS<span class=\"token punctuation\">;</span>\n \n<span class=\"token comment\">-- end of the year snapshot. 평생 보관</span>\n<span class=\"token keyword\">ALTER</span> <span class=\"token keyword\">TABLE</span> prod<span class=\"token punctuation\">.</span>db<span class=\"token punctuation\">.</span><span class=\"token keyword\">table</span> <span class=\"token keyword\">CREATE</span> TAG <span class=\"token identifier\"><span class=\"token punctuation\">`</span>EOY-2023<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">AS</span> <span class=\"token keyword\">OF</span> VERSION <span class=\"token number\">365</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>Rolling Back Changes</h3>\n<p>Iceberg에서는 Tag, Snapshot ID를 기준으로 Rollback 할 수 있는 함수를을 지원 합니다.</p>\n<h4>rollback_to_snapshot</h4>\n<p><strong>Snapshot ID를 기준</strong>으로 <strong>테이블을 Rollback</strong> 할 수 있습니다. 테이블 이름과 롤백 하고자 하는 Snapshot의 ID를 이용 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\">spark<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">(</span><span class=\"token string\">\"CALL catalog.database.rollback_to_snapshot('orders', 12345)\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h4>rollback_to_timestamp</h4>\n<p><strong>Timestamp를 기준</strong>으로 <strong>테이블을 Rollback</strong> 할 수 있습니다. 테이블 이름과 원하는 Timestamp를 입력 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\">spark<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token id function\">s</span><span class=\"token string\">\"CALL iceberg.system.rollback_to_timestamp('db.orders', timestamp('2023-06-01 00:00:00'))\"</span></span><span class=\"token punctuation\">)</span></code></pre></div>\n<h4>set_current_snapshot</h4>\n<p>Currennt Snapshot의 ID를 변경 합니다. Rollback과 다른 점은, <strong>설정 하고자 하는 Snapshot이 Current Snapshot의 조상이 아니어도 가능</strong>합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token comment\">// Update를 수행할 Table</span>\n<span class=\"token keyword\">val</span> tableName <span class=\"token operator\">=</span> <span class=\"token string\">\"db.inventory\"</span>\n \n<span class=\"token comment\">// 대상 Snapshot ID</span>\n<span class=\"token keyword\">val</span> snapshotId <span class=\"token operator\">=</span> <span class=\"token number\">123456789L</span>\n \n<span class=\"token comment\">// current snapshot 변경</span>\nspark<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token id function\">s</span><span class=\"token string\">\"CALL iceberg.system.set_current_snapshot('</span><span class=\"token interpolation\"><span class=\"token punctuation\">$</span><span class=\"token expression\">tableName</span></span><span class=\"token string\">', </span><span class=\"token interpolation\"><span class=\"token punctuation\">$</span><span class=\"token expression\">snapshotId</span></span><span class=\"token string\">)\"</span></span><span class=\"token punctuation\">)</span></code></pre></div>\n<h4>cherrypick_snapshot</h4>\n<p>Git의 <strong>Cherrypick</strong> 처럼, <strong>Current Snapshot에, Target Snapshot ID를 Cherry-picking</strong> 하여, 원본을 변경하거나 제거하지 않고 <strong>기존 Snapshot에서 새로운 Snapshot</strong>을 만듭니다.</p>\n<p>Cherry-picking 하고자 하는 ID가 <strong>Append 혹은 Overwrite 연산</strong> 이어야 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token comment\">// Cherry Pick</span>\nspark<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token id function\">s</span><span class=\"token string\">\"CALL iceberg.system.cherrypick_snapshot('db.products', 987654321)\"</span></span><span class=\"token punctuation\">)</span></code></pre></div>","id":"2001438a-fe37-5b3c-8954-bce7d5e18a7a","frontmatter":{"date":"2025-01-03","path":"/data-engineering/iceberg-table-management-2","title":"Iceberg Table Management - 2. Branching, Tagging & Rollback","tags":["Data-Engineering"],"keyword":"Iceberg,Apache Iceberg,빅데이터,Big Data,Optimization,Management,관리","summary":"Branching, Tagging & Rollback을 통해 Iceberg Table을 관리 해 보자","img":"/post_image/thumbnail/iceberg-table-management.png","series":"Iceberg Table Management"}}},"pageContext":{"postPath":"/data-engineering/iceberg-table-management-2","series":{"data":{"allMarkdownRemark":{"edges":[{"node":{"id":"2001438a-fe37-5b3c-8954-bce7d5e18a7a","excerpt":"안녕하세요? 박민재입니다. 오늘은 Iceberg Table을 관리하는 방법 중 하나인, Branching & Tagging 그리고 Rollback Action에 대해서 알아 보도록 하겠습니다. Isolation of Changes with Branches Iceberg에서는 git과 같은 방식으로 Branch를 만들어, 데이터 변경 사항을 관리 할 수 있습니다. 우리의 사례로 빗대어 보면 H/W 이슈, 혹은 Application…","frontmatter":{"date":"2025-01-03","tags":["Data-Engineering"],"path":"/data-engineering/iceberg-table-management-2","title":"Iceberg Table Management - 2. Branching, Tagging & Rollback","img":"/post_image/thumbnail/iceberg-table-management.png","summary":"Branching, Tagging & Rollback을 통해 Iceberg Table을 관리 해 보자"}}},{"node":{"id":"dcd44de2-0eff-56f8-ac2d-2a99250ab9cf","excerpt":"안녕하세요? 박민재입니다. 오늘은 Iceberg Table을 관리하는 방법을 Metadata Table의 사용을 중심으로 깊게 알아 보도록 하겠습니다. Apache Iceberg의 경우에는 Metadata Table 기능을 매우 강력하게 지원합니다. 이를 통해 Iceberg Table을 운영을 쉽게 수행 할 수 있죠. 예를 들어, Table의 Evolution이 어떻게 진행 되었는지, 파일들이 어떻게 Partitioning…","frontmatter":{"date":"2024-12-05","tags":["Data-Engineering"],"path":"/data-engineering/iceberg-table-management-1","title":"Iceberg Table Management - 1. Metadata Table ","img":"/post_image/thumbnail/iceberg-table-management.png","summary":"Metadata Table을 통해 Iceberg Table을 관리 해 보자"}}}]}}},"categoryPosts":{"data":{"allMarkdownRemark":{"edges":[{"node":{"id":"dec9e599-9444-556f-99ba-7a1dc27a4dbb","excerpt":"안녕하세요, 박민재입니다. 혹시 Data Discovery에 중요성을 느껴, DataHub를 사용하려고 하시는 분이 있나요? 아마 그렇다면 DataHub를 도입한 사례를 몇 개 읽어 보셨을꺼라 생각합니다. 대표적으로 국내 기업에서는 뱅크샐러드, 소카, 베이글코드 등에서 성공적으로 도입한 사례들을 회사 사이트에 올리는 경우를 확인 할 수 있었어요. SOCAR BankSalad BagelCode DataHub…","frontmatter":{"date":"2025-03-02","tags":["Data-Engineering"],"path":"/data-engineering/to-datahub-user","title":"DataHub 도입을 고려 하시는 분들에게","img":"/post_image/thumbnail/to-datahub-user.webp","summary":"DataHub를 도입 하려고 할 때 알아야 할 점"}}},{"node":{"id":"24718dd5-aa23-578b-aa81-0ca11fcc0f06","excerpt":"안녕하세요, 박민재입니다. 저번 시간에는 Spark Operator가 무엇인지 간단하게 알아 보았는데요, 이번 시간에는 실제로 Spark Operator Helm Chart를 설치하여, Spark Operator 관련 구동 준비를 한 후, Spark Operator 관련 Resource를 작성 하여 실제 Job을 제출 해 보는 시간을 가져 보도록 하겠습니다. Spark Operator Helm Chart Spark Operator…","frontmatter":{"date":"2025-02-02","tags":["Data-Engineering"],"path":"/data-engineering/spark-operator-2","title":"Spark Operator - 2. Practice","img":"/post_image/thumbnail/spark-operator.jpg","summary":"Spark Operator를 사용 해 보자."}}},{"node":{"id":"9ec3e659-5978-5311-b4d5-fc9d0902e008","excerpt":"안녕하세요, 박민재입니다. 아마 2년 전 즈음에 Spark on Kubernetes 관련 내용을 다뤘었는데요 (이 글 또한, 개정판을 작성 해 볼게요), 이번에는 Spark Job을 Kubernetes Cluster에 편리하게 제출할 수 있게 하는 Spark Operator에 대해 알아 보도록 하겠습니다. Spark on Kubernetes를 사용하는 이유? 그렇다고, 이 글에서 아예 설명 하지 않고 넘어가는 것은 아닌 것 같아, Spark…","frontmatter":{"date":"2025-01-19","tags":["Data-Engineering"],"path":"/data-engineering/spark-operator-1","title":"Spark Operator - 1. Spark Operator란?","img":"/post_image/thumbnail/spark-operator.jpg","summary":"Kubernetes Cluster로의 Spark Job 제출을 도와주는 Spark Operator가 무엇 인지 알아보자."}}},{"node":{"id":"2001438a-fe37-5b3c-8954-bce7d5e18a7a","excerpt":"안녕하세요? 박민재입니다. 오늘은 Iceberg Table을 관리하는 방법 중 하나인, Branching & Tagging 그리고 Rollback Action에 대해서 알아 보도록 하겠습니다. Isolation of Changes with Branches Iceberg에서는 git과 같은 방식으로 Branch를 만들어, 데이터 변경 사항을 관리 할 수 있습니다. 우리의 사례로 빗대어 보면 H/W 이슈, 혹은 Application…","frontmatter":{"date":"2025-01-03","tags":["Data-Engineering"],"path":"/data-engineering/iceberg-table-management-2","title":"Iceberg Table Management - 2. Branching, Tagging & Rollback","img":"/post_image/thumbnail/iceberg-table-management.png","summary":"Branching, Tagging & Rollback을 통해 Iceberg Table을 관리 해 보자"}}}]}}}}},"staticQueryHashes":["3819017183","63159454"],"slicesMap":{}}