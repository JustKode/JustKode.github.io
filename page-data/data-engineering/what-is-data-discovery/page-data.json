{"componentChunkName":"component---src-layouts-post-layout-tsx","path":"/data-engineering/what-is-data-discovery/","result":{"data":{"markdownRemark":{"html":"<p>안녕하세요? 박민재입니다. 오늘은 <strong>Data Discovery</strong>에 대해서 알아 보도록 하겠습니다.</p>\n<h3>What is Data Discovery?</h3>\n<p><strong>Data Discovery</strong>란 무엇 일까요? <strong>Data Discovery</strong>는 조직 내 <strong>데이터를 찾고 이해하는 프로세스</strong>를 의미 합니다. Data Engineer들은 요구사항을 수행하기 위해, 많은 Data Source에서 <strong>다양한 Data Table</strong>들을 제공하게 됩니다. 하지만, 시간이 오래 지나서 다양한 각 데이터의 히스토리 파악이 어렵게 된다면 <strong>데이터의 사용성</strong> 등에 대해 이슈가 생길 수 있습니다. 즉, <strong>원하는 데이터 혹은 데이터의 의미</strong>를 찾아 내는 <strong>Data Discovery</strong>가 오래 걸리게 되는 문제가 발생 합니다. 그럼 업무 효율도가 확 줄어들게 되겠죠?</p>\n<p>만약 <strong>Data Discovery</strong>의 과정이 원활 하지 않다면, 다음과 같은 문제가 발생 할 것 입니다.</p>\n<ul>\n<li><strong>데이터의 의미</strong>와 <strong>데이터의 원천</strong>을 찾기 위한 <strong>커뮤니케이션 리소스</strong> 증가</li>\n<li>데이터 스키마 등의 변화가 발생 했을 시, <strong>커뮤니케이션을 다시 수행</strong> 하여야 함</li>\n<li>데이터의 의미를 정확히 파악하지 못해, <strong>불필요한 데이터를 분석</strong>하거나, <strong>잘못된 데이터 기반 의사 결정</strong>이 발생 할 수 있음</li>\n</ul>\n<p>원활한 <strong>Data Discovery를 보장</strong>하기 위해서는, 사용자 입장에서는 다음과 같은 정보들이 필요 하게 될 것 입니다.</p>\n<ul>\n<li>Table + Column 정보</li>\n<li>데이터에 대한 설명</li>\n<li>테이블을 관리 하는 사람 혹은 팀의 정보</li>\n<li>테이블 사이의 관계</li>\n</ul>\n<h3>Data Discovery Platform</h3>\n<p>하지만, 이를 Wiki 만으로 관리하는 것은 어려움이 있습니다. 이를 중앙화하여 관리 해 줄 수 있는 플랫폼이 필요하게 되는데요, 우리는 이를 <strong>Data Discovery Platform</strong>이라고 합니다.</p>\n<p><strong>Data Discovery Platform</strong>은 분석 환경에 있는 모든 데이터를 편하고, 쉽게 검색하고, 빠르게 이해할 수 있도록 기능들을 제공하는 플랫폼입니다. <strong>Data Table</strong>의 <strong>Metadata</strong>의 관리 뿐만 아니라, Web UI 환경 제공, 데이터의 구조와 관계 검색 등을 제공합니다.\n즉, <strong>Data Discovery Platform</strong>은 데이터 이용자에게 <strong>어떤 데이터가, 어디에, 어떻게 만들어 졌는지</strong>에 대한 정보를 사용자 친화적으로 제공 합니다.</p>\n<p><strong>Data Discovery Platform</strong>에 대해서 우리가 기대 하는 것은 다음과 같습니다.</p>\n<ul>\n<li>분석 환경 모든 테이블의 <strong>최신 명세를 중앙화</strong>하여 확인 (Metadata of Data Table)</li>\n<li>분석 환경 모든 테이블의 <strong>최신 통계와 샘플 데이터의 확인</strong> (Data Profiling)</li>\n<li>분석 환경 모든 테이블의 <strong>여정</strong>을 확인 (Data Lineage)</li>\n</ul>\n<h3>Open Source</h3>\n<p>가장 유명한 <strong>Data Discovery Platform</strong>으로는 <strong>LinkedIn</strong>에서 만든 <a href=\"https://datahubproject.io/\">DataHub</a>라는 친구가 있습니다.\nKafka, REST API 등을 이용 하여 Metadata의 Update 내용들을 주기적으로 업데이트를 해줄 수 있는 기능이 존재하는데요, 다음 시간에는 <strong>DataHub의 핵심 기능</strong>들에 대해서 다뤄 보도록 하겠습니다.</p>","id":"9a77a751-f1a2-59c2-9065-808620c51bbe","frontmatter":{"date":"2024-03-17","path":"/data-engineering/what-is-data-discovery","title":"Data Discovery란 무엇인가?","tags":["Data-Engineering"],"keyword":"Data Engineering, 데이터 엔지니어링, Data Discovery Platform","summary":"데이터를 찾고 이해하는 프로세스인, Data Discovery에 대하여","img":"/post_image/thumbnail/what-is-data-discovery.jpeg","series":null}}},"pageContext":{"postPath":"/data-engineering/what-is-data-discovery","series":{"data":{"allMarkdownRemark":{"edges":[]}}},"categoryPosts":{"data":{"allMarkdownRemark":{"edges":[{"node":{"id":"2001438a-fe37-5b3c-8954-bce7d5e18a7a","excerpt":"안녕하세요? 박민재입니다. 오늘은 Iceberg Table을 관리하는 방법 중 하나인, Branching & Tagging 그리고 Rollback Action에 대해서 알아 보도록 하겠습니다. Isolation of Changes with Branches Iceberg에서는 git과 같은 방식으로 Branch를 만들어, 데이터 변경 사항을 관리 할 수 있습니다. 우리의 사례로 빗대어 보면 H/W 이슈, 혹은 Application…","frontmatter":{"date":"2025-01-03","tags":["Data-Engineering"],"path":"/data-engineering/iceberg-table-management-2","title":"Iceberg Table Management - 2. Branching, Tagging & Rollback","img":"/post_image/thumbnail/iceberg-table-management.png","summary":"Branching, Tagging & Rollback을 통해 Iceberg Table을 관리 해 보자"}}},{"node":{"id":"dcd44de2-0eff-56f8-ac2d-2a99250ab9cf","excerpt":"안녕하세요? 박민재입니다. 오늘은 Iceberg Table을 관리하는 방법을 Metadata Table의 사용을 중심으로 깊게 알아 보도록 하겠습니다. Apache Iceberg의 경우에는 Metadata Table 기능을 매우 강력하게 지원합니다. 이를 통해 Iceberg Table을 운영을 쉽게 수행 할 수 있죠. 예를 들어, Table의 Evolution이 어떻게 진행 되었는지, 파일들이 어떻게 Partitioning…","frontmatter":{"date":"2024-12-05","tags":["Data-Engineering"],"path":"/data-engineering/iceberg-table-management-1","title":"Iceberg Table Management - 1. Metadata Table ","img":"/post_image/thumbnail/iceberg-table-management.png","summary":"Metadata Table을 통해 Iceberg Table을 관리 해 보자"}}},{"node":{"id":"cbb6e851-d864-5552-86d7-08c81b4a54cc","excerpt":"Intro 안녕하세요, 박민재입니다. 저번 시간에는 Table Optimization을 위한 압축 기법에 대해 배웠습니다. 이번 시간에는 압축을 제외한 Table Optimization 기법을 알아 보도록 하겠습니다. Partitioning 역시, 기존의 방법을 꺼낼 때가 왔습니다. 바로 Partitioning입니다. 동일한 Column의 동일한 Value를 가진 친구들은 같은 File로 묶어 주는 방식이죠. 어? 왜 Directory…","frontmatter":{"date":"2024-11-24","tags":["Data-Engineering"],"path":"/data-engineering/iceberg-table-optimization-2","title":"Iceberg Table의 성능 최적화 - 2. Partitioning, MOR, Others","img":"/post_image/thumbnail/iceberg-table-optimization-1.webp","summary":"File Merge를 통한 성능 최적화에 대해 알아보자."}}},{"node":{"id":"3c44d6b1-b341-5256-bb40-e6a58835b474","excerpt":"Intro 안녕하세요, 박민재입니다. 오늘은 Apache Iceberg의 Table에 수행 되는 쿼리가 최적의 성능으로 작동 될 수 있도록, File Compaction을 통해 이를 수행하는 방법에 대해 이야기 하는 시간을 가져 보도록 하겠습니다. File Compaction 우리가 쿼리를 수행 시, Hive Metastore의 정보를 이용하더라도, 혹은 Iceberg의 Metadata…","frontmatter":{"date":"2024-11-10","tags":["Data-Engineering"],"path":"/data-engineering/iceberg-table-optimization-1","title":"Iceberg Table의 성능 최적화 - 1. 압축","img":"/post_image/thumbnail/iceberg-table-optimization-1.webp","summary":"File Merge를 통한 성능 최적화에 대해 알아보자."}}}]}}}}},"staticQueryHashes":["3819017183","63159454"],"slicesMap":{}}