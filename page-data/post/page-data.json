{"componentChunkName":"component---src-layouts-post-list-layout-tsx","path":"/post","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"id":"003792ad-8b6f-54a2-b695-a83c358d53dd","excerpt":"…","frontmatter":{"date":"2020-06-13","tags":["Machine-Learning","Python"],"path":"/machine-learning/linear_model","title":"Python으로 알아보는 선형 회귀","img":"https://miro.medium.com/max/683/1*h6PuI6-PdPE8d4dTnhcg3w.png","summary":"scikit-learn으로 알아보는 Linear Regression"}}},{"node":{"id":"3f42e43d-c1df-5929-bf44-7dbab0bfa1f2","excerpt":"최단 경로 알고리즘은 지하철 노선도, 네비게이션 등 다방면에 사용되는 알고리즘입니다. 이번 시간에는 Python을 이용해 하나의 시작 정점으로 부터 모든 다른 정점까지의 최단 경로를 찾는 최단 경로 알고리즘인 다익스트라(dijkstra…","frontmatter":{"date":"2020-05-31","tags":["Python","Algorithm"],"path":"/algorithm/python-dijkstra","title":"Python으로 다익스트라(dijkstra) 알고리즘 구현하기","img":"https://ever-line.co.kr/images/use-1-2_img.png","summary":"최단 경로를 찾아보자"}}},{"node":{"id":"29546be3-1a03-54d6-9b13-9d89593d3d63","excerpt":"우리가 가공한 데이터들을  객체에 녹여 내는 것을 성공 했다고 치겠습니다! 이를 바로  등으로 변환하여 학습을 시도 하면 어떻게 될까요? 만약 feature마다 범위가 1-100, 0-1000…","frontmatter":{"date":"2020-05-03","tags":["Data-Science","Python"],"path":"/data-science/pandas-normalization","title":"Pandas에서 데이터 정규화 하기","img":"https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcTQU34oEynvWRbC1FvDCWj8Rn16cCqypKf8q9LKbI0i1SLWtU9e&usqp=CAU","summary":"데이터 전처리 방법 중 하나인 정규화"}}},{"node":{"id":"3e5a78d9-ea4d-5a77-a082-281403358a61","excerpt":"에서 모델의 가중치를 저장하기 위해선 3가지 함수만 알면 충분 합니다. : 객체를 디스크에 저장합니다.  모듈을 이용하여 객체를 직렬화 하며, 이 함수를 사용하여 모든 종류의 모델, Tensor 등을 저장할 수 있습니다. :  모듈을 이용하여 객체를 역직렬화하여 메모리에 할당합니다. : 역직렬화된 state_dict를 사용, 모델의 매개변수들을 불러옵니다. state_dict는 간단히 말해 각 체층을 매개변수 Tensor로 매핑한 Python…","frontmatter":{"date":"2020-04-26","tags":["Deep-Learning","Python"],"path":"/deep-learning/pytorch-save","title":"Pytorch에서 학습한 모델 저장 및 불러오기","img":"/post_image/pytorch-save.png","summary":"Pytorch 모델을 저장하고, 불러와 보기"}}},{"node":{"id":"5b3a68c4-e85a-53a8-bfa3-56882e6e8a3a","excerpt":"…","frontmatter":{"date":"2020-04-21","tags":["Python"],"path":"/python/try-except","title":"Python에서 try, except, raise로 예외 처리 하기.","img":"https://media.makeameme.org/created/exceptions-exceptions-everywhere-snh6tb.jpg","summary":"Python에서의 예외 처리 방법"}}},{"node":{"id":"ce0ab714-91d8-5592-afc1-72bb2a4c56c4","excerpt":"에서는 과 마찬가지로, 과 관련 된 를 제공합니다. 이를 이용해 손쉽게  네트워크를 구축 할 수 있습니다. Recurrent Neural Network 를 위한 는  입니다. 일단  시퀀스의 각 요소에 대해, 각 레이어에서는 다음 연산을 수행합니다.  Parameters : 의 사이즈에 해당 하는 수를 입력하면 됩니다. : 은닉층의 사이즈에 해당 하는 수를 입력하면 됩니다. : 의 은닉층 레이어 갯수를 나타냅니다. 기본 값은…","frontmatter":{"date":"2020-04-19","tags":["Deep-Learning","Python"],"path":"/deep-learning/pytorch-rnn","title":"Pytorch로 RNN, LSTM 구현하기","img":"https://lionbridge.ai/wp-content/uploads/2020/03/2020-02-21_difference-between-cnn-rnn-1.png","summary":"자연어 처리, 감성 분류 등에 사용되는 RNN, LSTM"}}}]}},"pageContext":{"limit":6,"skip":0,"numPages":3,"currentPage":1}}}