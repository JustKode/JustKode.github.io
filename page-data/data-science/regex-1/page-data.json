{"componentChunkName":"component---src-layouts-post-layout-tsx","path":"/data-science/regex-1","result":{"data":{"markdownRemark":{"html":"<p>그렇습니다. 지긋지긋한 <strong>정규 표현식</strong> 입니다. 막상 공부하자니 귀찮고, 거부감도 드는 그런 녀석입니다. 생긴 것도 기분 나쁘게 생겨가지고. 하지만 이 친구, 사실 한 번 알면 그렇게 어려운 친구도 아니고, 하드 코딩을 하는 당신의 손목의 피로감을 줄여 줄 수 있습니다.</p>\n<p>정규 표현식은 다양한 곳에 사용 될 수 있습니다. <strong>자연어 데이터 전처리, 이메일 검증, 비밀번호 검증</strong> 등 많은 곳에서 사용하여, <strong>프론트앤드 개발자, 백앤드 개발자, 데이터 사이언티스트</strong> 등등 모두에게 중요 합니다. 너무 어렵게 생각하지 말고, 한 번 시작해볼까요?</p>\n<p align=\"center\">\n\t<img src=\"/post_image/regex/1-1.png\" width=\"80%\"/>\n\t<p align=\"center\" style=\"color:#888888; font-size: 12px;\">\n\t\t근데 솔직히 킹받게 생겼네요 진짜\n\t</p>\n</p>\n<h2>일단 기초부터 차근차근</h2>\n<p>일단 <strong>기본 문법</strong>부터 차근차근 나아가 보겠습니다. 우리가 영어를 읽을 때 단어를 알아도, 어떻게 읽는지 모르면 다 소용이 없습니다. 시작 해 보겠습니다.</p>\n<h3>문자클래스, <code class=\"language-text\">[]</code></h3>\n<p><code class=\"language-text\">[]</code>는 문자클래스를 선언하는데 사용 합니다. 이는 그 내부에 해당하는 문자열 중 하나를 고르겠다는 이야기 입니다.</p>\n<h4>[(문자의 나열)]</h4>\n<ul>\n<li><code class=\"language-text\">[ab]</code>: <strong>a, b중 하나를 선택</strong>한다는 이야기 입니다.</li>\n<li><code class=\"language-text\">[abd]</code>: <strong>a, b, d중 하나를 선택</strong>한다는 이야기 입니다.</li>\n</ul>\n<p>[abd] 예시</p>\n<blockquote>\n<p>JustKo<strong>d</strong>e, who n<strong>a</strong>me<strong>d</strong> Min J<strong>a</strong>e P<strong>a</strong>rk is super <strong>bab</strong>o. He not good <strong>a</strong>t english. So, He stu<strong>d</strong>ie<strong>d</strong> english h<strong>a</strong>r<strong>d</strong>. From re<strong>ad</strong>ing to writing, every<strong>da</strong>y he struggled. S<strong>ad</strong>ly, he is still we<strong>a</strong>k <strong>a</strong>t english wor<strong>d</strong>s. Yes, The <strong>ab</strong>ove story is my story. So, If you <strong>a</strong>re goo<strong>d a</strong>t english, C<strong>a</strong>ll me!, justko<strong>d</strong>e@k<strong>a</strong>k<strong>a</strong>o.com</p>\n</blockquote>\n<h4>[(문자)-(문자)]</h4>\n<ul>\n<li><code class=\"language-text\">[a-z]</code>: <strong>ASCII 코드</strong>상 <strong>a와 z사이</strong> 모든 문자를 선택 합니다.</li>\n<li><code class=\"language-text\">[A-Za-z]</code>: <strong>ASCII 코드</strong>상 <strong>A와 Z사이, a와 z사이</strong> 모든 문자를 선택 합니다.</li>\n</ul>\n<p>[A-Za-z] 예시</p>\n<blockquote>\n<p><strong>JustKode</strong>, <strong>who named Min Jae Park is super babo</strong>. <strong>He not good at english</strong>. <strong>So</strong>, <strong>He studied english hard</strong>. <strong>From reading to writing</strong>, <strong>everyday he struggled</strong>. <strong>Sadly</strong>, <strong>he is still weak at english words</strong>. <strong>Yes</strong>, <strong>The above story is my story</strong>. <strong>So</strong>, <strong>If you are good at english</strong>, <strong>Call me</strong>!, <strong>justkode</strong>@<strong>kakao</strong>.<strong>com</strong></p>\n</blockquote>\n<h4>[^(클래스 조합)]</h4>\n<ul>\n<li><code class=\"language-text\">[^A-Za-z]</code>: <strong>ASCII 코드</strong>상 <strong>A와 Z사이, a와 z사이를 제외한</strong> 모든 문자를 선택 합니다.</li>\n</ul>\n<p>[^A-Za-z] 예시</p>\n<blockquote>\n<p>JustKode<strong>,</strong> who named Min Jae Park is super babo<strong>.</strong> He not good at english<strong>.</strong> So<strong>,</strong> He studied english hard<strong>.</strong> From reading to writing<strong>,</strong> everyday he struggled<strong>.</strong> Sadly<strong>,</strong> he is still weak at english words<strong>.</strong> Yes<strong>,</strong> The above story is my story<strong>.</strong> So<strong>,</strong> If you are good at english<strong>,</strong> Call me!<strong>,</strong> justkode<strong>@</strong>kakao.com</p>\n</blockquote>\n<h3>특수 문자 <code class=\"language-text\">\\</code></h3>\n<p><code class=\"language-text\">\\</code>는 다양한 용도로 사용 됩니다. <code class=\"language-text\">[0-9]</code> 같은 문구를 쓰지 않고 <code class=\"language-text\">\\d</code>처럼 간단하게 원하는 문자열을 찾을 수 있게 해 줍니다. 밑에 예시를 들어 드리겠습니다.</p>\n<ul>\n<li><code class=\"language-text\">\\^</code>: 특수문자 \"\\\"를 입력 할 수 있게 해 줍니다.</li>\n<li>\n<p><code class=\"language-text\">\\b</code>: 단어의 <strong>처음 혹은 끝에 있는 문자 혹은 문자 클래스</strong>를 검출 합니다.</p>\n<ul>\n<li>\n<p>만약 <code class=\"language-text\">s\\b</code> 라면</p>\n<blockquote>\n<p>she sell<strong>s</strong> seashell<strong>s</strong></p>\n</blockquote>\n</li>\n<li>\n<p>만약 <code class=\"language-text\">\\bs</code> 라면</p>\n<blockquote>\n<p><strong>s</strong>he <strong>s</strong>ells <strong>s</strong>eashells</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">\\B</code>: 단어의 <strong>처음 혹은 끝에 있지 않은 문자 혹은 문자 클래스</strong>를 검출 합니다.</p>\n<ul>\n<li>\n<p>만약 <code class=\"language-text\">s\\B</code> 라면</p>\n<blockquote>\n<p><strong>s</strong>he <strong>s</strong>ells <strong>s</strong>ea<strong>s</strong>hells</p>\n</blockquote>\n</li>\n<li>\n<p>만약 <code class=\"language-text\">\\Bs</code> 라면</p>\n<blockquote>\n<p>she sell<strong>s</strong> sea<strong>s</strong>hell<strong>s</strong></p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">\\d</code>: <strong>숫자</strong>를 찾습니다. </p>\n<blockquote>\n<p>My Number is <strong>010</strong>-<strong>1010</strong>-<strong>1010</strong></p>\n</blockquote>\n</li>\n<li>\n<p><code class=\"language-text\">\\D</code>: <strong>숫자가 아닌 것</strong>을 찾습니다.</p>\n<blockquote>\n<p><strong>My Number is</strong> 010<strong>-</strong>1010<strong>-</strong>1010</p>\n</blockquote>\n</li>\n<li>\n<p><code class=\"language-text\">\\s</code>: <strong>공백문자</strong>를 찾습니다.</p>\n<blockquote>\n<p>Hello,<u> </u>World!</p>\n</blockquote>\n</li>\n<li>\n<p><code class=\"language-text\">\\S</code>: <strong>공백문자가 아닌 것</strong>을 찾습니다.</p>\n<blockquote>\n<p><strong>Hello, World!</strong></p>\n</blockquote>\n</li>\n<li>\n<p><code class=\"language-text\">\\t</code>: <strong>Tab</strong> 문자를 찾습니다.</p>\n<blockquote>\n<p>Hello,<u>\t</u>World!</p>\n</blockquote>\n</li>\n<li>\n<p><code class=\"language-text\">\\w</code>: <strong>알파벳 + 숫자 + _</strong>를 찾습니다.</p>\n<blockquote>\n<p><strong>justkode</strong>@<strong>kakao</strong>.<strong>com</strong></p>\n</blockquote>\n</li>\n<li>\n<p><code class=\"language-text\">\\W</code>: <strong>알파벳 + 숫자 + _</strong>가 아닌 것을 찾습니다.</p>\n<blockquote>\n<p>justkode<strong>@</strong>kakao<strong>.</strong>com</p>\n</blockquote>\n</li>\n</ul>\n<h3>Meta 문자</h3>\n<ul>\n<li>\n<p><code class=\"language-text\">^x</code>: 문자열이 <strong>x</strong>로 시작합니다.</p>\n<ul>\n<li>\n<p><code class=\"language-text\">^x</code></p>\n<blockquote>\n<p><strong>x</strong>y and xz</p>\n</blockquote>\n</li>\n<li>\n<p><code class=\"language-text\">^\\w</code></p>\n<blockquote>\n<p><strong>S</strong>imple is best</p>\n</blockquote>\n</li>\n<li>\n<p><code class=\"language-text\">^\\w+</code></p>\n<blockquote>\n<p><strong>Simple</strong> is best</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">x$</code>: 문자열이 <strong>x</strong>로 끝납니다.</p>\n<ul>\n<li>\n<p><code class=\"language-text\">x$</code></p>\n<blockquote>\n<p>xy y<strong>x</strong></p>\n</blockquote>\n</li>\n<li>\n<p><code class=\"language-text\">\\w$</code></p>\n<blockquote>\n<p>Simple is bes<strong>t</strong></p>\n</blockquote>\n</li>\n<li>\n<p><code class=\"language-text\">\\w+$</code></p>\n<blockquote>\n<p>Simple is <strong>best</strong></p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">.</code>: <strong>임의의 한 문자</strong>를 나타냅니다.</p>\n<ul>\n<li>\n<p><code class=\"language-text\">.</code></p>\n<blockquote>\n<p><strong>Simple is best</strong></p>\n</blockquote>\n</li>\n<li>\n<p><code class=\"language-text\">.s</code></p>\n<blockquote>\n<p>Simple <strong>is</strong> b<strong>es</strong>t</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">x+</code>: <strong>x</strong>가 1번이상 반복합니다.</p>\n<ul>\n<li>\n<p><code class=\"language-text\">i+</code></p>\n<blockquote>\n<p>rea<strong>l</strong> i<strong>ll</strong>ness</p>\n</blockquote>\n</li>\n<li>\n<p><code class=\"language-text\">\\w+</code></p>\n<blockquote>\n<p><strong>justkode</strong>@<strong>kakao</strong>.<strong>com</strong></p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">x?</code>: <strong>x가 있거나 없는 것</strong>을 나타 냅니다.</p>\n<ul>\n<li>\n<p><code class=\"language-text\">colou?r</code></p>\n<blockquote>\n<p><strong>color</strong> <strong>colour</strong> coloor</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">x*</code>: <strong>x가 0번 이상 반복</strong> 된다는 것을 나타 냅니다.</p>\n<ul>\n<li>\n<p><code class=\"language-text\">co*</code></p>\n<blockquote>\n<p><strong>c</strong>l <strong>co</strong>l <strong>coo</strong>l <strong>cooo</strong>l <strong>coooo</strong>l</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">x|y</code>: <strong>x 또는 y</strong>를 나타냅니다.</p>\n<ul>\n<li>\n<p><code class=\"language-text\">b(a|e)d</code></p>\n<blockquote>\n<p><strong>bad</strong> <strong>bed</strong> bid</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">(xy)</code>: () 안의 내용을 <strong>그룹화</strong> 합니다.</p>\n<ul>\n<li>\n<p><code class=\"language-text\">(lol)|(ha)</code></p>\n<blockquote>\n<p><strong>ha haha hahaha</strong>! <strong>lol lol</strong>ol <strong>lol</strong>o<strong>lol</strong></p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">x{n}</code>: <strong>x를 n번 반복</strong>한 문자를 찾습니다.</p>\n<ul>\n<li>\n<p><code class=\"language-text\">(ha){3}</code></p>\n<blockquote>\n<p>haha <strong>hahaha</strong> <strong>hahaha</strong>ha</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">x{n,}</code>: <strong>x를 n번 이상 반복</strong>한 문자를 찾습니다.</p>\n<ul>\n<li>\n<p><code class=\"language-text\">(ha){3,}</code></p>\n<blockquote>\n<p>haha <strong>hahaha</strong> <strong>hahahaha</strong></p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">x{n,m}</code>: <strong>x를 n번 이상, m번 이하 반복</strong>한 문자를 찾습니다.</p>\n<ul>\n<li>\n<p><code class=\"language-text\">(ha){2,3}</code></p>\n<blockquote>\n<p><strong>haha</strong> <strong>hahaha</strong> <strong>hahaha</strong>ha</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<h2>예시를 통해 알아 봤으니, 우리가 한 번 만들어 볼 차례 입니다!</h2>\n<p>위에 나열되 있는 정규 표현식 기호들을 보니, 이것들을 어떻게 외울지 막막해 보입니다. 하지만, <strong>직접 만들면서 하나하나 그 뜻을 이해해 보면</strong> 어렵지 않을 것 입니다! 한 번, 여러 가지 예시들을 통해, 복습 해 보겠습니다.</p>\n<h3>전화번호 정규식</h3>\n<p><strong>전화번호 정규식</strong>을 만들어 볼까요? 전화번호 예시를 보겠습니다.</p>\n<blockquote>\n<p>010-1234-5678, 031-123-4567, 02-1234-5678</p>\n</blockquote>\n<p>우리는 위 예시를 보고, 다음과 같은 특징이 있음을 알 수 있습니다.</p>\n<ul>\n<li>숫자 2~3 개로 시작: <code class=\"language-text\">\\d{2,3}</code></li>\n<li>기호 <strong>'-'</strong> 가 등장: <code class=\"language-text\">-</code></li>\n<li>숫자 3~4개 등장: <code class=\"language-text\">\\d{3, 4}</code></li>\n<li>기호 <strong>'-'</strong> 가 등장: <code class=\"language-text\">-</code></li>\n<li>숫자 4개 등장 후 끝: <code class=\"language-text\">\\d{4}</code></li>\n</ul>\n<p>결과: <code class=\"language-text\">\\d{2,3}-\\d{3,4}-\\d{4}</code></p>\n<blockquote>\n<p><strong>010-1234-5678</strong>, <strong>031-123-4567</strong>, <strong>02-1234-5678</strong></p>\n</blockquote>\n<h3>이메일 정규식</h3>\n<p>다음과 같은 이메일의 특징은 다음과 같습니다.</p>\n<blockquote>\n<p>My Email is justkode@kakao.com, sobu0715@gmail.com</p>\n</blockquote>\n<ul>\n<li>아이디에는 <strong>알파벳, 숫자만</strong> 들어 갈 수 있다.: <code class=\"language-text\">[0-9a-zA-Z]+</code></li>\n<li><strong>'@'</strong> 기호가 추가 된다.: <code class=\"language-text\">@</code></li>\n<li>사이트 이름에도 <strong>알파벳, 숫자만</strong> 들어 갈 수 있다.: <code class=\"language-text\">[0-9a-zA-Z]+</code></li>\n<li><strong>'.'</strong> 기초가 추가 된다. <code class=\"language-text\">\\.</code></li>\n<li>마찬가지로 최상위 도메인에는 <strong>알파벳, 숫자만</strong> 들어 갈 수 있다. 하지만 글자가 2개 이상 이어야 한다.: <code class=\"language-text\">[0-9a-zA-Z]{2,}</code></li>\n</ul>\n<p>결과: <code class=\"language-text\">[0-9a-zA-Z]+@[0-9a-zA-Z]+\\.[0-9a-zA-Z]{2,}</code></p>\n<blockquote>\n<p>My Email is <strong>justkode@kakao.com</strong>, <strong>sobu0715@gmail.com</strong></p>\n</blockquote>\n<h2>마치며</h2>\n<p>이렇게 오늘은 <strong>정규 표현식</strong>에 알아 보는 기회를 가졌습니다. 하지만, 더 중요한 것은, 보고 해석하는 것도 좋지만, <strong>우리가 직접 만들어서</strong> 정규 표현식을 원활하게 사용 할 수 있어야 더 좋습니다. 아래 사이트들은 정규 표현식을 실제로 작성해 보고, 테스트 해볼 수 있는 사이트, 또는 정규 표현식에 대해 더 자세히 배울 수 있는 사이트들 입니다. 여기까지 따라 오느라 고생 하셨습니다!</p>\n<ul>\n<li><a href=\"regexr\">https://regexr.com/</a>, 정규식을 작성해 보고, 테스트 해볼 수 있습니다.</li>\n<li><a href=\"regexone\">https://regexone.com/</a>, 정규식을 하나하나 치면서 배울 수 있는 사이트, 여러분도 복습 해 보세요!</li>\n<li><a href=\"regexper\">https://regexper.com</a>, 정규식을 시각 화 할 수 있습니다.</li>\n</ul>","id":"b944610e-9fd9-5936-906e-0bab4b9861ea","frontmatter":{"date":"2020-08-01","path":"/data-science/regex-1","title":"정규 표현식(RegEx)을 이해 해보자!","tags":["Data-Science"],"keyword":"정규표현식, regex, 정규표현식 정리, 정규표현식 해석","summary":"이제는 이해하고, 사용해보자!","img":"https://www.onely.com/wp-content/uploads/blog/2017/principles-regular-expressions-seo/003-picard-now-i-have-two-problems.jpg","series":null}}},"pageContext":{"series":{"data":{"allMarkdownRemark":{"edges":[]}}},"categoryPosts":{"data":{"allMarkdownRemark":{"edges":[{"node":{"id":"e708c84f-fcff-5de6-9204-de9a7569750c","excerpt":"Deep Neural Network 안녕하세요? 오늘은 DNN, Deep Neural Network에 대해서 알아 보도록 하겠습니다. 여태까지 우리는 간단한 선형 모델에 대해서만 학습을 진행 하였습니다.  (혹은 ) 와 같이, 선형 연산을 통해서, 데이터에 대해서 예측하고, 분류 해 보는 실습을 진행 하였습니다. 하지만, 이러한 선형적인 모델이 비선형적인 문제를 해결 하려면 어떻게 해야 할까요? 일단 간단한 예제를 생각 해 보겠습니다. XOR…","frontmatter":{"date":"2021-07-29","tags":["Data-Science","Deep-Learning"],"path":"/data-science/just-data-science-9","title":"[찍먹 Data Science] 9. Deep Neural Network","img":"/post_image/thumbnail/just-data-science-9.jpg","summary":"딥러닝의 기초, DNN에 대해서 알아 보자."}}},{"node":{"id":"a272e5eb-daef-505b-91e4-ddb97a4caf45","excerpt":"Normalization, PCA 안녕하세요? Justkode 입니다. 이번 시간에는 Normalization (정규화)와, 차원 축소를 위한 PCA에 대해 공부 해 보는 시간을 가져 보도록 하겠습니다. 정규화와 차원 축소는 기계 학습에서 중요 한 요소 입니다. 학습에서 직접적인 영향을 주기 때문이죠. Normalization 저번에 Linear Regression의 Cost Function에 대한 미분을 하게 되면, Input Vector…","frontmatter":{"date":"2021-07-25","tags":["Data-Science","Machine-Learning"],"path":"/data-science/just-data-science-8","title":"[찍먹 Data Science] 8. Normalization, PCA","img":"/post_image/thumbnail/just-data-science-8.jpg","summary":"값의 범위를 줄이고, 차원을 효율 적으로 줄여보자."}}},{"node":{"id":"8276c1fb-09d2-5fea-a583-b11d7ca961a3","excerpt":"SVM, K-NN, Random Forest 안녕하세요? Justkode 입니다. 저번 시간에는 선형 회귀와 분류에 대해 공부 해 보았습니다. 그런데 Logistic Regression…","frontmatter":{"date":"2021-07-21","tags":["Data-Science","Machine-Learning"],"path":"/data-science/just-data-science-7","title":"[찍먹 Data Science] 7. SVM, K-NN, Random forest","img":"/post_image/thumbnail/just-data-science-7.jpg","summary":"자주 사용 되는 ML 모델을 사용 해 보자."}}},{"node":{"id":"a15e6d2e-d923-5e8e-9bb9-ae1c7116c1bc","excerpt":"Linear Regression, Classification 안녕하세요? Justkode 입니다. 오늘은 선형 회귀와 분류에 대해 이론을 공부 해 보고, 실습을 진행 해 보는 시간을 가져 보도록 하겠습니다. Before we start 먼저 이번 실습에는  모듈이 필요합니다. 다음을 통해 설치 해 주세요. (단, numpy, pandas, matplotlib이 설치 되어 있다면 scikit-learn만 설치 하셔도 됩니다.) Linear…","frontmatter":{"date":"2021-07-21","tags":["Data-Science","Machine-Learning"],"path":"/data-science/just-data-science-6","title":"[찍먹 Data Science] 6. Linear Regression, Logistic Regression","img":"/post_image/thumbnail/just-data-science-6.jpg","summary":"선형 회귀와 로지스틱 회귀에 대해서 알아 보자."}}}]}}}}},"staticQueryHashes":["234633779","63159454"]}