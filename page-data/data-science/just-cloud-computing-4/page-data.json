{"componentChunkName":"component---src-layouts-post-layout-tsx","path":"/data-science/just-cloud-computing-4","result":{"data":{"markdownRemark":{"html":"<h2>AWS의 Database</h2>\n<p>안녕하세요? <strong>Justkode</strong> 입니다. 이번 시간에는 <strong>AWS의 Database</strong>에 대해서 공부 해 보는 시간을 가져 보도록 하겠습니다. AWS에서 사용하는 <strong>Database</strong>는 두 가지가 있습니다.</p>\n<h2>DynamoDB</h2>\n<p>첫 번째는 <strong>DynamoDB</strong> 입니다. 이는 <strong>AWS</strong>의 대표격으로 사용 되는 데이터베이스이며, <strong>NoSQL Database</strong> 중 하나 입니다. 여기서 <strong>NoSQL</strong>은 무엇이냐 하면, 말 그대로 <strong>표준 SQL 인터페이스를 차용하지 않은 데이터베이스</strong>를 뜻하며, 정형화 된 데이터가 아니기 때문에 <strong>많은 데이터를 읽고 쓰는데에 능한</strong> 데이터베이스 입니다.</p>\n<p><strong>DynamoDB</strong>는 데이터 접근을 위해 <strong>Key-Value</strong> 방식을 이용 하고, 데이터 타입으로는 <strong>JSON</strong>을 이용 합니다. 특정 <strong>Key</strong>를 통해, 그 내부에 있는 데이터에 접근하는 방식이죠. 이를 통해, <strong>Key</strong> 값만 알면 특정 데이터에 빠르게 접근 할 수 있습니다. 하지만, 데이터가 <strong>스키마로 정형화 되지는 않았기 때문</strong>에 <strong>복잡한 쿼리</strong>문에는 적합 하지 않습니다.</p>\n<p>일단 <a href=\"https://ap-northeast-2.console.aws.amazon.com/dynamodb/home?region=ap-northeast-2\">DynamoDB 대시보드</a>로 접속 합니다. 그러면 다음과 같이 <strong>테이블 만들기</strong>가 보이는 것을 볼 수가 있습니다. 한 번 클릭 해 볼까요?</p>\n<p align=\"center\">\n\t<img src=\"/post_image/just-cloud-computing/04-01.png\" width=\"90%\"/>\n  <p align=\"center\" style=\"color:#888888; font-size: 12px;\">\n\t\t테이블 만들기 클릭\n\t</p>\n</p>\n<p>그러면 다음과 같이 <strong>DynamoDB 테이블 만들기</strong> 창이 뜨게 됩니다. <strong>테이블 이름</strong>에는 원하는 테이블 이름을 작성 하면 되고, <strong>기본 키 - 파티션 키</strong>에는 <strong>고유 키</strong>로 삼고 싶은 속성을 입력 하면 됩니다. 만약 <strong>정렬 키 추가</strong>를 통해 <strong>정렬 키</strong>를 입력 하시게 되면, 나중에 데이터를 참조할 때, 정렬 기준으로써 사용 할 수 있습니다.</p>\n<p align=\"center\">\n\t<img src=\"/post_image/just-cloud-computing/04-02.png\" width=\"90%\"/>\n  <p align=\"center\" style=\"color:#888888; font-size: 12px;\">\n\t\t테이블 이름, 기본 키 입력\n\t</p>\n</p>\n<p>위에 있는 <strong>테이블 설정 - 기본 설정 사용</strong>을 체크 해제 하게 되면, 설정 창이 확장 되게 됩니다. 여기서 검색 속도를 향상 시킬 수 있는 <strong>보조 인덱스</strong>와, 읽기/쓰기 용량 모드와 프로비저닝 된 용량, <strong>Auto Scaling</strong>을 설정 할 수 있습니다.</p>\n<p align=\"center\">\n\t<img src=\"/post_image/just-cloud-computing/04-03.png\" width=\"90%\"/>\n  <p align=\"center\" style=\"color:#888888; font-size: 12px;\">\n\t\tAuto Scaling\n\t</p>\n</p>\n<p>유휴 시 암호화는 <strong>저장 된 데이터를 보호하기 위한 정책</strong>을 선택 해 줄 수 있습니다. 이는 키 값을 기반으로 진행합니다. 다 완료 되었다면 생성 버튼을 눌러 주세요.</p>\n<p align=\"center\">\n\t<img src=\"/post_image/just-cloud-computing/04-04.png\" width=\"90%\"/>\n  <p align=\"center\" style=\"color:#888888; font-size: 12px;\">\n\t\t유휴 시 암호화\n\t</p>\n</p>\n<p>자, 생성이 완료 되었다면, <strong>항목</strong> 탭으로 들어가 볼까요? 그러면 다음과 같이 데이터 현황을 볼 수가 있습니다. 현재는 아무런 데이터가 없기 때문에, 조회 할 수 있는 데이터가 없습니다. 한 번 데이터를 추가 해 볼까요? <strong>항목 만들기</strong>를 클릭 해 주세요.</p>\n<p align=\"center\">\n\t<img src=\"/post_image/just-cloud-computing/04-05.png\" width=\"90%\"/>\n  <p align=\"center\" style=\"color:#888888; font-size: 12px;\">\n\t\t항목 만들기 클릭\n\t</p>\n</p>\n<p>그러면 다음과 같이 항목을 입력 할 수 있는 창이 뜹니다. 저는 <strong>테이블 명</strong>에서도 알 수 있다 싶이, 주문 내역이 담긴 테이블을 만들고 싶기 때문에, <strong>order_id, customer</strong> 그 이상의 데이터를 추가 해 주어야 합니다. 왼쪽 상단의 <strong>Tree</strong>를 클릭 하여, <strong>Text</strong>로 바꿔 주세요.</p>\n<p align=\"center\">\n\t<img src=\"/post_image/just-cloud-computing/04-06.png\" width=\"70%\"/>\n  <p align=\"center\" style=\"color:#888888; font-size: 12px;\">\n\t\tTree - Text로 변경\n\t</p>\n</p>\n<p>클릭 하게 되면, 다음과 같이, JSON을 입력 할 수 있는 창이 뜹니다. 저는 다음과 같이, <strong>items</strong> 어트리뷰트를 추가 하여, 해당 어트리뷰트는 <strong>주문 목록이 담겨있는 배열</strong>을 만들도록 하였습니다. 입력이 완료 되셨다면, 저장을 클릭 해 주세요.</p>\n<p align=\"center\">\n\t<img src=\"/post_image/just-cloud-computing/04-07.png\" width=\"90%\"/>\n  <p align=\"center\" style=\"color:#888888; font-size: 12px;\">\n\t\t입력 후, 저장.\n\t</p>\n</p>\n<p>저장 후 테이블을 확인하면 데이터가 추가 된 것을 볼 수가 있습니다.</p>\n<p align=\"center\">\n\t<img src=\"/post_image/just-cloud-computing/04-08.png\" width=\"90%\"/>\n  <p align=\"center\" style=\"color:#888888; font-size: 12px;\">\n\t\t데이터가 추가 된 것을 확인 할 수 있음.\n\t</p>\n</p>\n<p>저는 이에 이어 두 번째 데이터를 위와 같은 방법으로 추가 하도록 하겠습니다.</p>\n<p align=\"center\">\n\t<img src=\"/post_image/just-cloud-computing/04-09.png\" width=\"50%\"/>\n  <p align=\"center\" style=\"color:#888888; font-size: 12px;\">\n\t\t데이터 하나 더 추가\n\t</p>\n</p>\n<p>자! 이제 두 개의 데이터가 있는 테이블이 완성 되었습니다. 그 다음, 우리가 특정 조건을 통해 조회를 하고 싶을 때는 어떻게 해야 할 까요?</p>\n<p align=\"center\">\n\t<img src=\"/post_image/just-cloud-computing/04-10.png\" width=\"90%\"/>\n  <p align=\"center\" style=\"color:#888888; font-size: 12px;\">\n\t\t데이터가 두 개가 된 모습.\n\t</p>\n</p>\n<p><strong>항목</strong>탭의 상단에 있는 검색창에서 <strong>스캔</strong>을 <strong>쿼리</strong>로 바꿔 주고, <strong>파티션 키</strong>에 조회 하고 싶은 정보의 <strong>파티션 키</strong>를 입력 합니다. 여기서는 <strong>order_id</strong>가 되겠네요, 조건을 더 추가하고 싶으면, <strong>필터 추가</strong>를 클릭 합니다. 정보를 다 입력 하셨다면 검색 시작을 통해 조회를 할 수 있습니다. 그러면 아래 사진과 같이 정보가 조회된 모습을 볼 수 있습니다.</p>\n<p align=\"center\">\n\t<img src=\"/post_image/just-cloud-computing/04-12.png\" width=\"90%\"/>\n  <p align=\"center\" style=\"color:#888888; font-size: 12px;\">\n\t\t검색 화면\n\t</p>\n</p>\n<p><strong>DynamoDB의 각 테이블</strong>에 대한 트래픽 정보는 <strong>측정치</strong> 탭을 클릭 하면 조회 할 수 있습니다.</p>\n<p align=\"center\">\n\t<img src=\"/post_image/just-cloud-computing/04-11.png\" width=\"60%\"/>\n  <p align=\"center\" style=\"color:#888888; font-size: 12px;\">\n\t\t항목 만들기 클릭\n\t</p>\n</p>\n<h2>AWS RDS</h2>\n<p><strong>AWS RDS</strong>는 AWS에서 제공하는 <strong>RDBMS Instance</strong> 입니다. <strong>AWS EC2</strong>를 기반으로 작동하며, 테이블 백업, 모니터링, 로그 등에 대한 기능들을 모두 제공 합니다. 그 대신 일반 <strong>AWS RDS</strong>에서 구동하는 가격 보다 비쌉니다. 하지만, 위의 기능들을 <strong>모두 제공</strong> 해 주는 것은 상당한 메리트 입니다.</p>\n<p>일단 <a href=\"https://ap-northeast-2.console.aws.amazon.com/rds/home?region=ap-northeast-2#\">AWS RDS DashBoard</a>에 접속 해 볼까요? 그러면 다음과 같은 화면을 볼 수 있습니다. <strong>데이터베이스 생성</strong>을 클릭 하여, 데이터베이스를 생성해 보죠.</p>\n<p align=\"center\">\n\t<img src=\"/post_image/just-cloud-computing/04-25.png\" width=\"90%\"/>\n  <p align=\"center\" style=\"color:#888888; font-size: 12px;\">\n\t\t데이터베이스 생성 클릭\n\t</p>\n</p>\n<p>그러면 이렇게 데이터베이스 생성 창이 저희를 반겨 주는 것을 볼 수 있습니다. 일단 <strong>데이터베이스 생성 방식</strong>은 <strong>표준 생성</strong>으로 하고, <strong>엔진 옵션 - 엔진 유형</strong>은 <strong>MySQL</strong>로 하겠습니다.</p>\n<p align=\"center\">\n\t<img src=\"/post_image/just-cloud-computing/04-13.png\" width=\"60%\"/>\n  <p align=\"center\" style=\"color:#888888; font-size: 12px;\">\n\t\t데이터베이스 생성 창\n\t</p>\n</p>\n<p><strong>탬플릿</strong>에서는 앞으로 할 DB 설정의 기본 값을 지정 할 수 있습니다. 일단, <strong>프리 티어</strong>를 클릭 해 줍니다. 그렇지 않으면 통장이 거덜 날 수도 있습니다.</p>\n<p align=\"center\">\n\t<img src=\"/post_image/just-cloud-computing/04-26.png\" width=\"90%\"/>\n  <p align=\"center\" style=\"color:#888888; font-size: 12px;\">\n\t\t데이터베이스 생성 창\n\t</p>\n</p>\n<p>그 다음, <strong>설정</strong>에서는 <strong>데이터베이스</strong>의 전반적인 <strong>인스턴스 식별자</strong>(인스턴스 이름), <strong>마스터 사용자 이름</strong>(계정명), 암호(계정 암호)를 입력 할 수 있습니다.</p>\n<p align=\"center\">\n\t<img src=\"/post_image/just-cloud-computing/04-14.png\" width=\"60%\"/>\n  <p align=\"center\" style=\"color:#888888; font-size: 12px;\">\n\t\t계정 관련 세팅 가능\n\t</p>\n</p>\n<p><strong>DB 인스턴스 클래스</strong>에서는 <strong>인스턴스 클래스</strong>를 선택할 수 있으며, 여기서 나오는 클래스들은 <strong>AWS EC2</strong>의 것들과 동일 합니다.</p>\n<p align=\"center\">\n\t<img src=\"/post_image/just-cloud-computing/04-15.png\" width=\"60%\"/>\n  <p align=\"center\" style=\"color:#888888; font-size: 12px;\">\n\t\t인스턴스 클래스 선택\n\t</p>\n</p>\n<p>그 다음, <strong>스토리지</strong>에 대한 세팅을 할 수 있습니다.</p>\n<p align=\"center\">\n\t<img src=\"/post_image/just-cloud-computing/04-16.png\" width=\"60%\"/>\n  <p align=\"center\" style=\"color:#888888; font-size: 12px;\">\n\t\t스토리지 세팅\n\t</p>\n</p>\n<p><strong>연결</strong>에서는 사용할 VPC의 종류를 선택 하여, VPC 내부 인스턴스에 대해서만 내부에 할당 된 아이피를 통해 접근 가능 하게 할 수 있고, 서브넷 그룹은 <strong>AWS EC2</strong>에서 설정 한 것 처럼, 보안 그룹을 선택 할 수 있습니다. <strong>퍼블릭 액세스</strong>는 VPC가 아닌 외부에서의 접근 허용 여부를 물어 봅니다. <strong>VPC 보안 그룹</strong>은 데이터베이스에 대한 액세스를 허용할 <strong>VPC 보안 그룹</strong>을 선택 할 수 있습니다.</p>\n<p align=\"center\">\n\t<img src=\"/post_image/just-cloud-computing/04-17.png\" width=\"60%\"/>\n  <p align=\"center\" style=\"color:#888888; font-size: 12px;\">\n\t\t연결 관련 세팅\n\t</p>\n</p>\n<p>밑에 있는 <strong>추가 구성</strong> 탭에서는 <strong>데이터베이스의 포트</strong>를 설정 할 수 있습니다.</p>\n<p align=\"center\">\n\t<img src=\"/post_image/just-cloud-computing/04-18.png\" width=\"90%\"/>\n  <p align=\"center\" style=\"color:#888888; font-size: 12px;\">\n\t\t포트 설정 창\n\t</p>\n</p>\n<p><strong>백업</strong> 창에서는 백업에 관련 된 사항들을 설정 할 수 있으며, <strong>자동 백업 활성화</strong>의 여부, <strong>백업 보존 기간</strong>의 기간에 대해서 설정 합니다.</p>\n<p align=\"center\">\n\t<img src=\"/post_image/just-cloud-computing/04-19.png\" width=\"60%\"/>\n  <p align=\"center\" style=\"color:#888888; font-size: 12px;\">\n\t\t백업 설정 창\n\t</p>\n</p>\n<p><strong>로그 내보내기</strong>는 <strong>Amazon CloudWatch Logs</strong>로 게시할 로그 유형을 선택 할 수 있습니다.</p>\n<p align=\"center\">\n\t<img src=\"/post_image/just-cloud-computing/04-20.png\" width=\"60%\"/>\n  <p align=\"center\" style=\"color:#888888; font-size: 12px;\">\n\t\t로그 설정 창\n\t</p>\n</p>\n<p>마지막으로, <strong>월별 추정 요금</strong>에서는 <strong>추정 요금을 확인</strong> 할 수 있습니다.</p>\n<p align=\"center\">\n\t<img src=\"/post_image/just-cloud-computing/04-21.png\" width=\"90%\"/>\n  <p align=\"center\" style=\"color:#888888; font-size: 12px;\">\n\t\t추정요금 확인\n\t</p>\n</p>\n<p>이렇게 데이터베이스를 생성하면 <strong>데이터베이스</strong> 항목에서 우리가 방금 만든 데이터베이스가 생성 되는 모습을 볼 수 있습니다. 생성 하기 까지 5~10분이 걸립니다. 생성이 완료 되었다면, 해당 데이터베이스를 클릭 해 주세요</p>\n<p align=\"center\">\n\t<img src=\"/post_image/just-cloud-computing/04-22.png\" width=\"90%\"/>\n  <p align=\"center\" style=\"color:#888888; font-size: 12px;\">\n\t\t데이터베이스 생성 완료\n\t</p>\n</p>\n<p>그러면 우리가 만든 DB의 <strong>엔드포인트</strong>를 확인할 수 있습니다. <strong>엔드포인트</strong> 내용을 복사 해 주세요.</p>\n<p align=\"center\">\n\t<img src=\"/post_image/just-cloud-computing/04-23.png\" width=\"90%\"/>\n  <p align=\"center\" style=\"color:#888888; font-size: 12px;\">\n\t\t엔드포인트 복사\n\t</p>\n</p>\n<p>그 다음, 터미널로 가서, <code class=\"language-text\">MySQL CLI</code>를 이용하여 접속 하면 완료 입니다. 기본 계정은 저희가 세팅때 만들었던 계정을 입력 합니다. 그럼 다음과 같이, MySQL 데이터베이스에 접속에 성공 한 것을 볼 수 있습니다.</p>\n<p>(주의: 먼저 <code class=\"language-text\">MySQL CLI</code>의 설치가 선행 되어야 합니다.)</p>\n<ul>\n<li>\n<p>Input</p>\n<div class=\"gatsby-highlight\" data-language=\"terminal\"><pre class=\"language-terminal\"><code class=\"language-terminal\">mysql -u (마스터 ID) --host (엔드포인트) -P (포트 (기본 값: 3306)) -p</code></pre></div>\n</li>\n</ul>\n<p align=\"center\">\n\t<img src=\"/post_image/just-cloud-computing/04-24.png\" width=\"90%\"/>\n  <p align=\"center\" style=\"color:#888888; font-size: 12px;\">\n\t\t데이터베이스 생성 창\n\t</p>\n</p>\n<h2>DynamoDB에 AWS Lambda 연결 하기</h2>\n<p>일단 <strong>RDS</strong> 같은 경우는 각 언어에서 각 RDBMS에 맞는 <strong>써드 파티 라이브러리</strong>를 이용하여 쉽게 접근이 가능합니다. 하지만 <strong>DynamoDB</strong>는 <strong>AWS 자체 제작 데이터베이스</strong>이기 때문에, <a href=\"https://justkode.kr/data-science/just-cloud-computing-2\">저번 시간</a>에 썼던 <code class=\"language-text\">boto3</code>를 이용 하여야 합니다.</p>\n<p>만약 <strong>외부 코드</strong> 혹은 <strong>AWS Lambda</strong>를 통해 이를 사용하고자 하면 <a href=\"https://justkode.kr/data-science/just-cloud-computing-2\">저번</a>에 이용했던 <strong>AWS IAM</strong>을 사용하여야 합니다. </p>\n<p>외부 코드에서 사용 할 경우에 대해 먼저 설명 드리겠습니다. 기존에 사용하던 <strong>IAM</strong>이 있다면, <strong>AWS IAM</strong>의 정책을 수정 해 주어야 합니다. <strong>IAM - 사용자 - 사용자 선택 - 권한 추가</strong>를 클릭 하여, <strong>AmazonDynamoDBFullAccess</strong>을 추가 해 주세요.</p>\n<p align=\"center\">\n\t<img src=\"/post_image/just-cloud-computing/04-27.png\" width=\"90%\"/>\n\t<p align=\"center\" style=\"color:#888888; font-size: 12px;\">\n\t\tIAM - 사용자 - 사용자 선택 후 '요약' 탭으로 들어가 권한 추가 클릭\n\t</p>\n</p>\n<p align=\"center\">\n\t<img src=\"/post_image/just-cloud-computing/04-28.png\" width=\"90%\"/>\n\t<p align=\"center\" style=\"color:#888888; font-size: 12px;\">\n\t\t기존 정책 직접 연결 - AmazonDynamoDBFullAccess 추가\n\t</p>\n</p>\n<p>만약 <strong>AWS Lambda</strong>에서 실행 하고자 한다면, 다음과 같이 <strong>각 함수 - 구성 - 권한 - 실행 역할</strong>을 클릭하고, <strong>역할 이름</strong>을 클릭 해 주세요.</p>\n<p align=\"center\">\n\t<img src=\"/post_image/just-cloud-computing/04-29.png\" width=\"90%\"/>\n\t<p align=\"center\" style=\"color:#888888; font-size: 12px;\">\n\t\t역할 이름 클릭\n\t</p>\n</p>\n<p>그럼 다음과 같은 창이 뜨게 됩니다. 여기서 <strong>정책 연결</strong>을 클릭 해 주세요.</p>\n<p align=\"center\">\n\t<img src=\"/post_image/just-cloud-computing/04-30.png\" width=\"90%\"/>\n\t<p align=\"center\" style=\"color:#888888; font-size: 12px;\">\n\t\t정책 연결 클릭\n\t</p>\n</p>\n<p>여기서 <strong>AmazonDynamoDBFullAccess</strong>을 추가 해 주면, <strong>Lambda</strong> 상에서 <strong>DynamoDB</strong>에 접근이 가능 합니다.</p>\n<p align=\"center\">\n\t<img src=\"/post_image/just-cloud-computing/04-31.png\" width=\"90%\"/>\n\t<p align=\"center\" style=\"color:#888888; font-size: 12px;\">\n\t\tAmazonDynamoDBFullAccess 추가\n\t</p>\n</p>\n<h3>Code Implement</h3>\n<p>그럼 함수를 한 번 만져 볼까요? 일단, <code class=\"language-text\">GET</code>, <code class=\"language-text\">POST</code> 방식 각각에 대해 처리를 하고자 하기 때문에, 파일을 분리해 주는 것이 코드가 더 깔끔 해 질 것 같습니다. 다음과 같이 <code class=\"language-text\">get_item.py</code>, <code class=\"language-text\">post_item.py</code>를 추가 해 줍니다.</p>\n<p align=\"center\">\n\t<img src=\"/post_image/just-cloud-computing/04-32.png\" width=\"50%\"/>\n\t<p align=\"center\" style=\"color:#888888; font-size: 12px;\">\n\t\tget_item.py, post_item.py 추가\n\t</p>\n</p>\n<p>그 다음에는 각 파일들을 다음과 같이 수정 후 deploy 해 주세요, 코드 설명은 주석에 있습니다.</p>\n<ul>\n<li>lambda_function.py</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> json\n<span class=\"token keyword\">import</span> decimal\n<span class=\"token keyword\">from</span> get_item <span class=\"token keyword\">import</span> get_item\n<span class=\"token keyword\">from</span> post_item <span class=\"token keyword\">import</span> post_item\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">lambda_handler</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> event<span class=\"token punctuation\">[</span><span class=\"token string\">\"httpMethod\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"GET\"</span><span class=\"token punctuation\">:</span>\n        status<span class=\"token punctuation\">,</span> response <span class=\"token operator\">=</span> get_item<span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">[</span><span class=\"token string\">\"queryStringParameters\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># GET 방식 처리, </span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        status<span class=\"token punctuation\">,</span> response <span class=\"token operator\">=</span> post_item<span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">[</span><span class=\"token string\">\"body\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># POST 방식 처리, body 값을 받음.</span>\n    \n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">DecimalEncoder</span><span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">.</span>JSONEncoder<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># Decimal 타입의 데이터를 int 형으로 변환 하기 위함.</span>\n        <span class=\"token keyword\">def</span> <span class=\"token function\">default</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> o<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">,</span> decimal<span class=\"token punctuation\">.</span>Decimal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">return</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>DecimalEncoder<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>default<span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span>\n        \n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">\"statusCode\"</span><span class=\"token punctuation\">:</span> status<span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"body\"</span><span class=\"token punctuation\">:</span> json<span class=\"token punctuation\">.</span>dumps<span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">,</span> cls<span class=\"token operator\">=</span>DecimalEncoder<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># json으로 </span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>get_item.py</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> boto3\n<span class=\"token keyword\">from</span> botocore<span class=\"token punctuation\">.</span>exceptions <span class=\"token keyword\">import</span> ClientError\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">get_item</span><span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> <span class=\"token string\">'order_id'</span> <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> query <span class=\"token keyword\">and</span> <span class=\"token string\">'customer'</span> <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> query<span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 쿼리 체크</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">400</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"message\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"key error\"</span><span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># query 뽑기</span>\n        order_id <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">[</span><span class=\"token string\">\"order_id\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        customer <span class=\"token operator\">=</span> query<span class=\"token punctuation\">[</span><span class=\"token string\">\"customer\"</span><span class=\"token punctuation\">]</span>\n    \n    dynamodb <span class=\"token operator\">=</span> boto3<span class=\"token punctuation\">.</span>resource<span class=\"token punctuation\">(</span><span class=\"token string\">'dynamodb'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># dynamodb</span>\n    table <span class=\"token operator\">=</span> dynamodb<span class=\"token punctuation\">.</span>Table<span class=\"token punctuation\">(</span><span class=\"token string\">'order_list'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># Table명 입력</span>\n    \n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n        response <span class=\"token operator\">=</span> table<span class=\"token punctuation\">.</span>get_item<span class=\"token punctuation\">(</span>Key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">'order_id'</span><span class=\"token punctuation\">:</span> order_id<span class=\"token punctuation\">,</span> <span class=\"token string\">\"customer\"</span><span class=\"token punctuation\">:</span> customer<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># key로 데이터 가져옴, 우리가 입력했던 키 값 입력.</span>\n    <span class=\"token keyword\">except</span> ClientError <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">500</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">[</span><span class=\"token string\">'Error'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">'Message'</span><span class=\"token punctuation\">]</span>  <span class=\"token comment\"># 에러시 예외 처리</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> <span class=\"token string\">\"Item\"</span> <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> response<span class=\"token punctuation\">:</span>  <span class=\"token comment\"># data 없을 시 404</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">404</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"message\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"data doen't exist\"</span><span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">[</span><span class=\"token string\">'Item'</span><span class=\"token punctuation\">]</span></code></pre></div>\n<ul>\n<li>post_item.py</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> boto3\n<span class=\"token keyword\">from</span> datetime <span class=\"token keyword\">import</span> datetime\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">post_item</span><span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>e <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> body <span class=\"token keyword\">for</span> e <span class=\"token keyword\">in</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'items'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'customer'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 키 값 체크</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">400</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'message'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'key error'</span><span class=\"token punctuation\">}</span>\n    \n    dynamodb <span class=\"token operator\">=</span> boto3<span class=\"token punctuation\">.</span>resource<span class=\"token punctuation\">(</span><span class=\"token string\">'dynamodb'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># dynamodb</span>\n    table <span class=\"token operator\">=</span> dynamodb<span class=\"token punctuation\">.</span>Table<span class=\"token punctuation\">(</span><span class=\"token string\">'order_list'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># Table명 입력</span>\n    \n    items <span class=\"token operator\">=</span> body<span class=\"token punctuation\">[</span><span class=\"token string\">'items'</span><span class=\"token punctuation\">]</span>\n    customer <span class=\"token operator\">=</span> body<span class=\"token punctuation\">[</span><span class=\"token string\">'customer'</span><span class=\"token punctuation\">]</span>\n    \n    <span class=\"token comment\"># datetime 이용</span>\n    order_id <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>datetime<span class=\"token punctuation\">.</span>now<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>strftime<span class=\"token punctuation\">(</span><span class=\"token string\">\"%Y%m%d%H%M%S\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 현재 시간을 int로</span>\n    response <span class=\"token operator\">=</span> table<span class=\"token punctuation\">.</span>put_item<span class=\"token punctuation\">(</span>  <span class=\"token comment\"># Item을 dict 형태로 추가</span>\n       Item<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>\n            <span class=\"token string\">'order_id'</span><span class=\"token punctuation\">:</span> order_id<span class=\"token punctuation\">,</span>\n            <span class=\"token string\">'customer'</span><span class=\"token punctuation\">:</span> customer<span class=\"token punctuation\">,</span>\n            <span class=\"token string\">'items'</span><span class=\"token punctuation\">:</span> items\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token string\">'order_id'</span><span class=\"token punctuation\">:</span> order_id<span class=\"token punctuation\">,</span>\n            <span class=\"token string\">'customer'</span><span class=\"token punctuation\">:</span> customer<span class=\"token punctuation\">,</span>\n            <span class=\"token string\">'items'</span><span class=\"token punctuation\">:</span> items\n        <span class=\"token punctuation\">}</span></code></pre></div>\n<p>저는 다음과 같은 데이터로 테스트를 했습니다.</p>\n<ul>\n<li>getitem</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"body\"</span><span class=\"token operator\">:</span> <span class=\"token null keyword\">null</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"resource\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/{proxy+}\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"path\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/path/to/resource\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"httpMethod\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"GET\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"isBase64Encoded\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"queryStringParameters\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"order_id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"customer\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"justkode\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"multiValueQueryStringParameters\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"order_id\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token number\">1</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"customer\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token string\">\"justkode\"</span>\n    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  ...\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>postitem</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"body\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"customer\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"justkode\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"items\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"E/A\"</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"fried chicken\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"price\"</span><span class=\"token operator\">:</span> <span class=\"token number\">3000</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"resource\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/{proxy+}\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"path\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/path/to/resource\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"httpMethod\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"POST\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"isBase64Encoded\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"queryStringParameters\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"multiValueQueryStringParameters\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"pathParameters\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"proxy\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/path/to/resource\"</span>\n  <span class=\"token punctuation\">}</span>\n  ...\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>Test 이후</h3>\n<p>성공적으로 연동이 된 모습 입니다.</p>\n<p align=\"center\">\n\t<img src=\"/post_image/just-cloud-computing/04-33.png\" width=\"50%\"/>\n\t<p align=\"center\" style=\"color:#888888; font-size: 12px;\">\n\t\tGET 성공\n\t</p>\n</p>\n<p align=\"center\">\n\t<img src=\"/post_image/just-cloud-computing/04-34.png\" width=\"50%\"/>\n\t<p align=\"center\" style=\"color:#888888; font-size: 12px;\">\n\t\tPOST 성공\n\t</p>\n</p>\n<h2>마치며</h2>\n<p>이렇게 <strong>AWS RDS, AWS DynamoDB</strong>에 대해서 기본 적인 세팅 및 생성 방법에 대해 배워 보는 시간을 가져 보았습니다. 다음 시간에는 <strong>Docker 기초</strong>에 대해서 공부 해 보도록 하겠습니다.</p>","id":"af7b76a9-0ed3-58b2-a41a-074a8675288d","frontmatter":{"date":"2021-07-27","path":"/data-science/just-cloud-computing-4","title":"[찍먹 Cloud Computing] 4. DynamoDB & Amazon RDS","tags":["Cloud-Computing"],"keyword":"Cloud Computing, AWS, DynamoDB, Amazon RDS","summary":"두 개의 대표적인 AWS DB를 공부 해 보자","img":"/post_image/thumbnail/just-cloud-computing-4.jpg","series":"찍먹 Cloud Computing"}}},"pageContext":{"series":{"data":{"allMarkdownRemark":{"edges":[{"node":{"id":"1772ad0f-ba2b-5ae2-addf-7005a7899efd","excerpt":"Kubernetes 안녕하세요! 오늘은 Kubernetes에 대해서 배워 보는 시간을 가져 보도록 하겠습니다. 일단 Kubernetes에 대해 알아 보기 전에, Container Orchestration에 대해서 먼저 알아 보도록 하겠습니다. Container Orchestration…","frontmatter":{"date":"2021-08-17","tags":["Cloud-Computing"],"path":"/data-science/just-cloud-computing-6","title":"[찍먹 Cloud Computing] 6. Kubernetes","img":"/post_image/thumbnail/just-cloud-computing-6.jpg","summary":"쿠버네티스에 대해서 알아보자."}}},{"node":{"id":"3198bd6d-9539-5210-a4fa-a673c99473c8","excerpt":"Docker Basic 안녕하세요? JustKode 입니다. 오늘은 컨테이너 기술을 구현하기 위한 Docker…","frontmatter":{"date":"2021-08-02","tags":["Cloud-Computing"],"path":"/data-science/just-cloud-computing-5","title":"[찍먹 Cloud Computing] 5. Docker Image, Container, Dockerfile","img":"/post_image/thumbnail/just-cloud-computing-5.jpg","summary":"도커의 기본 사용법에 대해서 알아보자."}}},{"node":{"id":"af7b76a9-0ed3-58b2-a41a-074a8675288d","excerpt":"AWS의 Database 안녕하세요? Justkode 입니다. 이번 시간에는 AWS의 Database에 대해서 공부 해 보는 시간을 가져 보도록 하겠습니다. AWS에서 사용하는 Database는 두 가지가 있습니다. DynamoDB 첫 번째는 DynamoDB 입니다. 이는 AWS의 대표격으로 사용 되는 데이터베이스이며, NoSQL Database 중 하나 입니다. 여기서 NoSQL은 무엇이냐 하면, 말 그대로 표준 SQL…","frontmatter":{"date":"2021-07-27","tags":["Cloud-Computing"],"path":"/data-science/just-cloud-computing-4","title":"[찍먹 Cloud Computing] 4. DynamoDB & Amazon RDS","img":"/post_image/thumbnail/just-cloud-computing-4.jpg","summary":"두 개의 대표적인 AWS DB를 공부 해 보자"}}},{"node":{"id":"b2bad362-a67d-502f-9bb2-818231959d8b","excerpt":"AWS Lambda 안녕하세요? Justkode 입니다. 이번 시간에는 AWS Lambda에 대해서 알아 보고, AWS Lambda 함수를 생성 해 보고, 이를 AWS API Gateway를 통해 연결 하여 사용 해 보는 시간을 가져 보도록 하겠습니다. AWS Lambda에 대해서 간단하게 설명 하고 넘어 가자면, PaaS (Platform As A Service)의 일종으로, 우리가 AWS Lambda에 우리가 구현한 API Code…","frontmatter":{"date":"2021-07-21","tags":["Cloud-Computing"],"path":"/data-science/just-cloud-computing-3","title":"[찍먹 Cloud Computing] 3. AWS Lambda","img":"/post_image/thumbnail/just-cloud-computing-3.jpg","summary":"Python 기반으로 AWS Lambda 함수를 만들어보자."}}},{"node":{"id":"f3e43e6f-5d36-5239-b7ec-ee45747150bd","excerpt":"AWS S3 안녕하세요? Justkode 입니다. 이번 시간에는 AWS S3에 대해서 알아 보고, AWS S3 버킷 생성, 파일 접근 권한 설정, Python 코드 상에서의 접근을 해 보도록 하겠습니다. 일단 AWS S3에 대해서 간단하게 설명 드리겠습니다. AWS S…","frontmatter":{"date":"2021-07-16","tags":["Cloud-Computing","Python"],"path":"/data-science/just-cloud-computing-2","title":"[찍먹 Cloud Computing] 2. AWS S3","img":"/post_image/thumbnail/just-cloud-computing-2.jpg","summary":"AWS S3와 boto3를 사용 해 보자"}}},{"node":{"id":"388d14b7-311f-5e27-af60-446e13f043f7","excerpt":"AWS EC2 안녕하세요? Justkode 입니다. 이번 시간에는 AWS EC2에 대해서 알아 보고, AWS EC…","frontmatter":{"date":"2021-07-06","tags":["Cloud-Computing"],"path":"/data-science/just-cloud-computing-1","title":"[찍먹 Cloud Computing] 1. AWS EC2란? / AWS EC2 인스턴스 만들기","img":"/post_image/thumbnail/just-cloud-computing-1.jpg","summary":"AWS EC2 인스턴스를 만들어 보자."}}},{"node":{"id":"337c5af4-2fa4-54e5-b531-46e418855740","excerpt":"Cloud Computing? 안녕하세요? Justkode 입니다. Cloud Computing…","frontmatter":{"date":"2021-06-25","tags":["Cloud-Computing"],"path":"/data-science/just-cloud-computing-0","title":"[찍먹 Cloud Computing] 0. Orientation","img":"/post_image/thumbnail/just-cloud-computing-0.jpg","summary":"Cloud Computing을 찍먹해 보자."}}}]}}},"categoryPosts":{"data":{"allMarkdownRemark":{"edges":[{"node":{"id":"1772ad0f-ba2b-5ae2-addf-7005a7899efd","excerpt":"Kubernetes 안녕하세요! 오늘은 Kubernetes에 대해서 배워 보는 시간을 가져 보도록 하겠습니다. 일단 Kubernetes에 대해 알아 보기 전에, Container Orchestration에 대해서 먼저 알아 보도록 하겠습니다. Container Orchestration…","frontmatter":{"date":"2021-08-17","tags":["Cloud-Computing"],"path":"/data-science/just-cloud-computing-6","title":"[찍먹 Cloud Computing] 6. Kubernetes","img":"/post_image/thumbnail/just-cloud-computing-6.jpg","summary":"쿠버네티스에 대해서 알아보자."}}},{"node":{"id":"3198bd6d-9539-5210-a4fa-a673c99473c8","excerpt":"Docker Basic 안녕하세요? JustKode 입니다. 오늘은 컨테이너 기술을 구현하기 위한 Docker…","frontmatter":{"date":"2021-08-02","tags":["Cloud-Computing"],"path":"/data-science/just-cloud-computing-5","title":"[찍먹 Cloud Computing] 5. Docker Image, Container, Dockerfile","img":"/post_image/thumbnail/just-cloud-computing-5.jpg","summary":"도커의 기본 사용법에 대해서 알아보자."}}},{"node":{"id":"af7b76a9-0ed3-58b2-a41a-074a8675288d","excerpt":"AWS의 Database 안녕하세요? Justkode 입니다. 이번 시간에는 AWS의 Database에 대해서 공부 해 보는 시간을 가져 보도록 하겠습니다. AWS에서 사용하는 Database는 두 가지가 있습니다. DynamoDB 첫 번째는 DynamoDB 입니다. 이는 AWS의 대표격으로 사용 되는 데이터베이스이며, NoSQL Database 중 하나 입니다. 여기서 NoSQL은 무엇이냐 하면, 말 그대로 표준 SQL…","frontmatter":{"date":"2021-07-27","tags":["Cloud-Computing"],"path":"/data-science/just-cloud-computing-4","title":"[찍먹 Cloud Computing] 4. DynamoDB & Amazon RDS","img":"/post_image/thumbnail/just-cloud-computing-4.jpg","summary":"두 개의 대표적인 AWS DB를 공부 해 보자"}}},{"node":{"id":"b2bad362-a67d-502f-9bb2-818231959d8b","excerpt":"AWS Lambda 안녕하세요? Justkode 입니다. 이번 시간에는 AWS Lambda에 대해서 알아 보고, AWS Lambda 함수를 생성 해 보고, 이를 AWS API Gateway를 통해 연결 하여 사용 해 보는 시간을 가져 보도록 하겠습니다. AWS Lambda에 대해서 간단하게 설명 하고 넘어 가자면, PaaS (Platform As A Service)의 일종으로, 우리가 AWS Lambda에 우리가 구현한 API Code…","frontmatter":{"date":"2021-07-21","tags":["Cloud-Computing"],"path":"/data-science/just-cloud-computing-3","title":"[찍먹 Cloud Computing] 3. AWS Lambda","img":"/post_image/thumbnail/just-cloud-computing-3.jpg","summary":"Python 기반으로 AWS Lambda 함수를 만들어보자."}}}]}}}}},"staticQueryHashes":["234633779","63159454"]}